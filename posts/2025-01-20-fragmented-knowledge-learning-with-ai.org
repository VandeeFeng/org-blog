#+title: 碎片知识学习 - with AI
#+date: <2025-01-20 16:48>
#+description: 查理芒格说过，最大的投资永远是自己。不管是 AI 行业内的还是行业外的，核心始终都应该在提升自己上，过度的追赶趋势，在泡泡破了的时候就得不偿失了。这也是我始终没有太深入的研究 Dify、Coze 这类中间类型的 AI 工具的原因。掌握更多底层的知识和逻辑是更重要的。
#+filetags: PKM

* 前言
对于是否要拥抱 AI，在程序员里大致可以分为两派：一部分是坚决不用，一类是已经将 AI 融入了自己的工作流程。后面就简称为革新派和精英派。

- 精英派不用 AI 来写代码的原因也简单充分，AI 写出来的代码就是垃圾，我可以自己写的更好为什么要让 AI 来破坏我的优美的代码？

- 革新派的观点也很简单，借助 AI 可以简化许多复杂的流程，例如自动补全、自动修正、自动测试、自动修复、自动提交等等。类似 Cursor 的 AI 代码编辑器，完全可以说改变了代码工作的方式。

我是一个行业外的人，自然不需要有太多立场，不需要站队。也没有什么压力，必须要跟上行业的大趋势，保住工作。因此我对于 AI 的出发点是优化信息处理、优化学习流程。并且，对于编程和 AI，我本身也挺有兴趣。我和 AI 相关的博客文章也都不是什么技术文章，更多的是一个行业外的人的记录和分享。

对于行业外的人，大致可以分为几种：一起吹泡泡吃行业红利的，和我类似关注 AI 在知识上的应用的，借助 AI 开始独立开发的。现在借助各种 AI 代码工具，行业外的人确实可以很快做出一些 MVP，或者一些小工具，大语言模型打破了自然语言编程的壁垒。我这半年也借助 AI 实现了许多以前想做但做不出来的小项目。

2024 的小泡泡是 RAG 、prompt 和 AI 逻辑推理，半年不到就冒出来不少于 5 种 RAG 类型，各种神级优化 prompt，现在回过头来看呢，真正落地到实际项目的没有多少。

2025 AI 的新泡泡是 Agents，其实也就是换了一种说法。让 AI 根据特定的 prompt 可以调用 tools，定义不同的 Agent 类，来分析完成不同的任务。LangChain、OpenAI、Gemini 都推出了各自的 Agents 框架，之前基于老框架的代码就全部都得更新才能正常运行，因为底层的函数调用都更改了。小业务、小项目只能被大趋势牵着走，牵一发动全身。

我想表达的是，这些 AI 的隐性成本是我这类行业外的人不需要支付的。

查理芒格说过，最大的投资永远是自己。不管是 AI 行业内的还是行业外的，核心始终都应该在提升自己上，过度的追赶趋势，在泡泡破了的时候就得不偿失了。这也是我始终没有太深入的研究 Dify、Coze 这类中间类型的 AI 工具的原因。掌握更多底层的知识和逻辑是更重要的。

后面是最近关于 PDF 和网页阅读的一些方法。日常需要 AI 来帮助的主要也是这两类。

* PDF 阅读
[[https://github.com/echohive42/AI-reads-books-page-by-page][GitHub - echohive42/AI-reads-books-page-by-page]] 这个项目前段时间上了 GitHub Trends，项目逻辑很值得学习，立马 fork 自定义了一下：https://github.com/VandeeFeng/ReadPDFpbp 。主要增加了 ollama 和 OpenRouter 模型的调用，还有一些自定义的参数，可以直接在 CLI 里调用。行业标准害人啊，cookbook 里都默认使用 OpenAI 和 Claude 的 API。

这个项目可以逐页阅读 PDF，生成知识要点，并根据页面分段总结。一个 50 页以上的 PDF，自己看就有点吃力了。NotebookLM 虽然很好用，但是超过了 80 页左右的 PDF，我实际用下来也不是很准确。

这个项目可以逐页阅读总结出关键的概念和知识点，然后再找到相关页面精读。另外一个优势就是本地模型是免费的，几个 200 页的 PDF 用 OpenAI 可能几刀就没了。
* 网页阅读
[[https://github.com/vandeefeng/gitmemo/issues/26][在知识之间、AI 之间创造 connection]] 这里是有关用 phidata 构建 Agent 来同时分析 2 个以上网页文章的内容。

解决了同时在几个主题相似的网页文章里快速找到关键信息的问题，效率提升不少。相关的项目很多，自己折腾了一下，主要是增加了导出的功能，这个对于我来说很重要。

导出历史对话就可以进一步整合，这个功能在许多大型 RAG 项目里就是不给。
* 零散的概念
平常一些概念上的学习，之前是在 OpenWeb UI 里，现在基本都在 Emacs 里用 gptel 了，全部都汇总在一个 org 文档里。

#+attr_html: :alt :class img :width 50% :height 50%
https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/llmchat.gif


* 其他工具
另外要强烈安利 [[https://github.com/nbonamy/witsy][Witsy]] 这个项目，不多介绍了，它就是我到目前为止用过最好用的 LLM 客户端。

Cursor、VSCode、Windsurf 等编辑器，不写代码，纯粹拿来学习也是完全没有问题的。该白嫖的行业红利还是要嫖的。

当然我的最爱还是 Emacs。
