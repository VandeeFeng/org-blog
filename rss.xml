<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Vandee's Blog]]></title>
<description><![CDATA[Vandee's Blog]]></description>
<link>https://www.vandee.art/</link>
<lastBuildDate>Thu, 31 Oct 2024 15:41:37 +0800</lastBuildDate>
<item>
  <title><![CDATA[还是入坑了 Memos]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5261d19">起因</a></li>
<li><a href="#org5618990">Memos</a></li>
<li><a href="#org25fccf8">SSL</a></li>
<li><a href="#orgc7ed13a">Memos 自定义</a>
<ul>
<li><a href="#orgf2c0ff2">自定义 css 和 JavaScript</a></li>
<li><a href="#org60e763b">Memos.top</a></li>
</ul>
</li>
<li><a href="#org1f3e71b">小结</a></li>
</ul>
</div>
</nav>
<p>
记录一下 VPS 配置 Memos 和 SSL 证书的配置。当作朋友圈和备忘录，Memos 还是值得玩玩的。
</p>
<div id="outline-container-org5261d19" class="outline-2">
<h2 id="org5261d19">起因</h2>
<div class="outline-text-2" id="text-org5261d19">
<p>
前几天，用 <a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a> 在 Vercel 上部署着玩了一下，用来做极简朋友圈其实效果真的很不错了，但有个问题就是备份和导出。由于这个项目是利用 Telegram Channel 的发布来同步到页面，Telegram 的数据管理就有点麻烦了。
</p>

<p>
之前在 Memos 大火的时候就一直想玩玩，但是没有服务器。前段时间不想再尝试 Memos 的原因是看到了这两篇文章：<a href="https://laozhang.org/archives/3638.html">Memos完美降级到Memos0.18.2版 | 老张博客</a> ， <a href="https://www.skyue.com/24061300.html">从弃用Memos说说开源项目 - 拾月</a> 。
</p>

<p>
但是这个项目确实很优秀，而其是开源的，以后有闲工夫了，还可以自己改。作为 flomo 的开源镜像，Memos 的功能性是毋庸置疑的，简洁舒适的界面，可备份的数据库，支持 MD 语法、标签、搜索等等， 通过 API 可以集成到其他项目。
</p>

<p>
再一个，VPS 每个月 4T 的流量还是要用一用。顺便再熟悉熟悉 Linux 和 SSH，还有 GO。
</p>
</div>
</div>
<div id="outline-container-org5618990" class="outline-2">
<h2 id="org5618990">Memos</h2>
<div class="outline-text-2" id="text-org5618990">
<p>
几个版本的主要特色：
</p>
<ul class="org-ul">
<li>0.18.2: 最简洁最稳定的版本，首次加入了 timeline 。</li>
<li>0.19.1 增加一键导出所有 memos 到 markdown，侧边栏可折叠，但 bug 比较多。</li>
<li>0.20.1 修复一系列 bugs，在 explore 页面内容太长的会折叠，点击 show more 会跳转到这个单独的 memo 页面。</li>
<li>0.22.X 开始，可以同时过滤多个标签，并显示每个标签下具体的 memo 数量，又移除了折叠。0.22.4 移除了 timeline，替换成了日历。最新的0.22.5 版本取消了一键导出。</li>
</ul>

<p>
对于我这个新用户，没有之前看到的数据迁移和 API 变更带来的困扰，感觉 Memos 还是挺好用的。版本便更之前一定要做好数据库备份。
</p>

<p>
<code>docker-compose.yml</code>:
</p>

<div class="org-src-container">
<pre class="src src-ymal">version: "3.0"
services:
  memos:
    image: neosmemo/memos:0.18.0 #版本 tag
    restart: always
    depends_on:
      - db
    ports:
      - 5230:5230
    environment:
      - MEMOS_DRIVER=postgres
      - MEMOS_DSN=user=memos password=secret dbname=memosdb host=db sslmode=disable

  db:
    image: postgres:16.1
    restart: unless-stopped
    volumes:
      - "./database:/var/lib/postgresql/data/"
    environment:
      POSTGRES_USER: memos
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: memosdb

</pre>
</div>

<p>
ip + 5230 就可以访问了，到这里都很惬意，Nginx 的配置才是让我头痛的开始。由于我还部署了 WeWeRSS，按照官方文档的 Nginx 配置了之后，占用了我的 80 端口，在配置 Memos 的时候一度不知道为什么域名不能直接访问。兜了一大圈，终于发现问题出现端口在这里，把 WeWeRSS 的端口还有 Nginx 的默认欢迎页面端口释放之后，就可以直接利用 Nginx 的反代用域名访问 docker 部署在端口上的项目了。
</p>

<p>
Nginx 命令：
</p>
<div class="org-src-container">
<pre class="src src-nil">sudo systemctl restart nginx # 修改了配置文件之后重启服务

sudo vim /etc/nginx/sites-available/conf_name  # 设置配置文件

sudo ln -s /etc/nginx/sites-available/conf_name /etc/nginx/sites-enabled/ # 设置配置文件可用

sudo rm /etc/nginx/sites-enabled/conf_name # 移除配置

sudo nginx -t # 检查配置是否有问题

</pre>
</div>
</div>
</div>
<div id="outline-container-org25fccf8" class="outline-2">
<h2 id="org25fccf8">SSL</h2>
<div class="outline-text-2" id="text-org25fccf8">
<p>
在网上找了一大圈，发现一个最简单也最符合现在需求的：<a href="https://certd.docmirror.cn/">Certd</a>，可以在 VPS 上用 docker 部署，一键生成 SSL 证书，还可以定时自动化续签。
</p>

<div class="org-src-container">
<pre class="src src-ymal">
# 随便创建一个目录
mkdir certd
# 进入目录
cd certd
# 下载docker-compose.yaml文件，或者手动下载放到certd目录下
wget https://gitee.com/certd/certd/raw/v2/docker/run/docker-compose.yaml

# 可以根据需要修改里面的配置
# 1.修改镜像版本号【可选】
# 2.配置数据保存路径【可选】
# 3.修改端口号【可选】
vi docker-compose.yaml # 【可选】

# 启动certd
docker compose up -d

# 访问
http://your_server_ip:7001
https://your_server_ip:7002
默认账号密码：admin/123456
</pre>
</div>

<p>
按照官方文档，五分钟就生成了 SSL 证书，然后 copy 到 VPS 里，在 Nginx 设置 <code>ssl_certificate</code> 的文件路径。
</p>

<p>
Nginx 的配置：
</p>
<div class="org-src-container">
<pre class="src src-nil">server {

  listen 80;
  server_name your_domain_or_server;

  # 在这里重定向HTTP到HTTPS
  return 301 https://$host$request_uri;

}

server {
  listen 443 ssl;
  server_name your_domain_or_server;

  ssl_certificate /your/path/to/fullchain.pem;  # 替换为你的证书路径
  ssl_certificate_key /your/path/to/privkey.pem;  # 替换为你的私钥路径

  location / {
    proxy_pass http://127.0.0.1:5230;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Accept-Encoding gzip;

    proxy_buffering off;
    proxy_cache off;

    send_timeout 300;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
  }
}
</pre>
</div>

<p>
后来发现更直接的是直接在 VPS 里使用 certbot。
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#23433;&#35013;</span>
<span style="color: #ECBE7B;">sudo</span> apt update
<span style="color: #ECBE7B;">sudo</span> apt install certbot python3-certbot-nginx

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#30003;&#35831;&#35777;&#20070;</span>
<span style="color: #ECBE7B;">sudo</span> certbot --nginx -d app1.example.com -d app2.example.com

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">--nginx&#65306;&#20351;&#29992; Nginx &#25554;&#20214;&#65292;Certbot &#20250;&#33258;&#21160;&#20462;&#25913; Nginx &#37197;&#32622;&#12290;</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">-d&#65306;&#25351;&#23450;&#20320;&#35201;&#30003;&#35831;&#35777;&#20070;&#30340;&#22495;&#21517;&#65292;&#21487;&#20197;&#19968;&#27425;&#24615;&#20026;&#22810;&#20010;&#22495;&#21517;&#30003;&#35831;&#12290;</span>

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">Certbot &#20250;&#35810;&#38382;&#19968;&#20123;&#22522;&#26412;&#38382;&#39064;&#65306;&#36755;&#20837;&#30005;&#23376;&#37038;&#20214;&#22320;&#22336;&#65288;&#29992;&#20110;&#25509;&#25910;&#35777;&#20070;&#21040;&#26399;&#25552;&#37266;&#65289;&#12290;&#21516;&#24847;&#26381;&#21153;&#26465;&#27454;&#65288;&#36755;&#20837; A &#21516;&#24847;&#65289;&#12290;&#26159;&#21542;&#24895;&#24847; &#20849;&#20139;&#20320;&#30340;&#37038;&#31665; &#32473; EFF&#65288;&#33258;&#24895;&#65289;&#12290;&#35810;&#38382;&#20320;&#26159;&#21542;&#35201; &#23558; HTTP &#37325;&#23450;&#21521;&#20026; HTTPS&#65306;&#36873;&#25321; 2 &#23558;&#25152;&#26377; HTTP &#35831;&#27714;&#37325;&#23450;&#21521;&#20026; HTTPS&#65288;&#25512;&#33616;&#65289;&#12290;</span>

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#33258;&#21160;&#32493;&#31614;</span>
<span style="color: #ECBE7B;">sudo</span> certbot renew --dry-run
</pre>
</div>

<p>
到这里，我终于可以用 https + 域名来访问 Memos 了，但这还不够好玩，不够自定义。
</p>
</div>
</div>
<div id="outline-container-orgc7ed13a" class="outline-2">
<h2 id="orgc7ed13a">Memos 自定义</h2>
<div class="outline-text-2" id="text-orgc7ed13a">
</div>
<div id="outline-container-orgf2c0ff2" class="outline-3">
<h3 id="orgf2c0ff2">自定义 css 和 JavaScript</h3>
<div class="outline-text-3" id="text-orgf2c0ff2">
<p>
适用 0.20.X 以上版本
</p>

<div class="org-src-container">
<pre class="src src-nil"># CSS 部分
/* 隐藏 通知 选项卡 */
#header-inbox {
  display: none;
}

/* 隐藏统计计数器容器 */
.w-auto.border.dark\:border-zinc-800.pl-1.pr-1\.5.rounded-md.flex.justify-between.items-center {
  display: none;
}

</pre>
</div>
</div>
</div>
<div id="outline-container-org60e763b" class="outline-3">
<h3 id="org60e763b">Memos.top</h3>
<div class="outline-text-3" id="text-org60e763b">
<p>
<a href="https://github.com/eallion/memos.top">eallion/memos.top</a> 这个项目利用 Memos 的 API 获取数据，生成静态页面。设置很简单，作者默认的设计也挺简洁的，CSS 可以自己修改。
</p>

<p>
<a href="https://blog.memos.ee/category/memos/">分类 Memos 下的文章 - Memos | 一个开源的碎片化笔记工具的不完全指南</a> 顺便找到了作者的一个网站。
</p>

<p>
到这里，饶了一大圈又回到了用 <a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a> 5 分钟部署的样子🤣。
</p>

<p>
最后放图：
</p>


<figure id="orga831dc3">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/memos.png" class="img" width="60%" height="60%">

</figure>


<figure id="org551c54c">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/memo-web.png" class="img" width="60%" height="60%">

</figure>

<p>
Memos 的 0.22.4 版本在 explore 页面支持搜索和标签统计，Memos.top 适合从 API 从头设计自己的页面。不想花那么多功夫，把 Memos 的页面保存到 HTML 文件，让 Cursor 随便改了改 CSS。
</p>
</div>
</div>
</div>
<div id="outline-container-org1f3e71b" class="outline-2">
<h2 id="org1f3e71b">小结</h2>
<div class="outline-text-2" id="text-org1f3e71b">
<p>
记录是存在的一种最简单的证明，某种意义上，如果在一个体系或者规则里没有留下痕迹，那么就是不存在的。历史是过往，更是现时的延展，所有的过往，都构成了自己此刻的一部分。一个没有历史的国家也很难有未来。
</p>

<blockquote>
<p>
除去用于维生所需，人每天还有大量能量剩余，有些人多到会溢出，必须加以消磨。有人因此思考自身处境，就有了宗教和艺术。有人因此考虑世界和存在，就有了哲学和科学。有人因此觉察到匆匆的时间之流，意识到自己只是一个个连续的此时此刻在不断流逝，因而想要抓住永恒，于是有了形形色色的创造物。一切都是易逝的，唯有回忆留存，创造物可以记录瞬间，可以唤起回忆，因此它是永恒的表征。溢出的能量让人去创造。而创造就是模仿。
</p>

<p>
通过模仿实际存在，模仿现实世界，一张画，一座雕塑，都可以对抗这种无尽的消逝。很多年前的某个下午早已过去，早已消逝，早已遗忘，但是通过人为创造物，人们又可以回到那个下午，一切如昨。这件事情很重要，人需要不断确定自己处于连续不断的生命之流里，需要确认自己是一种连续的存在，方法就是在回忆中流畅地沿着时间线回溯到任意一点。而每一点都是曾经的此时此刻，所有的此时此刻加在一起，就是自己存在的证据。
</p>

<p>
Source：  <a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>
</p>
</blockquote>

<p>
我现在的 PKM 体系大头还是在 Wiki，是迭代的原子笔记。Memos 记录闪念，Clip 备份有记录价值的文章。一直考虑过把他们都合在一起，但是 iPhone is iPhone，iPad is iPad，什么都有就等于什么都没有了。
</p>

<p>
<a href="https://wiki.vandee.art/#%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%EF%BC%8C%E8%80%8C%E8%AE%B0%E5%BD%95%E6%9C%AC%E8%BA%AB%E5%B7%B2%E7%BB%8F%E6%98%AF%E4%B8%80%E7%A7%8D%E5%8F%8D%E6%8A%97">没有记录就没有发生，而记录本身已经是一种反抗</a> 。Internet Archive 好像还在被围攻🤣，Z-library 也是劫后余生。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-vps.html">VPS</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[VPS]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/2024-10-28-memos-and-ssl-config.html</link>
  <guid>https://www.vandee.art/2024-10-28-memos-and-ssl-config.html</guid>
  <pubDate>Mon, 28 Oct 2024 02:39:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[我的第一篇 org 博客]]></title>
  <description><![CDATA[
<div id="outline-container-orga10c39a" class="outline-2">
<h2 id="orga10c39a">一</h2>
<div class="outline-text-2" id="text-orga10c39a">
<p>
从 Jekyll 到 Hexo，再到 Hugo，已经忘记了为什么开始写博客了。
</p>

<p>
随着对 Emacs 的使用，开始理解为什么之前看到有人用 Emacs 记录了自己的一生，org-mode 太好用了。
</p>

<p>
我也不是一个前端程序员，对前端的设计兴趣也不大，也不需要一个炫技的页面来展示。一直在说回归本质，stay simple，在博客这点上，我就一直弄的越来越复杂。
</p>

<p>
这个博客回归网页最基础的框架，只有 HTML，CSS，搜索是 JavaScript，然后就没有其他了。
</p>

<p>
形式和内容一直是分不开的，但形式对我来说早就变得越来越不重要。我不敢说自己现在已经到了一个什么特别的境界，但每天我都能感受到我和自然界，万物之间的交融越来越自然了。
</p>

<p>
这篇的所有文字都是在 Emacs 里用 org-mode 写的。
</p>


<figure id="org6c3f229">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-blog.png" alt="org-blog" class="img" width="50%" height="50%">

</figure>
</div>
</div>
<div id="outline-container-orgbd70a8a" class="outline-2">
<h2 id="orgbd70a8a">二</h2>
<div class="outline-text-2" id="text-orgbd70a8a">
<p>
无意中发现了这个： <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> ，可以从 org 文档生成 HTML 文件，简化了 org-publish 的流程。
</p>

<p>
然后发现了这个 <a href="https://github.com/chenyo-17/org-static-blog">chenyo-17/org-static-blog: Here hosts my org static blog</a>，CSS 后面再慢慢改吧。
</p>

<p>
之前的博客，还是可以通过：<a href="https://hugoblog-bxc.pages.dev">https://hugoblog-bxc.pages.dev</a> 来访问。
</p>

<p>
新的博客地址还是 <a href="https://www.vandee.art">https://www.vandee.art</a> , 也可以通过 <a href="https://x.vandee.art/blog">https://x.vandee.art/blog</a> 来访问。
</p>

<p>
回顾了一下这几年写的东西，那些记录的点滴穿珠成线，就像在漆黑无边的宇宙里，一个个闪光的思维点按照自然本身的秩序和规律联结在一起，一直延伸到现在。
</p>

<p>
积累和理论在平常可能体现不出区别，但同样的事情在这些的基础之上的表达就是会更准确。就像上面我的那段话，看看有学问的人是怎么表达的：
</p>
<blockquote>
<p>
在远古时期，大脑中所有负责感官的皮质，都跟负责记忆的海马体直接相连。但是随着人类进化，大脑皮质不断折叠，复杂化，其他感觉皮质跟海马体的路径被拉长了，只有一种感官始终保持不变。哪种感官呢？答案是：嗅觉。
</p>

<p>
所以，从某种程度来说，嗅觉跟记忆的联系是最为密切的。你一定有过这种经历：闻到某种气味，突然像打开了一道开关，大脑开始回放起一系列对应的画面，纤毫毕现 —— 这就是嗅觉的力量。
</p>

<p>
最经典的例子，就是普鲁斯特在《追忆似水年华》里面提到品尝到童年的小蛋糕时的感受了：
</p>

<p>
即使人亡物毁，久远的往事了无陈迹，唯独气味和滋味虽说更脆弱却更有生命力；虽说更虚幻却更经久不散，更忠贞不矢，它们仍然对依稀往事寄托着回忆、期待和希望，它们以几乎无从辨认的蛛丝马迹，坚强不屈地支撑起整座回忆的巨厦。
</p>

<p>
Source: <a href="https://mp.weixin.qq.com/s/u6_UDiNiu1pct_b3q1np4w">https://mp.weixin.qq.com/s/u6_UDiNiu1pct_b3q1np4w</a>
</p>
</blockquote>

<p>
准备整理整理之前的博客文章，陆续发在新博客里。
</p>

<p>
之前的 markdwon to org 的脚本又派上用场了：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #51afef;">(</span><span style="color: #51afef;">defun</span> <span style="color: #c678dd;">my-markdown-to-org</span> <span style="color: #c678dd;">()</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">interactive</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">save-excursion</span>
    <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#36716;&#25442;Markdown&#26631;&#39064;&#20026;Org-mode&#26631;&#39064;</span>
    <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">goto-char</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">point-min</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span>
    <span style="color: #98be65;">(</span><span style="color: #51afef;">while</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"^\s*</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">#+</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;"> </span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">.*</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">"</span> nil t<span style="color: #a9a1e1;">)</span>
      <span style="color: #a9a1e1;">(</span><span style="color: #51afef;">let</span> <span style="color: #51afef;">(</span><span style="color: #c678dd;">(</span>level <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">length</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">1</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
            <span style="color: #c678dd;">(</span>title1 <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">2</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
        <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">concat</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">make-string</span> level ?*<span style="color: #98be65;">)</span> <span style="color: #98be65;">" "</span> title1<span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#36716;&#25442;Markdown&#38142;&#25509;&#20026;Org-mode&#38142;&#25509;,&#20294;&#26159;&#36339;&#36807;&#22270;&#29255;&#38142;&#25509;</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">goto-char</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">point-min</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">while</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"\\[</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">.*?</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">\\](</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">.*?</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">)"</span> nil t<span style="color: #98be65;">)</span>
    <span style="color: #98be65;">(</span><span style="color: #51afef;">let</span> <span style="color: #a9a1e1;">(</span><span style="color: #51afef;">(</span>title <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">1</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
          <span style="color: #51afef;">(</span>url <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">2</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span>
      <span style="color: #a9a1e1;">(</span><span style="color: #51afef;">unless</span> <span style="color: #51afef;">(</span><span style="color: #51afef;">and</span> <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">string-match</span> <span style="color: #98be65;">"</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">jpeg</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">|</span><span style="color: #98be65;">png</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">|</span><span style="color: #98be65;">svg</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">"</span> url<span style="color: #c678dd;">)</span>
                   <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">string-match</span> <span style="color: #98be65;">"https"</span> url<span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
        <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">format</span> <span style="color: #98be65;">"[[%s][%s]]"</span> url title<span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#36716;&#25442;Markdown&#20195;&#30721;&#22359;&#20026;Org-mode&#20195;&#30721;&#22359;</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">goto-char</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">point-min</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">while</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"^```"</span> nil t<span style="color: #98be65;">)</span>
    <span style="color: #98be65;">(</span><span style="color: #51afef;">if</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">looking-back</span> <span style="color: #98be65;">"^```"</span><span style="color: #a9a1e1;">)</span>
        <span style="color: #a9a1e1;">(</span><span style="color: #51afef;">progn</span>
          <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #98be65;">"#+begin_src"</span><span style="color: #51afef;">)</span>
          <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"^```"</span> nil t<span style="color: #51afef;">)</span>
          <span style="color: #51afef;">(</span><span style="color: #51afef;">if</span> <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">looking-back</span> <span style="color: #98be65;">"^```"</span><span style="color: #c678dd;">)</span>
              <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #98be65;">"#+end_src"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#36716;&#25442;Markdown&#34892;&#20869;&#20195;&#30721;&#20026;Org-mode&#34892;&#20869;&#20195;&#30721;&#65292;&#28155;&#21152;&#31354;&#26684;</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">goto-char</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">point-min</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">while</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"`</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">[</span><span style="color: #51afef; font-weight: bold;">^</span><span style="color: #98be65;">`]+?</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">`"</span> nil t<span style="color: #98be65;">)</span>
    <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">format</span> <span style="color: #98be65;">" ~%s~ "</span> <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">1</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>

  <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#36716;&#25442;Markdown&#24378;&#35843;&#20026;Org-mode&#24378;&#35843;&#65292;&#28155;&#21152;&#31354;&#26684;</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">goto-char</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">point-min</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">while</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">re-search-forward</span> <span style="color: #98be65;">"\\*\\*</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">(</span><span style="color: #98be65;">.*?</span><span style="color: #51afef; font-weight: bold;">\\</span><span style="color: #51afef; font-weight: bold;">)</span><span style="color: #98be65;">\\*\\*"</span> nil t<span style="color: #98be65;">)</span>
    <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">replace-match</span> <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">format</span> <span style="color: #98be65;">" *%s* "</span> <span style="color: #51afef;">(</span><span style="color: #a9a1e1;">match-string</span> <span style="color: #da8548; font-weight: bold;">1</span><span style="color: #51afef;">)</span><span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>

</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-blog.html">Blog</a> </div>]]></description>
  <category><![CDATA[Blog]]></category>
  <link>https://www.vandee.art/2024-10-24-my-first-org-blog.html</link>
  <guid>https://www.vandee.art/2024-10-24-my-first-org-blog.html</guid>
  <pubDate>Thu, 24 Oct 2024 15:04:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[用 GitHub 仓库做书签和 AI 摘要-流动知识检索]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1069776">GitHub 书签</a></li>
<li><a href="#org3f71974">从GitHub书签到页面</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org1069776" class="outline-2">
<h2 id="org1069776">GitHub 书签</h2>
<div class="outline-text-2" id="text-org1069776">
<p>
看到了<a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引 - Nekonull&rsquo;s Garden</a>这篇文章，思路很值得借鉴，通过 GitHub Actions 来总结网页文章内容并写入到GitHub仓库里。
</p>

<p>
之前在思考流动知识检索的时候，完全没有想到利用 GitHub Actions来构建 workflow。
</p>

<p>
大致流程是：通过 <a href="https://github.com/osmoscraft/osmosmemo">osmos::memo</a> 书签插件，将网页文章的链接以MD格式保存到GitHub仓库，然后利用 GitHub Actions 读取这些链接用LLM做总结并保存到另一个 bookmark-summary 仓库。
</p>

<p>
作者的主要思路：
</p>

<blockquote>
<p>
为了解决这些问题，我建立了一个新的存储库 <a href="https://github.com/jerrylususu/bookmark-summary">bookmark-summary</a>。这个存储库可以视为现有书签存储库的辅助数据，其中包含了新增书签的 Markdown 格式全文、列表摘要、一句话总结，和现有存储库之间通过 Github Actions 联动。其工作原理如下：
</p>

<ol class="org-ol">
<li>我通过书签插件，在现有的书签存储库中新增了一个条目</li>

<li>代码提交到主干，触发名为 `summarize` 的 Github Actions（<a href="https://github.com/jerrylususu/bookmark-collection/blob/main/.github/workflows/bookmark_summary.yml">yml 工作流文件</a>）</li>

<li><p>
Github Actions 执行，首先 checkout 书签存储库和摘要存储库，然后执行
</p>

<p>
process<sub>changes.py</sub>
</p>

<ol class="org-ol">
<li>首先解析书签 README.md 文件，找到最近新增的条目标题和 URL</li>
<li>将 URL 保存到 Wayback Machine</li>
<li>输入 URL，使用 <a href="https://jina.ai/reader/">jina reader</a> API 获取网址的 Markdown 全文，并保存到 `YYYYMM/{title}<sub>raw.md</sub>`</li>
<li>输入 URL，使用 LLM 生成列表摘要（prompt 在 `summarize<sub>text</sub>` 函数 <a href="https://github.com/jerrylususu/bookmark-summary/blob/main/process_changes.py#L80">link</a>）</li>
<li>输入列表摘要，使用 LLM 生成一句话总结</li>
<li>将列表摘要和一句话总结保存到 `YYYYMM/{title}.md`（<a href="https://github.com/jerrylususu/bookmark-summary/blob/main/202410/2024-10-02-a-local-first-case-study-jakelazaroff.com.md">效果示例</a>）</li>
<li>更新摘要存储库的 README.md，增加到摘要文件的链接</li>
</ol></li>

<li>Github Actions 提交变更到摘要存储库</li>
</ol>
</blockquote>

<p>
我跟着文章跑着试了一下，效果挺好的：
</p>


<figure id="orge03ba4a">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/Kapture%202024-10-12%20at%2017.38.32.gif" class="img" width="60%" height="60%">

</figure>

<p>
Github Actions里模型、总结的prompt、输出的格式和方式都可以根据自己的需求修改。
</p>

<p>
有一个小<a href="https://github.com/jerrylususu/bookmark-summary/issues/8">问题</a>正好别人也遇到了，运行 <code>process_changes.py</code> 的时候由于要读取 <code>data.json</code> 文件，而初始文件没有内容，加上一个 <code>{}</code> 空字典就好了。可以在脚本里优化一下这个过程，如果没有 data.json 或者 data.json 文件为空自动写入数据。
</p>

<p>
对我来说，这个保存书签bookmark和总结的workflow特别适合那些不痛不痒的文章，有些亮点但又不那么惊艳，丢掉又有点可惜，或者是纯记录价值的文章，对我特别有价值的都直接记录在我的PKM里了。再一个，备份数据是一个很好的习惯，<a href="https://www.bilibili.com/video/BV1yA4y1U77y/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=337">关键素材被删！找不到素材？影视飓风是如何摆脱丢数据噩梦的</a>:三备二介异地。就是一个数据备份3次，储存在2种介质当中，并且保证有一份完整的数据在异地，可以简称3-2-1原则了。
</p>

<p>
之前尝试过 <a href="https://github.com/ArchiveBox/ArchiveBox">archivebox</a>，就是个可以自己部署的 Internet Archive。开源免费，支持 docker，但这个项目太大了，作者这个轻巧的方案现在正符合我的需求。
</p>

<p>
日常的阅读我现在基本都在 Readwise了，这个 workflow 后面还可以和RAG结合起来，作为我<a href="https://www.vandee.art/posts/2024-06-18-the-freshness-date-of-information/">流动知识的检索</a>的数据库。后面想到什么好点子再融合进来，这个项目是一个很好的思路和模板，感谢作者的分享。
</p>

<p>
我去掉了作者保存到 <a href="https://help.archive.org/help/using-the-wayback-machine/">Wayback Machine</a>（Internet Archive）的这一步，更改了按年份、月份保存文件，下面是修改后 <code>process_changes.py</code> 的完整代码：
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> re
<span style="color: #51afef;">from</span> typing <span style="color: #51afef;">import</span> List, Optional
<span style="color: #51afef;">import</span> requests
<span style="color: #51afef;">import</span> json
<span style="color: #51afef;">from</span> datetime <span style="color: #51afef;">import</span> datetime
<span style="color: #51afef;">from</span> pathlib <span style="color: #51afef;">import</span> Path
<span style="color: #51afef;">from</span> dataclasses <span style="color: #51afef;">import</span> dataclass, asdict
<span style="color: #51afef;">import</span> os
<span style="color: #51afef;">import</span> logging
<span style="color: #51afef;">import</span> time
<span style="color: #51afef;">from</span> functools <span style="color: #51afef;">import</span> wraps
<span style="color: #51afef;">from</span> urllib.parse <span style="color: #51afef;">import</span> quote

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">-- configurations begin --</span>
<span style="color: #dcaeea;">BOOKMARK_COLLECTION_REPO_NAME</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"bookmark-collection"</span>
<span style="color: #dcaeea;">BOOKMARK_SUMMARY_REPO_NAME</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"bookmark-summary"</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">-- configurations end --</span>

logging.basicConfig(
    level=logging.INFO,
    <span style="color: #c678dd;">format</span>=<span style="color: #98be65;">'%(asctime)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s'</span>,
    datefmt=<span style="color: #98be65;">'%Y-%m-%d %H:%M:%S'</span>
)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">log_execution_time</span>(func):
    <span style="color: #ECBE7B;">@wraps</span>(func)
    <span style="color: #51afef;">def</span> <span style="color: #c678dd;">wrapper</span>(*args, **kwargs):
        logging.info(f<span style="color: #98be65;">'Entering </span>{func.<span style="color: #c678dd;">__name__</span>}<span style="color: #98be65;">'</span>)
        <span style="color: #dcaeea;">start_time</span> = time.time()
        <span style="color: #dcaeea;">result</span> = func(*args, **kwargs)
        <span style="color: #dcaeea;">end_time</span> = time.time()
        <span style="color: #dcaeea;">elapsed_time</span> = end_time - start_time
        logging.info(f<span style="color: #98be65;">'Exiting </span>{func.<span style="color: #c678dd;">__name__</span>}<span style="color: #98be65;"> - Elapsed time: </span>{elapsed_time:.4f}<span style="color: #98be65;"> seconds'</span>)
        <span style="color: #51afef;">return</span> result
    <span style="color: #51afef;">return</span> wrapper

<span style="color: #ECBE7B;">@dataclass</span>
<span style="color: #51afef;">class</span> <span style="color: #ECBE7B;">SummarizedBookmark</span>:
    year: <span style="color: #c678dd;">str</span>
    month: <span style="color: #c678dd;">str</span>  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">yyyyMM</span>
    title: <span style="color: #c678dd;">str</span>
    url: <span style="color: #c678dd;">str</span>
    timestamp: <span style="color: #c678dd;">int</span>  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">unix timestamp</span>

<span style="color: #dcaeea;">CURRENT_YEAR</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y'</span>)
<span style="color: #dcaeea;">CURRENT_MONTH</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%m'</span>)
<span style="color: #dcaeea;">CURRENT_DATE</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y-%m-%d'</span>)
<span style="color: #dcaeea;">CURRENT_DATE_AND_TIME</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y-%m-%d %H:%M:%S'</span>)

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_text_content</span>(url: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">jina_url</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"https://r.jina.ai/</span>{url}<span style="color: #98be65;">"</span>
    <span style="color: #dcaeea;">response</span>: requests.Response = requests.get(jina_url)
    <span style="color: #51afef;">return</span> response.text

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">call_openai_api</span>(prompt: <span style="color: #c678dd;">str</span>, content: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">model</span>: <span style="color: #c678dd;">str</span> = os.environ.get(<span style="color: #98be65;">'OPENAI_API_MODEL'</span>, <span style="color: #98be65;">'gpt-4o-mini'</span>)
    <span style="color: #dcaeea;">headers</span>: <span style="color: #c678dd;">dict</span> = {
        <span style="color: #98be65;">"Authorization"</span>: f<span style="color: #98be65;">"Bearer </span>{os.environ['OPENAI_API_KEY']}<span style="color: #98be65;">"</span>,
        <span style="color: #98be65;">"Content-Type"</span>: <span style="color: #98be65;">"application/json"</span>
    }
    <span style="color: #dcaeea;">data</span>: <span style="color: #c678dd;">dict</span> = {
        <span style="color: #98be65;">"model"</span>: model,
        <span style="color: #98be65;">"messages"</span>: [
            {<span style="color: #98be65;">"role"</span>: <span style="color: #98be65;">"system"</span>, <span style="color: #98be65;">"content"</span>: prompt},
            {<span style="color: #98be65;">"role"</span>: <span style="color: #98be65;">"user"</span>, <span style="color: #98be65;">"content"</span>: content}
        ]
    }
    <span style="color: #dcaeea;">api_endpoint</span>: <span style="color: #c678dd;">str</span> = os.environ.get(<span style="color: #98be65;">'OPENAI_API_ENDPOINT'</span>, <span style="color: #98be65;">'https://api.openai.com/v1/chat/completions'</span>)
    <span style="color: #dcaeea;">response</span>: requests.Response = requests.post(api_endpoint, headers=headers, data=json.dumps(data))
    <span style="color: #51afef;">return</span> response.json()[<span style="color: #98be65;">'choices'</span>][<span style="color: #da8548; font-weight: bold;">0</span>][<span style="color: #98be65;">'message'</span>][<span style="color: #98be65;">'content'</span>]

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">summarize_text</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">prompt</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"""</span>
<span style="color: #98be65;">&#35831;&#29992;markdown&#21015;&#34920;&#26684;&#24335;**&#35814;&#32454;**&#24635;&#32467;&#25105;&#21457;&#36865;&#32473;&#20320;&#30340;&#25991;&#26412;&#12290;&#20805;&#20998;&#21512;&#29702;&#20351;&#29992;&#32553;&#36827;&#21644;&#23376;&#21015;&#34920;&#65292;&#22914;&#26524;&#26377;&#38656;&#35201;&#21487;&#20197;&#20351;&#29992;&#22810;&#23618;&#23376;&#21015;&#34920;&#65292;&#25110;&#26159;&#22312;&#23376;&#21015;&#34920;&#20013;&#21253;&#21547;&#22810;&#20010;&#26465;&#30446;&#65288;3&#20010;&#25110;&#20197;&#19978;&#65289;&#12290;&#22312;&#27599;&#20010;&#24635;&#32467;&#39033;&#24320;&#22836;&#65292;&#29992;&#31616;&#30701;&#30340;&#35789;&#35821;&#25551;&#36848;&#35813;&#39033;&#12290;&#24573;&#30053;&#21644;&#25991;&#31456;&#20027;&#20307;&#26080;&#20851;&#30340;&#20869;&#23481;&#65288;&#22914;&#24191;&#21578;&#65289;&#12290;&#26080;&#35770;&#21407;&#25991;&#35821;&#35328;&#20026;&#20309;&#65292;&#24635;&#26159;&#20351;&#29992;&#20013;&#25991;&#36827;&#34892;&#24635;&#32467;&#12290;</span>
<span style="color: #98be65;">"""</span>
    <span style="color: #51afef;">return</span> call_openai_api(prompt, text)

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">one_sentence_summary</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">prompt</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"&#20197;&#19979;&#26159;&#23545;&#19968;&#31687;&#38271;&#25991;&#30340;&#21015;&#34920;&#24418;&#24335;&#24635;&#32467;&#12290;&#35831;&#22522;&#20110;&#27492;&#36755;&#20986;&#23545;&#35813;&#25991;&#31456;&#30340;&#31616;&#30701;&#24635;&#32467;&#65292;&#38271;&#24230;&#19981;&#36229;&#36807;100&#20010;&#23383;&#12290;&#24635;&#26159;&#20351;&#29992;&#31616;&#20307;&#20013;&#25991;&#36755;&#20986;&#12290;"</span>
    <span style="color: #51afef;">return</span> call_openai_api(prompt, text)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">slugify</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">invalid_fs_chars</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">'/</span><span style="color: #a9a1e1;">\\</span><span style="color: #98be65;">:*?"&lt;&gt;|'</span>
    <span style="color: #51afef;">return</span> re.sub(r<span style="color: #98be65;">'['</span> + re.escape(invalid_fs_chars) + r<span style="color: #98be65;">'\s]+'</span>, <span style="color: #98be65;">'-'</span>, text.lower()).strip(<span style="color: #98be65;">'-'</span>)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_summary_file_path</span>(title: <span style="color: #c678dd;">str</span>, timestamp: <span style="color: #c678dd;">int</span>, year: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>, month: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>, in_readme_md: <span style="color: #c678dd;">bool</span> = <span style="color: #a9a1e1;">False</span>) -&gt; Path:
    <span style="color: #dcaeea;">date_str</span> = datetime.fromtimestamp(timestamp).strftime(<span style="color: #98be65;">'%Y-%m-%d'</span>)
    <span style="color: #dcaeea;">summary_filename</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"</span>{date_str}<span style="color: #98be65;">-</span>{slugify(title)}<span style="color: #98be65;">.md"</span>
    <span style="color: #51afef;">if</span> year <span style="color: #51afef;">is</span> <span style="color: #a9a1e1;">None</span>:
        <span style="color: #dcaeea;">year</span> = CURRENT_YEAR
    <span style="color: #51afef;">if</span> month <span style="color: #51afef;">is</span> <span style="color: #a9a1e1;">None</span>:
        <span style="color: #dcaeea;">month</span> = CURRENT_MONTH
    <span style="color: #51afef;">if</span> in_readme_md:
        <span style="color: #dcaeea;">root</span>: Path = Path(year, month)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; year/month</span>
    <span style="color: #51afef;">else</span>:
        <span style="color: #dcaeea;">root</span>: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, year, month)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; year/month</span>
    <span style="color: #51afef;">return</span> Path(root, summary_filename)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_text_content_path</span>(title: <span style="color: #c678dd;">str</span>, in_summary_md: <span style="color: #c678dd;">bool</span> = <span style="color: #a9a1e1;">False</span>) -&gt; Path:
    <span style="color: #dcaeea;">text_content_filename</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"</span>{CURRENT_DATE}<span style="color: #98be65;">-</span>{slugify(title)}<span style="color: #98be65;">_raw.md"</span>
    <span style="color: #dcaeea;">root</span>: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, CURRENT_YEAR, CURRENT_MONTH)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; YEAR/MONTH</span>
    <span style="color: #51afef;">if</span> in_summary_md:
        <span style="color: #dcaeea;">root</span> = Path(<span style="color: #98be65;">"."</span>)
    <span style="color: #51afef;">return</span> Path(root, text_content_filename)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">build_summary_file</span>(title: <span style="color: #c678dd;">str</span>, url: <span style="color: #c678dd;">str</span>, summary: <span style="color: #c678dd;">str</span>, one_sentence: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #51afef;">return</span> f<span style="color: #98be65;">"""# </span>{title}
<span style="color: #98be65;">- URL: </span>{url}
<span style="color: #98be65;">- Added At: </span>{CURRENT_DATE_AND_TIME}
<span style="color: #98be65;">- [[</span>{get_text_content_path(<span style="color: #dcaeea;">title</span>, <span style="color: #dcaeea;">in_summary_md</span>=<span style="color: #a9a1e1;">True</span>][Link To Text]]<span style="color: #98be65;">})</span>

<span style="color: #98be65;">## TL;DR</span>
{one_sentence}

<span style="color: #98be65;">## Summary</span>
{summary}
<span style="color: #98be65;">"""</span>

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">build_summary_readme_md</span>(summarized_bookmarks: List[SummarizedBookmark]) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">initial_prefix</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"""# Bookmark Summary</span>
<span style="color: #98be65;">&#35835;&#21462; bookmark-collection &#20013;&#30340;&#20070;&#31614;&#65292;&#20351;&#29992; jina reader &#33719;&#21462;&#25991;&#26412;&#20869;&#23481;&#65292;&#28982;&#21518;&#20351;&#29992; LLM &#24635;&#32467;&#25991;&#26412;&#12290;&#35814;&#32454;&#23454;&#29616;&#35831;&#21442;&#35265; process_changes.py&#12290;&#38656;&#35201;&#21644; bookmark-collection &#20013;&#30340; Github Action &#19968;&#36215;&#20351;&#29992;&#12290;</span>

<span style="color: #98be65;">## Summarized Bookmarks</span>
<span style="color: #98be65;">"""</span>
    <span style="color: #dcaeea;">summary_list</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">""</span>
    <span style="color: #dcaeea;">sorted_summarized_bookmarks</span> = <span style="color: #c678dd;">sorted</span>(summarized_bookmarks, key=<span style="color: #51afef;">lambda</span> bookmark: bookmark.timestamp, reverse=<span style="color: #a9a1e1;">True</span>)
    <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> sorted_summarized_bookmarks:
        <span style="color: #dcaeea;">summary_file_path</span> = get_summary_file_path(
            title=bookmark.title,
            timestamp=bookmark.timestamp,
            month=bookmark.month,
            in_readme_md=<span style="color: #a9a1e1;">True</span>
        )
        <span style="color: #dcaeea;">summary_list</span> += f<span style="color: #98be65;">"- (</span>{datetime.fromtimestamp(bookmark.timestamp).strftime('%Y-%m-%d')}<span style="color: #98be65;">) [[</span>{summary_file_path}<span style="color: #98be65;">][</span>{bookmark.title}<span style="color: #98be65;">]]</span><span style="color: #a9a1e1;">\n</span><span style="color: #98be65;">"</span>
    <span style="color: #51afef;">return</span> initial_prefix + summary_list

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">process_bookmark_file</span>():
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#21019;&#24314;&#36335;&#24452;&#20026; year/month &#30340;&#25991;&#20214;&#22841;</span>
    Path(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/</span>{CURRENT_YEAR}<span style="color: #98be65;">/</span>{CURRENT_MONTH}<span style="color: #98be65;">'</span>).mkdir(parents=<span style="color: #a9a1e1;">True</span>, exist_ok=<span style="color: #a9a1e1;">True</span>)

    <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_COLLECTION_REPO_NAME}<span style="color: #98be65;">/README.md'</span>, <span style="color: #98be65;">'r'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
        <span style="color: #dcaeea;">bookmark_lines</span>: List[<span style="color: #c678dd;">str</span>] = f.readlines()

    <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/data.json'</span>, <span style="color: #98be65;">'r'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
        <span style="color: #dcaeea;">summarized_bookmark_dicts</span> = json.load(f)
        <span style="color: #dcaeea;">summarized_bookmarks</span> = [SummarizedBookmark(**bookmark) <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmark_dicts]

    <span style="color: #dcaeea;">summarized_urls</span> = <span style="color: #c678dd;">set</span>([bookmark.url <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmarks])

    <span style="color: #dcaeea;">title</span>: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>
    <span style="color: #dcaeea;">url</span>: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>
    <span style="color: #51afef;">for</span> line <span style="color: #51afef;">in</span> bookmark_lines:
        <span style="color: #51afef;">match</span>: re.Match = re.search(r<span style="color: #98be65;">'- \[(.*?)\]\((.*?)\)'</span>, line)
        <span style="color: #51afef;">if</span> <span style="color: #51afef;">match</span> <span style="color: #51afef;">and</span> <span style="color: #51afef;">match</span>.group(<span style="color: #da8548; font-weight: bold;">2</span>) <span style="color: #51afef;">not</span> <span style="color: #51afef;">in</span> summarized_urls:
            <span style="color: #dcaeea;">title</span>, <span style="color: #dcaeea;">url</span> = <span style="color: #51afef;">match</span>.groups()
            <span style="color: #51afef;">break</span>

    <span style="color: #51afef;">if</span> title <span style="color: #51afef;">and</span> url:
        <span style="color: #dcaeea;">text_content</span>: <span style="color: #c678dd;">str</span> = get_text_content(url)
        <span style="color: #dcaeea;">summary</span>: <span style="color: #c678dd;">str</span> = summarize_text(text_content)
        <span style="color: #dcaeea;">one_sentence</span>: <span style="color: #c678dd;">str</span> = one_sentence_summary(summary)
        <span style="color: #dcaeea;">summary_file_content</span>: <span style="color: #c678dd;">str</span> = build_summary_file(title, url, summary, one_sentence)
        <span style="color: #dcaeea;">timestamp</span> = <span style="color: #c678dd;">int</span>(datetime.now().timestamp())

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#20445;&#23384;&#21407;&#22987;&#25991;&#26412;&#20869;&#23481;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(get_text_content_path(title), <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(text_content)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#20445;&#23384;&#24635;&#32467;&#25991;&#20214;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(get_summary_file_path(title, timestamp), <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(summary_file_content)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#28155;&#21152;&#21040;&#24635;&#32467;&#20070;&#31614;&#21015;&#34920;</span>
        summarized_bookmarks.append(SummarizedBookmark(
            year=CURRENT_YEAR,
            month=CURRENT_MONTH,
            title=title,
            url=url,
            timestamp=timestamp
        ))

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032; README &#21644;&#25968;&#25454;&#25991;&#20214;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/README.md'</span>, <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(build_summary_readme_md(summarized_bookmarks))

        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/data.json'</span>, <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            json.dump([asdict(bookmark) <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmarks], f, indent=<span style="color: #da8548; font-weight: bold;">2</span>, ensure_ascii=<span style="color: #a9a1e1;">False</span>)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">main</span>():
    process_bookmark_file()

<span style="color: #51afef;">if</span> <span style="color: #c678dd;">__name__</span> == <span style="color: #98be65;">"__main__"</span>:
    main()

</pre>
</div>
</div>
</div>
<div id="outline-container-org3f71974" class="outline-2">
<h2 id="org3f71974">从GitHub书签到页面</h2>
<div class="outline-text-2" id="text-org3f71974">
<p>
突然想起来了之前的<a href="https://www.vandee.art/posts/2024-04-29-vandee-clip/">clip</a>，这两个整合到一起正好。于是进一步修改 <code>process_changes.py</code> 代码，更改文件生成的路径以符合clip，将AI总结和原文内容整合到 <code>index.md</code> ，这是现在的保存书签 - AI总结 - clip页面全流程：
</p>


<figure id="org0bee737">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/clipsummary-min.gif" class="img" width="60%" height="60%">

</figure>

<p>
全部完整代码在 <a href="https://github.com/VandeeFeng/bookmark-summary">bookmark-summary</a>。AI摘要的prompt和md初始页可以再完善一下。
</p>

<p>
再次感谢 <a href="https://github.com/theowenyoung/clip">Owen&rsquo;s Clip</a> , <a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引</a>这两个项目的作者。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-input.html">Input</a> <a href="https://www.vandee.art/tag-github.html">Github</a> <a href="https://www.vandee.art/tag-python.html">Python</a> </div>]]></description>
  <category><![CDATA[Input]]></category>
  <category><![CDATA[Github]]></category>
  <category><![CDATA[Python]]></category>
  <link>https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html</link>
  <guid>https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html</guid>
  <pubDate>Sat, 12 Oct 2024 21:08:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[艺术的模仿游戏]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org2d82022">模仿、游戏、亵渎</a></li>
<li><a href="#org60ada85">艺术和模仿</a></li>
<li><a href="#orgfd3a735">创造力与记忆力</a></li>
<li><a href="#org8814ce0">模仿游戏</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org2d82022" class="outline-2">
<h2 id="org2d82022">模仿、游戏、亵渎</h2>
<div class="outline-text-2" id="text-org2d82022">
<p>
<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>，RSS推送了这个订阅。如果你也喜欢思考，那么大概率你也会爱上这篇文章里提出的思考。
</p>

<p>
你可能会厌烦我在这类post里列举的大篇幅原文和我的原文，它们占据了页面里的许多篇幅，占用了你的注意力，让你现在就想赶紧滑过去看到下一个醒目的标题。你可能也会同样厌烦我在这些原文里留下的思维痕迹，没有提供给你一个纯净的思考空间。
</p>

<p>
对我而言，在写这些类似读书笔记的post时，它就像是一场无关时间和空间的另一个时间线可能存在的对话。这类post大多也没有具体行文的逻辑，因为这就是思考在最初的样子。我想尽力还原这个纯净的思考空间。
</p>

<blockquote>
<p>
除去用于维生所需，人每天还有大量能量剩余，有些人多到会溢出，必须加以消磨。有人因此思考自身处境，就有了宗教和艺术。有人因此考虑世界和存在，就有了哲学和科学。有人因此觉察到匆匆的时间之流，意识到自己只是一个个连续的此时此刻在不断流逝，因而想要抓住永恒，于是有了形形色色的创造物。一切都是易逝的，唯有回忆留存，创造物可以记录瞬间，可以唤起回忆，因此它是永恒的表征。溢出的能量让人去创造。而创造就是模仿。
</p>
</blockquote>

<p>
在<a href="https://www.vandee.art/posts/2022-11-24-undefined/">都是因为无聊</a>里我从另一个角度也思考到了这个问题：
</p>

<blockquote>
<p>
无聊同样也是想象力的来源，人类进步的来源。
</p>

<p>
阿基米德洗澡的时候无聊，发现了浮力；牛顿在苹果树下面无聊（有争议），发现了万有引力；伽利略对着天空无聊，发明了天文望远镜进一步证实了哥白尼的日心说；达尔文喜欢对着动植物无聊，提出了自然选择；爱因斯坦对着时间无聊，想搞清楚时间到底是什么，提出了相对论；尼古拉・特斯拉对着黑夜无聊，做出了第一个交流电发动机（本人讨厌爱迪生）；
</p>

<p>
人对着木头无聊，点着了火。
</p>
</blockquote>

<p>
最近巴黎奥运开幕式国内外的争议很多。草草的浏览了国内外主流平台的新闻言论和一些关注的RSS推送，还是这篇最炙热，这些文字让我的大脑像火锅里被烫的猪脑一样炙热滚烫：
</p>

<blockquote>
<p>
就像是只要出现一张长条桌，再安排13个人坐在那里，亵渎的潜在可能性就已经产生了。因为13个人加一张长条桌，作为一种对于历史和宗教的模拟，已经被确定为特定的形式。有人借用这个形式重新模拟，构成一个游戏的一部分，那么就会和部分人的特定解读相互冲突。但是占据形式这个想法本身，不就是个很荒谬么？印度教徒或者佛教徒，不会宣布垄断打坐这个形式，不会因此有一只猫或者一个朋克摆出这个姿势就会让他们上火。从游戏的角度来看，感到亵渎或者愤怒本身就是游戏成功的象征。
</p>

<p>
因为一次模拟就是一种重构，就是一次重新解读，就是在回忆之海里投入一个新的锚标。模仿本身就具有一种邀约的姿态，邀请另外一个人来观看，从另外一个角度去观看他认为熟悉的事物。当这个人不愿意从他熟悉的事物上离开自己惯常的理解，碰撞就已经发生，游戏的使命其实已经完成。一个寂然无声，没有任何反馈的游戏才是失败的游戏。
</p>
</blockquote>

<p>
艺术就是对我来说最有趣的模仿游戏了。
</p>
</div>
</div>
<div id="outline-container-org60ada85" class="outline-2">
<h2 id="org60ada85">艺术和模仿</h2>
<div class="outline-text-2" id="text-org60ada85">
<p>
《艺术的故事》和《现代艺术150年》这两本书从历史的角度，阐述了一个让我担忧的结论：艺术本身可能并不存在，存在的只是艺术品。
</p>

<p>
现代艺术更不用说，资本引导着艺术的潮流。与印象派起源的19世纪初期到现代艺术萌芽的20世纪初期相比，艺术的自由早就不复存在了。现在已经看不到在巴提诺格里斯大街11号（现为克里希大街9号）的咖啡馆里曾经热闹的景象。保罗·塞尚、埃德加·德加、莫奈等大佬们，数年来他们都聚在这里，讨论艺术和人生（在这个阶段他们常常被简称为“巴提诺格里斯小组”）。印象派之父马奈的工作室就在附近。印象派小分队的成员都拿各自的生涯作赌注，决定不理会学院的那套系统，最终宣起了印象派革命。
</p>

<p>
正是那个时候革命与机械化就催生了一个被称为资产阶级的新的社会阶层。路易斯·勒罗伊做梦也不会想到，他对莫奈的绘画《日出·印象》的苛刻评论竟然催生出了伟大的印象派。资本的这些规则是与艺术同在的另一个推动力，没有资本的规则艺术品的价值可能永远不会被推到现代艺术的高度。它们固然很可恶但也激发着真正的“艺术家”去完成超越资本规则的艺术品。
</p>

<p>
也更难看到马塞尔·杜尚幽默叛逆的《泉》、保罗·塞尚《圣维克多山》独特的双视角理念对视觉透视的颠覆、达达主义对于现实的嘲讽、梵高向日葵的橙黄的炙热与癫狂的深蓝、毕加索《亚维农的少女》粗狂的立体主义几何色块、萨尔瓦多·达利《记忆的永恒》重构的想象力。
</p>

<p>
我喜欢艺术的根本原因是 <b>我喜欢关于创造的一切</b> 。<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>的作者谈到：
</p>

<blockquote>
<p>
而创造就是模仿，以前我没想明白这个问题，认为存在两分法，90%的模仿和10%的独创。不是这样的，只有模仿。模仿自然界的实际存在，于是有了古代艺术，岩壁上的手绘野牛，或者古埃及墓穴壁画里的花园，乃至古希腊人创作出来的惟妙惟肖石雕，都是模仿。
</p>

<p>
人会睡去，人会遗忘，人会死亡，眼前的一切转眼成空，所以要模仿。通过模仿实际存在，模仿现实世界，一张画，一座雕塑，都可以对抗这种无尽的消逝。很多年前的某个下午早已过去，早已消逝，早已遗忘，但是通过人为创造物，人们又可以回到那个下午，一切如昨。这件事情很重要，人需要不断确定自己处于连续不断的生命之流里，需要确认自己是一种连续的存在，方法就是在回忆中流畅地沿着时间线回溯到任意一点。而每一点都是曾经的此时此刻，所有的此时此刻加在一起，就是自己存在的证据。
</p>
</blockquote>

<p>
我不想去承认创造就是模仿这个事实，就像我不想去承认艺术可能其实并不存在这个事实。语言的表达是非常有限的，所以我更喜欢艺术的表达和逻辑辩证的表达。“而创造就是模仿”这句话，结合全篇的文章你也无法说明作者真正想表达的意思是什么，因为这牵扯到作者一生的经历。
</p>

<p>
我更愿意换句话来表达：创造易是模仿，对大自然的模仿。我喜欢用“易”来指代“亦”，类似于文言文里的通假字。“就是”在逻辑上表示一个或非的判断，在大的论点里我不喜欢用逻辑上的判断来表达观点，这样的表达在缺失逻辑推理过程时，难免会让人质疑，也没有那么绝对的事情。
</p>

<p>
我其实不喜欢深究概念本身，就像我喜欢印象派和抽象派一样。没有绝对的真实，只有每个人不同的印象。这些抽象的印象更加真实，每一个客观事实的实例对于不同个体在不同时空的意义都不会是相同的。水对于原子世界是 H₂O，它也是“上善若水”，它也是农夫山泉，对于地球生命它是生命之源。所以水是什么？回答这个问题，或者这个问题本身不重要，这些概念只是我们思维的重构，只是我们对物质的反馈。这对于水来说是不公平的，你会喜欢别人随便给你起外号么？印象派对于自然就包容太多了，而抽象派、超现实主义则在概念上进一步解构和重构。
</p>

<p>
把话题缩小一些，艺术创造就是模仿么？所有的创造都可以看作是对大自然的模仿，特别是艺术方面的创造。黄金比例是人类从数学角度对自然拙劣的模仿、透视法是从几何角度对自然空间拙劣的模仿、色彩科学是从光谱角度对自然的拙劣模仿。这里的“模仿”更准确的逻辑语义表达可能是“重构”，重构我们人类对于物质的解释与反馈。用计算机语言来说就是，物质给予了一个输入，人类大脑本能的反馈输出，我们不可能避免这个过程，因为这是生命的脉动。
</p>

<p>
这些重构就根据不同的大脑结构分成了许多种：文学家写文学、科学家做研究、艺术家做艺术品。
</p>

<p>
所以我不喜欢深究概念，无常才是常，无序才是秩序。我们仅仅是在做自己生物结构擅长、喜欢做的事而已。基于每个差异化的个体，对于自然、物质世界实时的反馈。所以艺术就是模仿么？我更愿意说，艺术是所有物质世界信息与反馈的一个巨大巧合。
</p>

<p>
我相信量子力学在未来的研究里一定会颠覆现代科学的认知结构。
</p>
</div>
</div>
<div id="outline-container-orgfd3a735" class="outline-2">
<h2 id="orgfd3a735">创造力与记忆力</h2>
<div class="outline-text-2" id="text-orgfd3a735">
<p>
<a href="https://shwin.co/blog/creativity-fundamentally-comes-from-memorization">创造力从根本上来自记忆 &#x2014; Creativity Fundamentally Comes From Memorization</a>，正好看到这篇推送，和前几天的post主题挺契合，几个观点挺有意思：
</p>

<ul class="org-ul">
<li><p>
自治可以激发创造力
</p>

<blockquote>
<p>
Creativity comes to those who have internalized the patterns of their art &#x2013; they can see the connection or novelty because it&rsquo;s all in their head.
</p>

<p>
创造力属于那些已经内化了艺术模式的人——他们可以看到其中的联系或新奇之处，因为这一切都在他们的脑海中。
</p>

<p>
Therefore autonomy enables creativity, and a system helps achieve autonomy quicker.
</p>

<p>
因此，自治可以激发创造力，而系统有助于更快地实现自治。
</p>
</blockquote></li>

<li><p>
系统并不直接产生创造力，而只是激发创造力
</p>

<blockquote>
<p>
The key here is memorization&rsquo;s role in learning. We often tout the difference between memorization and true &ldquo;understanding&rdquo;, which are indeed distinct. Memorizing the different methods of attacking mathematical integrations is different from being able to use the right one in the moment.
</p>

<p>
这里的关键是记忆在学习中的作用。我们经常吹捧记忆和真正的“理解”之间的区别，这确实是截然不同的。记住攻击数学积分的不同方法与能够立即使用正确的方法是不同的。
</p>

<p>
But I maintain that such pattern recognition is just another form of memorization, though often a more subconscious one. This is learned from repeated exposure, and what I&rsquo;m attempting to do when I try to see a &ldquo;breadth&rdquo; of cases after learning the framework and available patterns to use.
</p>

<p>
但我坚持认为，这种模式识别只是记忆的另一种形式，尽管通常是一种更潜意识的形式。这是从反复接触中学到的，也是我在学习框架和可用模式后尝试查看“广泛”案例时尝试做的事情。
</p>

<p>
What this is really doing under the hood, is creating a heuristic and&#x2026; wait for it&#x2026; memorizing it!
</p>

<p>
这实际上在幕后做的事情是创建启发式并且&#x2026;&#x2026;等待它&#x2026;&#x2026;记住它！
</p>

<p>
Once this heuristic is internalized, it becomes a new primitive and we focus our attention to higher-level problems.
</p>

<p>
一旦这种启发式被内化，它就成为一个新的原语，我们将注意力集中在更高层次的问题上。
</p>

<p>
Once a dancer learns the fundamental movements of their specialization, they&rsquo;re able to improvise. So are pianists once they learn scales, and mathematicians (though sadly many of us never experience the joy of mathematical improvisation &#x2013; as Paul Lockhart covers in his <a href="https://worrydream.com/refs/Lockhart_2002_-_A_Mathematician's_Lament.pdf">Mathematician&rsquo;s Lament</a>).
</p>

<p>
一旦舞者学会了其专业的基本动作，他们就能够即兴创作。一旦钢琴家学习了音阶，数学家也是如此（尽管遗憾的是，我们中的许多人从未体验过数学即兴创作的乐趣——正如保罗·洛克哈特在他的《数学家的挽歌》中所提到的那样）。
</p>

<p>
The key is understanding that a system doesn&rsquo;t directly <b>make</b> creativity, it just <b>enables</b> it. Memorization’s role is similar.
</p>

<p>
关键是要理解系统并不直接产生创造力，而只是激发创造力。记忆的作用是类似的。
</p>

<p>
Another strategy that works well in both humor and famous EDM drops is &ldquo;violating the expectation&rdquo;, but you need to know the expectation before you can violate it. Once you learn music theory, you&rsquo;re able to violate it in ways that resonate. Avant-garde art requires knowing what the establishment is to push the boundaries as orthogonally as possible.
</p>

<p>
另一种在幽默和著名 EDM 中都有效的策略是“违反期望”，但在违反期望之前您需要先了解期望。一旦你学习了音乐理论，你就能够以引起共鸣的方式违反它。前卫艺术需要了解其体系是什么，以尽可能正交地突破界限。
</p>
</blockquote></li>
</ul>
</div>
</div>
<div id="outline-container-org8814ce0" class="outline-2">
<h2 id="org8814ce0">模仿游戏</h2>
<div class="outline-text-2" id="text-org8814ce0">
<p>
<a href="https://movie.douban.com/subject/10463953/">模仿游戏</a>是我很喜欢的一部电影，讲的是图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）制作密码破译机的故事。电影的名字和今天讨论的模仿游戏完全是一个巧合。只是在重复敲打模仿、游戏时，这个电影一直在我的脑子里窜来窜去，干脆把你放出来好了。黑客帝国也放出来好了，<a href="https://www.vandee.art/2023-02-23-blue-or-red.html">蓝色药丸还是红色药丸？</a> 🤣。
</p>

<p>
现在的LLM大语言模型同样是一个模仿游戏。LLM是一个巨大的ZIP文档，它是一个世界的快照，压缩了快照时间点互联网、人类知识的巨大信息，是现实世界最大的模仿游戏，往后更会是人类历史的一部分，它既是记录者也是开创者。
</p>

<p>
在这个游戏里，人类千万别输了。
</p>

<blockquote>
<p>
Being multidimensional means recognizing and nurturing the various aspects that make you who you are. Just like a prism splitting white light into different colors, imagine yourself to be made of those different &ldquo;colors&rdquo;. You have a unique permutation of talents, and experiences. By accepting and practising these aspects of yourself, you can grow beyond the limits set by society&rsquo;s standard expectations.
</p>

<p>
多维意味着认识和培养使你成为你的各个方面。就像三棱镜把白光分成不同的颜色一样，想象一下你自己就是由这些不同的 &ldquo;颜色 &rdquo;组成的。你拥有独特的天赋和经验。接受并实践自己的这些方面，你就能超越社会标准期望所设定的限制，获得成长。
</p>

<p>
The most interesting part is: you get to define your own dimensions.
</p>

<p>
最有趣的是：你可以定义自己的维度。
</p>

<p>
<a href="https://maharshi.bearblog.dev/become-a-multidimensional-person/">Be multidimensional, anon | Maharshi&rsquo;s blog</a>
</p>
</blockquote>

<p>
我更喜欢艺术的模仿游戏。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/2024-07-30-the-imitation-game-of-art.html</link>
  <guid>https://www.vandee.art/2024-07-30-the-imitation-game-of-art.html</guid>
  <pubDate>Tue, 30 Jul 2024 21:15:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[实用小玩意收集]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6687b36">My Favorites</a></li>
<li><a href="#org4f9ca2a">论文</a></li>
<li><a href="#orge8955e0">AI</a></li>
<li><a href="#orgb29ce86">LLM Web Chat</a></li>
<li><a href="#org92ab40d">Search</a></li>
<li><a href="#org883f073">Others</a>
<ul>
<li><a href="#org39d33bc">PDF相关</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
汇总一些实用的工具、软件、网站，长期更新。
</p>

<p>
阮一峰的GitHub weekly issues： <a href="https://github.com/ruanyf/weekly/issues">https://github.com/ruanyf/weekly/issues</a> ，可以找到许多有意思的东西。
</p>

<p>
llama-index 的GitHub，里面有详细的具体代码和案例，太值得学习了: <a href="https://github.com/run-llama/llama_index/tree/main/docs/docs/examples/cookbooks">https://github.com/run-llama/llama_index/tree/main/docs/docs/examples/cookbooks</a>
</p>

<p>
日常的搜集第一次整理之后有了工具汇总表格版：<a href="https://app.teable.io/share/shrlzO2q7vyCEJYvXqa/view">tools</a> ，这里做第二次筛选。
</p>
<div id="outline-container-org6687b36" class="outline-2">
<h2 id="org6687b36">My Favorites</h2>
<div class="outline-text-2" id="text-org6687b36">
<ul class="org-ul">
<li><p>
<b>Claude Enginner</b>
</p>

<p>
Claude Engineer 是一个交互式命令行界面（CLI），利用 Anthropic 的 Claude-3.5-Sonnet 模型的强大功能来协助完成软件开发任务。该工具将大型语言模型的功能与实用的文件系统操作和网络搜索功能相结合。
</p>

<p>
最近Claude的artifacts大火了一把。OpenAI明显后劲不足了。
</p>

<p>
Source: <a href="https://github.com/Doriandarko/claude-engineer">https://github.com/Doriandarko/claude-engineer</a>
</p></li>

<li><p>
<b>RIME</b>
</p>

<p>
输入法就是笔。
</p>

<p>
<a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p></li>

<li><p>
<b>OpenSearch GPT</b>
</p>

<p>
A personalised AI search engine that learns about you and your interests as you browse the web.It&rsquo;s like a perplexity / searchGPT clone, but for <b>you</b>.
</p>

<p>
开源AI 搜索引擎，使用了mem0来存储记忆。部署在Cloudflare上，作者仅用了一天制作完成。
</p>

<p>
我试着在Cloudflare上部署了一下，完全可行。这是每个人都可以定制的属于自己的搜索引擎。
</p>

<p>
Url: <a href="https://opensearch-ai.pages.dev/">https://opensearch-ai.pages.dev/</a>
</p>

<p>
GitHub: <a href="https://github.com/supermemoryai/opensearch-ai">https://github.com/supermemoryai/opensearch-ai</a>
</p></li>

<li><p>
<b>Napkin</b>
</p>

<p>
一个可以根据文字内容生成关系图的在线笔记编辑工具，目前还在beta测试阶段可以免费体验PRO的内容，生产力提高不是一点点。生成的关系图可以再详细编辑标题，图标等等，支持导出为PNG、SVG、PDF。
</p>

<p>
Url：<a href="https://www.napkin.ai/">https://www.napkin.ai/</a>
</p></li>

<li><p>
<b>Zen</b>
</p>

<p>
基于Firefox的开源浏览器，作者特别强调了隐私保护。compact模式下，可以隐藏地址栏和边栏，视觉体验和Arc就一样了。但是操作逻辑还是很不一样，Arc的space确实好用，把搜藏夹转到了侧边栏，迷你搜索栏这个设计真的天才，在交互上Arc确实可以说颠覆了传统浏览器的使用习惯。
</p>

<p>
让我决定用下去是因为，他们现在的更新真的很勤，前一天Mac快捷键的问题，第二天就修复了，做开源是需要热情的。Firefox一直是我的主力浏览器，但这几年的发展很有问题，期待Zen。
</p>

<p>
Url: <a href="https://github.com/zen-browser/desktop">https://github.com/zen-browser/desktop</a>
</p></li>

<li><p>
<b>PixPin</b>
</p>

<p>
Mac的终于出来了。这是我用过最好用的截图软件了。
</p>

<p>
PixPin的名字来源于“Pixel Pin”，简单来说是一个截图、贴图的工具，但是PixPin以截图和贴图两大功能为核心做了大量的优化功能，目标是提升用户在工作时的工作效率，无论用户使用电脑做何种工作，都可以使用PixPin提高工作效率。
</p>

<p>
Url: <a href="https://pixpinapp.com/">https://pixpinapp.com/</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org4f9ca2a" class="outline-2">
<h2 id="org4f9ca2a">论文</h2>
<div class="outline-text-2" id="text-org4f9ca2a">
<ul class="org-ul">
<li><p>
alphaxiv：斯坦福大学的学生做的一个论文讨论平台。可以理解为基于arXiv论文的Twitter，可以对论文评论，讨论。
</p>

<p>
If you find a paper on arXiv that you’d like to discuss, simply replace arxiv.org with alphaxiv.org in the URL.
</p>

<p>
Url：<a href="https://www.alphaxiv.org/">https://www.alphaxiv.org/</a>
</p></li>

<li><a href="https://www.aminer.cn/">AI论文检索平台 aminer</a></li>

<li><p>
<a href="https://paperswithcode.com/">paper with code</a>
</p>

<p>
这是一个论文和对应工程实现（含代码、数据集、测试方法等）的索引工具。下次你看到别人推荐优质论文时，可以直接用它去找代码实现
</p></li>

<li><a href="https://www.connectedpapers.com/">Connected Papers | Find and explore academic papers</a></li>

<li><a href="https://briefgpt.xyz/">BriefGPT - AI 论文速递</a>  一个中文论文推送网站，还可以</li>

<li><p>
Intro: 一个非常好用的AI论文阅读工具：TXYZ
</p>

<p>
Source:  <a href="https://www.txyz.ai/">https://www.txyz.ai/</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orge8955e0" class="outline-2">
<h2 id="orge8955e0">AI</h2>
<div class="outline-text-2" id="text-orge8955e0">
<ul class="org-ul">
<li><p>
<b>Dify</b>
</p>

<p>
Dify是一个开源LLM应用程序开发平台。 Dify 的直观界面结合了 AI 工作流程、RAG 管道、代理功能、模型管理、可观察性功能等，让您快速从原型转向生产。
</p>

<p>
GitHub: <a href="https://github.com/langgenius/dify">https://github.com/langgenius/dify</a>
</p>

<p>
<a href="https://dify101.com/">Dify 101: Comprehensive Guide to Mastering Dify.ai | AI Application Development Tutorial</a>
</p>

<p>
<a href="https://dify.ai/">https://dify.ai/</a>
</p></li>

<li><a href="https://fireworks.ai/">Fireworks - Fastest Inference for Generative AI</a></li>

<li><a href="https://www.together.ai/">Together AI</a></li>

<li><a href="https://console.groq.com/playground">Playground - GroqCloud</a></li>

<li><p>
<a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a>
</p>

<p>
Gemini 1.5 Flash免费套餐包含： 每分钟15次请求（RPM）每分钟100万个Token（TPM）每天1,500次Token（RPD） 免费上下文缓存服务，每小时最多可存储100万个Token 免费微调
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orgb29ce86" class="outline-2">
<h2 id="orgb29ce86">LLM Web Chat</h2>
<div class="outline-text-2" id="text-orgb29ce86">
<ul class="org-ul">
<li><p>
<b>DuckDuckGo AI Chat</b>
</p>

<p>
DuckDuckGo推出的AI聊天网页。已更新GPT-4o。
</p>

<p>
<a href="https://duckduckgo.com/?q=DuckDuckGo&amp;ia=chat&amp;atb=v409-1">https://duckduckgo.com/?q=DuckDuckGo&amp;ia=chat&amp;atb=v409-1</a>
</p></li>

<li><p>
<b>HuggingChat</b>
</p>

<p>
HuggingFace推出的AI聊天网页，支持最新的Llama 3.1-405B。
</p>

<p>
<a href="https://huggingface.co/chat/">https://huggingface.co/chat/</a>
</p></li>

<li><p>
<b>POE</b>
</p>

<p>
一个聚合LLM聊天网站，可选择的模型很多，Flux也有。
</p>

<p>
<a href="https://poe.com/">https://poe.com/</a>
</p></li>

<li><p>
<b>delve</b>
</p>

<p>
一个可以根据回答内容递进搜索的AI聊天网页。
</p>

<p>
<a href="https://delve.a9.io/">https://delve.a9.io/</a>
</p></li>

<li><p>
<b>WinGPT</b>
</p>

<p>
一个仿window风格的AI聊天网页，免费GPT-4o。
</p>

<p>
<a href="https://wingpt.vercel.app/">https://wingpt.vercel.app/</a>
</p></li>

<li><p>
<b>ChatGPT-Next-Web</b>
</p>

<p>
很早一批开始做GPT生意的了，他们这还可以买KEY。
</p>

<p>
A cross-platform ChatGPT/Gemini UI (Web / PWA / Linux / Win / MacOS). 一键拥有你自己的跨平台 ChatGPT/Gemini 应用。
</p>

<p>
在 1 分钟内使用 Vercel **免费一键部署**个人的GPT聊天实例。
</p>

<p>
GitHub: <a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web">https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web</a>
</p></li>

<li><p>
<b>Open WebUI</b>
</p>

<p>
Open WebUI 是一个可扩展、功能丰富且用户友好的自托管 WebUI，旨在完全离线操作。它支持各种 LLM 运行程序，包括 Ollama 和 OpenAI 兼容的 API。
</p>

<p>
docker轻松部署。
</p>

<p>
GitHub: <a href="https://github.com/open-webui/open-webui">https://github.com/open-webui/open-webui</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org92ab40d" class="outline-2">
<h2 id="org92ab40d">Search</h2>
<div class="outline-text-2" id="text-org92ab40d">
<ul class="org-ul">
<li><p>
<b><b>OpenSearch GPT</b></b>
</p>

<p>
A personalised AI search engine that learns about you and your interests as you browse the web.It&rsquo;s like a perplexity / searchGPT clone, but for <b>you</b>.
</p>

<p>
开源AI 搜索引擎，使用了mem0来存储记忆。部署在Cloudflare上，作者仅用了一天制作完成。
</p>

<p>
Url: <a href="https://opensearch-ai.pages.dev/">https://opensearch-ai.pages.dev/</a>
</p>

<p>
GitHub: <a href="https://github.com/supermemoryai/opensearch-ai">https://github.com/supermemoryai/opensearch-ai</a>
</p>

<p>
Twitter: <a href="https://x.com/DhravyaShah/status/1818469911490162784">https://x.com/DhravyaShah/status/1818469911490162784</a>
</p>

<p>
<a href="https://github.com/Dhravya/cloudflare-saas-stack">https://github.com/Dhravya/cloudflare-saas-stack</a>  这是作者的之前的Cloudflare全栈方案。
</p></li>

<li><p>
<b><b>Perplexica</b></b>
</p>

<p>
GitHub: <a href="https://github.com/ItzCrazyKns/Perplexica">https://github.com/ItzCrazyKns/Perplexica</a>
</p>

<p>
perplexity的开源平替，GitHub 11.4K Star。可docker部署，支持ollama本地模型。由于它的网络搜索依赖于SearXNG，等于还附送了一个SearXNG的本地实例。
</p></li>

<li><p>
<b><b>Grep</b></b>
</p>

<p>
一个快速从GitHub仓库查找内容的网站，支持正则，可以直接搜索代码内容
</p>

<p>
Url: <a href="https://grep.app/">https://grep.app/</a>
</p></li>

<li><p>
<b><b>秘塔 AI 搜索</b></b>
</p>

<p>
秘塔 AI 搜索是一个基于大模型的新一代智能搜索引擎。它通过理解用户意图，提供无广告、高质量的搜索结果，让用户快速直达所需信息。秘塔 AI 搜索具有语义理解能力强、支持多轮对话式搜索、支持语音输入等优点。
</p>

<p>
国内信息的搜索它挺强。
</p>

<p>
<a href="https://metaso.cn/">https://metaso.cn/</a>
</p></li>

<li><p>
<b>Felo AI Search</b>
</p>

<p>
Felo AI Search 是一款由日本公司 Sparticle 开发的新一代智能搜索引擎，旨在打破语言障碍，为用户提供轻松获取全球信息的途径，特别适合需要详细和全面答案的研究人员和学习者，以及希望快速掌握实时新闻和权威信息的用户。
</p>

<p>
最近一直在体验，信息源很丰富。
</p>

<p>
<a href="https://felo.ai/search">https://felo.ai/search</a>
</p></li>

<li><p>
<b>devv.ai</b>
</p>

<p>
程序员搜索利器
</p>

<p>
<a href="https://devv.ai/zh">https://devv.ai/zh</a>
</p></li>

<li><p>
<b>mwmbl</b>
</p>

<p>
一个可以由用户提供爬取源的开源搜索引擎，github 文档里还介绍了其他许多优秀的搜索引擎
<a href="https://mwmbl.org/">https://mwmbl.org/</a>
</p>

<p>
GitHub: <a href="https://github.com/mwmbl/mwmbl">https://github.com/mwmbl/mwmbl</a>
</p></li>

<li><p>
<b>SearchGPT</b>
</p>

<p>
OpenAI推出的搜索。
</p>

<p>
<a href="https://openai.com/index/searchgpt-prototype/">https://openai.com/index/searchgpt-prototype/</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org883f073" class="outline-2">
<h2 id="org883f073">Others</h2>
<div class="outline-text-2" id="text-org883f073">
<p>
另见：表格版 <a href="https://app.teable.io/share/shrlzO2q7vyCEJYvXqa/view">tools</a>
</p>

<ul class="org-ul">
<li><p>
Intro: 一个电子书翻译工具，7K star.利用大语言模型（如 ChatGPT、Claude 等）对文件和图书进行多语言翻译的制作，支持的格式有 epub、txt 以及 srt 等。最近，作者将之前吴恩达老师开源的翻译工作流整合到项目中，使得翻译的效果更加好。
</p>

<p>
Source: <a href="https://github.com/yihong0618/bilingual_book_maker?tab=readme-ov-file">https://github.com/yihong0618/bilingual_book_maker?tab=readme-ov-file</a>
</p></li>

<li><p>
GitHub 上一个开源的终端 AI 助手 AI Shell。
</p>

<p>
在终端命令行界面（CLI）上，可通过自然语言转换为对应执行的 Shell 命令，类似于 GitHub Copilot X CLI。
</p>

<p>
GitHub：<a href="https://github.com/BuilderIO/ai-shell">https://github.com/BuilderIO/ai-shell</a>
</p></li>

<li><p>
一款Python下的网络爬虫与浏览器自动化库：Crawlee-Python，快速构建爬虫的工具
</p>

<p>
Crawlee可以从网站下载HTML、PDF、JPG、PNG及其他格式的文件，与 BeautifulSoup、Playwright 及原生 HTTP 兼容
</p>

<p>
支持有头和无头模式，具有代理轮换功能，支持自动并行抓取、错误自动重试和会话管理等功能
</p>

<p>
<a href="https://github.com/apify/crawlee-python?tab=readme-ov-file">https://github.com/apify/crawlee-python?tab=readme-ov-file</a>
</p></li>

<li><p>
Intro: GitHub 上一套基于 Cloudflare 的全栈 SaaS 开发模板 cloudflare-saas-stack。利用该模板，可以快速在 Cloudflare 上构建并部署全栈应用，包括数据库、认证、样式、存储等功能。
</p>

<p>
很香！
</p>

<p>
Source: <a href="https://github.com/supermemoryai/supermemory">https://github.com/supermemoryai/supermemory</a>
</p></li>

<li><p>
Stirling-PDF
</p>

<p>
一个本地的处理 PDF 的工具，界面是 Web UI，可以支持 Docker 部署。
</p>

<p>
各种主要的 PDF 操作都可以支持。比如拆分、合并、转换格式、重新排列、添加图片、旋转、压缩等等。这个本地托管的网络应用最初完全由 ChatGPT 制作，后来逐渐发展，增加了许多功能，以满足你对 PDF 的各种需求。
</p>

<p>
Stirling PDF 不会对外发送任何数据以进行记录或跟踪。
</p>

<p>
所有的文件和 PDF 要么只在客户端处理，要么只在服务器内存中暂存，用于执行任务，或者仅在执行任务时保存在临时文件中。一旦用户下载了文件，那些文件就会从服务器上删除。
</p>

<p>
<a href="https://github.com/Stirling-Tools/Stirling-PDF">https://github.com/Stirling-Tools/Stirling-PDF</a>
</p></li>

<li><p>
部署deeplx到cloudflare，比部署到docker方便
</p>

<p>
<a href="https://github.com/ifyour/deeplx-for-cloudflare">https://github.com/ifyour/deeplx-for-cloudflare</a>
</p></li>

<li><p>
吴恩达老师开源了一套 AI Agent 翻译工作流 Translation Agent。经他们的测试，该工作流翻译质量甚至可以媲美领先的商业翻译工具
</p>

<p>
GitHub: <a href="https://github.com/andrewyng/translation-agent">https://github.com/andrewyng/translation-agent</a>
</p></li>

<li><p>
功能颇为强大的 GPT 学术优化开源项目 GPT Academic，目前 60.2k Star！
</p>

<p>
GitHub: <a href="https://github.com/binary-husky/gpt_academic">https://github.com/binary-husky/gpt_academic</a>
</p></li>

<li><p>
Intro: 开源离线Notion,支持本地LLM，JavaScript自定义功能
</p>

<p>
Source: <a href="https://github.com/mayneyao/eidos">https://github.com/mayneyao/eidos</a>  、 <a href="https://eidos.space">https://eidos.space</a>
</p></li>
</ul>
</div>
<div id="outline-container-org39d33bc" class="outline-3">
<h3 id="org39d33bc">PDF相关</h3>
<div class="outline-text-3" id="text-org39d33bc">
<p>
PDF转Markdown 方案
</p>

<ol class="org-ol">
<li>document-convert（开源）：<a href="https://github.com/multimodal-art-projection/MAP-NEO/tree/main/Matrix/document-convert">https://github.com/multimodal-art-projection/MAP-NEO/tree/main/Matrix/document-convert</a></li>
<li>Ragflow（开源）：<a href="https://github.com/infiniflow/ragflow">https://github.com/infiniflow/ragflow</a></li>
<li>gptpdf（开源）：<a href="https://github.com/CosmosShadow/gptpdf">https://github.com/CosmosShadow/gptpdf</a></li>
<li>百度云Textmind（闭源）：<a href="https://cloud.baidu.com/product/textmind.html">https://cloud.baidu.com/product/textmind.html</a></li>
<li>doc2x（闭源）：<a href="https://doc2x.noedgeai.com/">https://doc2x.noedgeai.com</a></li>
<li>腾讯云文档解析（闭源）：<a href="https://cloud.tencent.com/document/product/1759/107504">https://cloud.tencent.com/document/product/1759/107504</a></li>
<li>marker（开源）：<a href="https://github.com/VikParuchuri/marker">https://github.com/VikParuchuri/marker</a></li>
<li>PDF-Extract-Kit（开源）：<a href="https://github.com/opendatalab/PDF-Extract-Kit">https://github.com/opendatalab/PDF-Extract-Kit</a></li>
<li>zerox（开源）：<a href="https://github.com/getomni-ai/zerox">https://github.com/getomni-ai/zerox</a></li>
<li>OminiParse（开源）：<a href="https://github.com/adithya-s-k/omniparse">https://github.com/adithya-s-k/omniparse</a></li>
<li>MinerU（开源）：<a href="https://github.com/opendatalab/MinerU">https://github.com/opendatalab/MinerU</a></li>
</ol>
</div>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-tool.html">Tool</a> <a href="https://www.vandee.art/tag-useful.html">Useful</a> </div>]]></description>
  <category><![CDATA[Tool]]></category>
  <category><![CDATA[Useful]]></category>
  <link>https://www.vandee.art/2024-07-26-useful-tools-recommended.html</link>
  <guid>https://www.vandee.art/2024-07-26-useful-tools-recommended.html</guid>
  <pubDate>Fri, 26 Jul 2024 13:42:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[PKM（个人知识管理）构建手册 - Emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org87b125a">Intro</a></li>
<li><a href="#org405e9ed">Manual</a>
<ul>
<li><a href="#org031f642">Prerequisites</a></li>
<li><a href="#org48547ac">PKM</a>
<ul>
<li><a href="#org400fbd6">Principles</a></li>
<li><a href="#org009d432">Methods</a></li>
</ul>
</li>
<li><a href="#orgf512623">Org-tag</a></li>
<li><a href="#org96ace06">Org-agenda</a>
<ul>
<li><a href="#org62434fa">TODOs</a></li>
</ul>
</li>
<li><a href="#org709e5e2">Org-capture</a></li>
<li><a href="#orgb32a116">Org-roam</a></li>
<li><a href="#org5db8d76">Org-export</a></li>
<li><a href="#orgd4ce6c7">Org with Zotero</a></li>
<li><a href="#org743b3af">Org-mode美化</a></li>
<li><a href="#orge9326b8">Org-protocol</a></li>
<li><a href="#orgaf01456">网页摘录和after-reading</a>
<ul>
<li><a href="#org94dead4">tools</a></li>
</ul>
</li>
<li><a href="#orgee0b3c3">输入法设置</a>
<ul>
<li><a href="#org3c07712">SIS</a></li>
<li><a href="#org3ecd6de">pyim</a></li>
<li><a href="#orgea35b09">RIME</a></li>
</ul>
</li>
<li><a href="#org64e1864">Others</a></li>
<li><a href="#orged1b798">PKM with LLM</a>
<ul>
<li><a href="#org79f9326">工具推荐</a></li>
</ul>
</li>
<li><a href="#orgb76da40">Ollama</a></li>
<li><a href="#org24cce95">Open WebUI</a></li>
<li><a href="#orgc126799">Aider</a></li>
<li><a href="#org12629c1">gptel</a></li>
<li><a href="#org475a9dd"><b>Kotaemon</b></a></li>
</ul>
</li>
<li><a href="#org1ebda5d">ChangeLog</a></li>
<li><a href="#org1583fb2">Thanks</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org87b125a" class="outline-2">
<h2 id="org87b125a">Intro</h2>
<div class="outline-text-2" id="text-org87b125a">
<blockquote>
<p>
For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin. <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a>
</p>

<p>
对我来说，做笔记有助于确保我真正认真思考其中的内容。如果我不同意这本书，有时需要花很长时间才能读完这本书，因为我在页边空白处写了太多内容。—比尔·盖茨
</p>
</blockquote>

<p>
这段时间关于PKM（个人知识管理）的构建起起伏伏，究其原因大概是我的思维工具跟不上思维了，工具用起来不顺手了。好在一些关键的问题都解决了，现在总结梳理成册，提供一个我个人觉得还比较靠谱，能有效的组织思维、呈现思维、扩展思维的PKM手册，也是一个模板。
</p>

<p>
从2022年开始用Notion，那个时候还不知道PKM是什么，就随心所欲的乱记一通。历经了Obsidian、Logseq，再到现在的Emacs，org-mode，通过做笔记和折腾这些笔记软件，不断深入了解这些软件的作者、笔记软件的设计理念，我觉得我的思维、认知、学习方法、写作、表达都有了质的提升。工欲善其事，必先利其器，对我而言，一个称手的笔记工具是很必须的。这个PKM方法就是我披荆斩棘的那个柳条，张三丰的太极，有形易于无形。这也就是在说，一个工具能发挥出多大效果，取决于使用者。爱因斯坦不需要记笔记，他的笔记直接就发表了🤣。对于PKM和做笔记，你可以不用，但我喜欢我有。
</p>

<p>
一个科学的，适合自己的PKM对思维的提升就好像，擎天柱组合了扩展装甲。再加上AI越来越易用，形成一些思维的语料通过LLM来拓展思维一定会是未来更有效的学习模式。而这个「PKM-base」库，就是我的扩展装甲。逐渐的，PKM这个工具和我的思维已经又融为一体，对于这个进展我很兴奋，似乎我离我的<a href="https://www.vandee.art/posts/2023-12-06-learn-all-the-time/">太极</a>又近了一步。
</p>

<p>
作为思维的另一个同步的呈现，以一生来度量，这个手册也会一直更新。
</p>

<p>
对于数字笔记来说，Markdown很实用，可读性也很强，兼容性和扩展性更不用说，而Org更有个性，更符合我现在的需求，在Emacs里，想实现的个性化功能，基本上都可以使用Elisp语言自己写函数来搞定，awesome！
</p>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。Notion、Logseq、Obsidian、Roam Research、Heptabase，未来还会有更多的笔记软件，适合自己的才是最好的，选择一个笔记软件、笔记工具就是在选择一个生态、一个系统，下一个笔记软件，何必是笔记软件。
</p>

<p>
现在的PKM（个人知识管理）体系还有许多需要完善的地方，我也肯定还会有我的下一个笔记软件，它也一定不是一个笔记软件。
</p>
</div>
</div>
<div id="outline-container-org405e9ed" class="outline-2">
<h2 id="org405e9ed">Manual</h2>
<div class="outline-text-2" id="text-org405e9ed">
<p>
这是一个以 <a href="https://zh.wikipedia.org/wiki/Emacs">Emacs</a> 为基础编辑器、文件管理的Org-mode本地笔记PKM。
</p>

<p>
至于Emacs是什么，流传着一句话：Emacs是神的编辑器，Vim是编辑器之神。
</p>

<p>
本手册包括：
</p>

<ul class="org-ul">
<li>Prerequisites：开始构建本PKM需要的工具和准备工作</li>
<li>PKM：本PKM的构建原则和具体方法、org-mode的具体使用、org-capture与org-roam、Zotero、网页摘录与after-reading、中英混合输入的输入法配置与RIME</li>
<li>PKM-with-LLM：PKM和大语言模型结合的使用、ollama、RAG(待更新)</li>
</ul>
</div>
<div id="outline-container-org031f642" class="outline-3">
<h3 id="org031f642">Prerequisites</h3>
<div class="outline-text-3" id="text-org031f642">
<p>
Start with：<a href="https://git-scm.com/download">Git</a>，<a href="https://www.gnu.org/software/emacs/">GNU Emacs</a>，<a href="https://github.com/doomemacs/doomemacs">doomemacs</a>，<a href="https://orgmode.org/">Org mode for GNU Emacs</a>，<a href="https://www.orgroam.com/">Org-roam</a>。
</p>

<p>
开始你可能需要对Emacs、Org-mode、Git有一些了解，这些可以帮助到你：
</p>

<ul class="org-ul">
<li><a href="https://github.com/doomemacs/doomemacs/tree/master">GitHub - doomemacs/doomemacs: An Emacs framework for the stubborn martian hacker</a></li>

<li><a href="https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#on-windows">doomemacs/docs/getting<sub>started.org</sub> at master · doomemacs/doomemacs · GitHub</a></li>

<li><a href="https://www.gnu.org/software/emacs/manual/">GNU Emacs Manuals Online</a></li>

<li><a href="https://orgmode.org/manuals.html">Manuals Org mode</a></li>

<li><a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>

<li><a href="https://emacs-china.org/">Emacs China</a></li>

<li><a href="https://emacsdocs.org/">Emacs Docs</a></li>

<li><a href="https://emacs.readthedocs.io/en/latest/index.html">Emacs readthedocs</a></li>
</ul>

<p>
配置参考：
</p>

<ul class="org-ul">
<li><a href="https://github.com/purcell/emacs.d">GitHub - purcell/emacs.d: An Emacs configuration bundle with batteries included</a></li>

<li><a href="https://github.com/redguardtoo/emacs.d">GitHub - redguardtoo/emacs.d: Fast and robust Emacs setup.</a></li>

<li><a href="https://github.com/MatthewZMD/.emacs.d">GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-featured GNU Emacs configuration distribution</a></li>

<li><a href="https://github.com/manateelazycat/lazycat-emacs">manateelazycat/lazycat-emacs: Andy Stewart&rsquo;s emacs</a></li>

<li><a href="https://github.com/xenodium/dotsies">xenodium/dotsies: Dot files, Emacs config, etc</a></li>
</ul>

<p>
如何安装和基本的配置，上面都可以解决。如果你止步在了这里，直接放弃或许是更好的选择，或者使用<a href="https://obsidian.md/">obsidian</a>、<a href="https://logseq.com/">Logseq</a>这样的Markdown笔记工具，更或者使用Logseq的org编辑模式，用Logseq来管理org文档（不推荐长期这么做），适合自己的才是最好的。
</p>

<p>
也可以参考我会一直更新的doomemacs<a href="https://github.com/VandeeFeng/doomemacs">配置</a>。
</p>
</div>
</div>
<div id="outline-container-org48547ac" class="outline-3">
<h3 id="org48547ac">PKM</h3>
<div class="outline-text-3" id="text-org48547ac">
<p>
整体的笔记文件管理结构，还是<a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/ACCESS%E7%AC%94%E8%AE%B0%E6%B3%95">ACCESS</a>，可以选择不用。有文件夹和没有文件夹是两种不同的管理模式，例如ob和Logseq。这个手册里更主要的是分享我在构建PKM的过程中迭代的一些原则和方法，以供参考，形成、巩固自己的方法才是这个手册真正的目的，remember：有形易于无形。具体可以参看：<a href="https://dg.vandee.art/Atlas/MOC/%C2%A7Vandee%E7%9A%84PKM">§Vandee的PKM</a>
</p>

<p>
Januarys用来记录每天的日志，作为简单明了的回顾和展开。如果你不喜欢文件夹管理，我觉得这个是很有必要的。
</p>

<p>
使用org-capture和org-roam-capture来创建，插入新的笔记和条目，在org-roam里也就是node节点。
</p>

<p>
<b>example</b> ：
</p>


<figure id="org3d69577">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/January.gif" class="img" width="50%" height="50%">

</figure>

<p>
核心：原子笔记 + 双链。
</p>

<p>
你可能需要了解「原子笔记」（或者常青笔记，whatever）：<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a>。
</p>

<p>
双链和反链让笔记之间的关联更加直观，当原子笔记很多的时候，反链可以直观的反应出和当前笔记相关的其他笔记。它应该同步于思维的链条。
</p>

<p>
Zettelkasten 其实并不那么重要。
</p>

<p>
Stay foolish，stay simple。
</p>

<p>
关于同步：
</p>

<p>
本地笔记没有在线笔记软件方便的地方就是多端同步与预览。我的本地笔记已经上传到了GitHub仓库，通过Git同步。临时需要修改的直接在GitHub仓库里就修改了。预览方面，我的笔记输出到了 <a href="https://wiki.vandee.art">Vandee — Wiki</a>
</p>
</div>
<div id="outline-container-org400fbd6" class="outline-4">
<h4 id="org400fbd6">Principles</h4>
<div class="outline-text-4" id="text-org400fbd6">
<ul class="org-ul">
<li><a href="https://dg.vandee.art/Cards/%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E6%A3%80%E7%B4%A2%E9%80%BB%E8%BE%91">一个良好的知识循环系统，应该有优秀的检索逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E6%98%AF%E6%80%9D%E7%BB%B4%E7%9A%84%E5%91%88%E7%8E%B0%EF%BC%8C%E5%AE%83%E5%BA%94%E8%AF%A5%E6%98%AF%E7%9F%A2%E9%87%8F%E7%9A%84">笔记是思维的呈现，它应该是矢量的</a>，当然也是<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子化</a>的</li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%B2%E8%81%94%E5%BA%94%E8%AF%A5%E5%AE%8C%E5%85%A8%E4%BE%9D%E9%9D%A0%E4%B8%8E%E6%80%9D%E7%BB%B4%E7%9A%84%E5%90%8C%E6%AD%A5">笔记之间的串联应该完全依靠与思维的同步</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E8%AE%A9%E7%9F%A5%E8%AF%86%E6%B5%81%E5%8A%A8%E8%B5%B7%E6%9D%A5">笔记应该让知识流动起来</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E5%B1%82%E7%BA%A7%E9%80%BB%E8%BE%91">笔记应该有优秀的层级逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E5%A2%9E%E6%8F%B4%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%87%AA%E5%B7%B1">笔记的核心价值在于增援未来的自己</a></li>
</ul>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。
</p>

<blockquote>
<p>
把人自身的思维看作一个向量，它有自己的方向和属性，在大脑里让它们串联起来的是一个个神经元和突触，在笔记里就是双链和索引。因此，要在PKM里最大程度复现大脑思维的流动，我认为，最自然的方式就是让笔记向量与思维最自然的习惯同步。
</p>

<p>
例如我们的语言系统，我们不会在用母语表达一些简单想法的时候还费力思考，笔记也应该是一样。当我大脑里现在想到一个概念，需要在笔记里找到相应的内容，脱口而出时，就应该只需要按照思维本来的习惯检索到笔记。
</p>

<p>
<a href="https://www.vandee.art/posts/2024-05-13-abandon-note-software-cli-nb/">脱离笔记软件，CLI 笔记工具 —nb</a>
</p>

<p>
对于信息传播者来说，立体化的信息载体无疑可以包含更多信息的元素，对于信息接受者来说，当然理论上就可以接收到更多的信息。问题是出现在信息接收之后，也就是调动认知的这个过程。
简单来说：信息损耗率 + 认知调动率 = 新认知迭代率
</p>

<p>
<a href="https://www.vandee.art/posts/2023-09-18-read-or-listen/">读或听或看？</a>
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org009d432" class="outline-4">
<h4 id="org009d432">Methods</h4>
<div class="outline-text-4" id="text-org009d432">
<p>
在最开始需要构建的关键体系就是检索的逻辑。
</p>

<p>
在双链部分由于原则上已经和思维高度同步，因此不需要做额外的增加思维成本的检索，只要在记录原子笔记的时候，顺其自然，高度提炼出明确、简洁的一句话概念即可。
</p>

<p>
在标签tags部分，我习惯把标签当作是一个object的二、三级属性来看待。例如《黄金时代》这本书，它的基础属性是book，我不会再重复标注它，而是写在property里，记下~Type: book~方便我通过函数来列举所有的书目，tag则记下文学、王小波。我习惯用单数来强调它是个属性，区别与复数的category集合的概念。
</p>

<p>
我看过许多博客和PKM，许多情况下，他们的tags在语义概念上都混用了，我习惯把tags和categories分开，分类就是分类，标签就是标签。category、property、tag还是需要在逻辑里有自然的分类，理清楚一个概念的内涵与外延。混用会导致tags越来越多，成百上千的tags反而会增加检索的成本，过个几年，大多数的tags你已经忘了当时为什么记下了，单独再去整理标签无疑是个巨大的工程，tags也失去了应当有的作用。tags的构建同样应当同步与自身的思维习惯，自身对概念、语义的记忆。
</p>

<p>
当然这也完全取决于每个人自己的习惯。
</p>

<p>
学习、获取信息和知识是在做加法，PKM里更多的应该是减法，<a href="https://dg.vandee.art/Sources/Articles/Stay-learn,-Stay-unlearn%EF%BD%9C%E8%AF%95%E8%A1%8C%E9%94%99%E8%AF%AF102">Learn and unlearn</a>。
</p>

<p>
可以参考我的思路：<a href="https://dg.vandee.art/Spaces/Studys/org/org-mode-pkm">org-mode-pkm</a>
</p>

<p>
example：
Emacs，org-roam，模板创建Daily和note：
</p>


<figure id="org8c901df">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-roam.gif" class="img" width="50%" height="50%">

</figure>
</div>
</div>
</div>
<div id="outline-container-orgf512623" class="outline-3">
<h3 id="orgf512623">Org-tag</h3>
<div class="outline-text-3" id="text-orgf512623">
<p>
org里的标签功能也很全面，支持多个分组，可以自动补全，还支持自定义标签的快捷键。这很好的保证了之前所说的*标签的统一性*，大小写或者单复数不统一会很麻烦。
</p>

<p>
在org的任意标题之后加上 <code>:TAG1::TAG2:</code> 就打上了标签。
</p>

<p>
*进阶用法*如下：
</p>

<p>
在Org Mode中，你可以通过按下快捷键来为项目或任务添加预定义的标签。以下是具体的步骤：
</p>

<ol class="org-ol">
<li>光标定位：将光标移动到你想要添加标签的项目或任务上。</li>
<li><b>添加标签：按下快捷键 ~C-c C-q~，org-set-tags-command，这将打开标签过滤器。可以直接在标题的最后输入标签。在输入冒号后，M-TAG</b> 提供了标签的自动补全和选择功能。</li>
<li>使用快捷键：在标签过滤器中，输入你为标签分配的字符常量作为快捷键。例如，如果你为 <code>@work</code> 标签分配了字符 ~w~，那么在标签过滤器中输入 ~w~。</li>
<li>确认添加：按下 <code>Enter</code> 键，这将为项目或任务添加相应的标签。</li>
</ol>

<p>
默认情况下，org 模式使用标准的 minibuffer 来输入标签 。然而，emacs 还提供了另外一种叫做 <b>fast tag selection</b> 的快速标签选择方式。在这种方式下可以仅用一个键来完成标签的选择和反选。要想使用这种方式，首先要为常使用的标签分配一个唯一字符。这个字符可以在 &rsquo;.*emacs*&rsquo; 中通过配置 <b>org-tag-alist</b> 来设置。比如，需要在很多文件中为很多项添加 &rsquo;<b>:home:</b>&rsquo; 标签。在这种情况下，可以这样设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(setq org-tag-alist '(("@work" . ?w) ("@home" . ? h ) ("@laptop" . ?l)))
</pre>
</div>

<p>
如果标签仅仅和当前使用的文件相关，那么可以像下面这样在文件中添加 <b>TAGS</b> 选项：
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)
</pre>
</div>

<p>
标签接口会在一个 splash windows 中显示可用的标签。如果想在一个特定的标签后换行，需要在标签列表中插入一个 &rsquo;<b>\n</b>&rsquo; 。
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) \n laptop(l) pc(p)
</pre>
</div>

<p>
或者将他们写成两行
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t)
#+TAGS: laptop(l) pc(p)
</pre>
</div>

<p>
也可以像下面这样用大(花)括号手动将标签进行分组
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: { @work(w) @home(h) @tennisclub(t) } laptop(l) pc(p)
</pre>
</div>

<p>
在这种情况下， <code>@work(w) @home(h) @tennisclub(t)</code> 三个标签最多同时选择一个
</p>

<p>
org 也允许多个分组。当光标在这些行上的时候，不要忘了按 <b>C-c C-c</b> 来激活其它修改。
</p>

<p>
如果要在 <b>org-tags-alist</b> 中设置排它的标签组，必需要用 <b>:startgroup</b> 和 <b>:endgroup</b> 标签对，而不是用大括号。类似的，可以用 <b>:newline</b> 来声明一个新行。上面的例子也可以用下面的方式进行设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(setq org-tag-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      ("@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p))
</pre>
</div>



<p>
Ref:
</p>

<ul class="org-ul">
<li><a href="https://orgmode.org/manual/Tags.html#:~:text=Org%20mode%20has%20extensive%20support%20for%20tags.%20Every,by%20a%20single%20colon%2C%20e.g.%2C%20%E2%80%98%20%3Awork%3A%20%E2%80%99.">Tags (The Org Manual)</a></li>
<li><a href="https://www.cnblogs.com/btea/p/4412375.html">emacs org mode 中的标签全参考 - 咖啡加茶 - 博客园</a></li>
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster&rsquo;s Blog</a></li>
</ul>
</div>
</div>
<div id="outline-container-org96ace06" class="outline-3">
<h3 id="org96ace06">Org-agenda</h3>
<div class="outline-text-3" id="text-org96ace06">
<p>
最开始是不打算用org-agenda的，因为没有太多TODO要去管理。用 <code>#TODO</code> 来标注TODO搜索也并不麻烦。但是考虑到时间久了，agenda也可以通过标注时间戳来回顾非TODO项，还是启用了。和org-roam配合，可以很清晰的回顾一个星期内重要的笔记。以后需要清除掉这些时间戳也很方便，一个正则搞定。
</p>

<p>
之前考虑到和其他笔记软件通用的问题，journal全部以单独的文件按照年份生成，现在改为集中在一个 <code>journal.org</code> 文件里。要不然以后org-agenda每次要扫描几年的journal文档会很头疼，现在改为每年一个单独的 <code>20xx-journal.org</code> 文件。
</p>

<p>
需要注意的是：在最开始设置好org-agenda要包括的文件或文件夹
</p>

<div class="org-src-container">
<pre class="src src-nil">;; 单独的文件
(setq org-agenda-files '("~/your/path/to/1.org" "~/your/path/to/2.org"))
;; 文件夹
;; 这样会把目录下包括子文件夹的文件都添加进去 https://emacs-china.org/t/org-txt-agenda/13506/5
(setq org-agenda-files (directory-files-recursively "~/your/directory/" "\\.org$"))
;; 文件夹但不包括子文件夹
(setq org-agenda-directory "~/your/agenda/directory/")

</pre>
</div>



<p>
这是现在的样子：
</p>
</div>
<div id="outline-container-org62434fa" class="outline-4">
<h4 id="org62434fa">TODOs</h4>
<div class="outline-text-4" id="text-org62434fa">
<ul class="org-ul">
<li><p>
你可以通过在TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对已经完成的任务有个大致的了解，你可以在标题的任何地方插入~<code>[/]</code>~或者~<code>[%]</code>~。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。
</p>

<div class="org-src-container">
<pre class="src src-nil">  * TODO Organize party [1/3]
    - [-] call people [1/2]
      - [ ] Peter
      - [X] Sarah
    - [X] order food
    - [ ] think about what music to play
</pre>
</div>

<p>
Org mode 允许定义进入状态和离开状态时的额外动作，可用的动作包含两个:
</p>

<ul class="org-ul">
<li>添加笔记和状态变更信息(包括时间信息)，用&ldquo;@&rdquo;表示</li>
<li>只添加状态变更信息，用&ldquo;!&rdquo;表示</li>
</ul>

<p>
这个通过定义带快速选择键的关键词时，在快速选择键后用&ldquo;X/Y&rdquo;来表示，X表示进入该状态时的动作，Y表示离开该状态时的动作。对于一个状态(以&ldquo;DONE&rdquo;为例)，以下形式都是合法的:
</p>

<div class="org-src-container">
<pre class="src src-nil">  DONE(d@)       ; 进入时添加笔记
  DONE(d/!)      ; 离开时添加变更信息
  DONE(d@/!)     ; 进入时添加笔记，离开时添加变更信息
</pre>
</div>

<ul class="org-ul">
<li><p>
除了基于 headline 的任务管理外，Org mode 还提供基于列表的任务管理，即将每个列表项作为任务，方法是在列表标记与列表项内容之间添加一个 &ldquo;[ ]&rdquo; 标记(注意中间包含一个字符的预留位置)，这个标记在 Org mode 中被称为 <b>checkbox</b> 。这种任务只有三种状态(待办、进行中和完成)，分别用 <code>[ ]</code>, <code>[-]</code> 和 <code>[X]</code> 表示。
</p>

<p>
若要将用 checkbox 标记的任务标记为完成，将光标移动到对应的行，然后使用快捷键 &ldquo;C-c C-c&rdquo;  即可。对于包含子任务的任务，如果其子任务未全部完成，用此快捷键更改其子任务状态时，该任务的状态会自动设置为  &ldquo;进行中([-])&rdquo;，表示子任务未全部完成；当用快捷键将所有子任务标记为完成时，它会自动更新为完成状态。
</p>

<p>
用&ldquo;TODO&rdquo;等关键词标记为headline为任务时，使用的快捷键同样适用于checkbox，不过略有不同:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">功能</th>
<th scope="col" class="org-left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-S-return</td>
<td class="org-left">在当前列表项的内容后面建立一个同级列表项，标记为 &ldquo;[ ]&rdquo;</td>
<td class="org-left">无列表项时不创建</td>
</tr>

<tr>
<td class="org-left">M-S-return</td>
<td class="org-left">在当前列表项后建立一个同级列表项，标记为 &ldquo;[ ]&rdquo;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
使用~shift+← →方向键~也可以快速更改TODO的状态。
</p></li>

<li><p>
TODO sequence
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"> <span style="color: #51afef;">(</span><span style="color: #51afef;">setq</span> <span style="color: #dcaeea;">org-todo-keywords</span>
          <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #98be65;">(</span>sequence <span style="color: #98be65;">"</span><span style="color: #ECBE7B; font-weight: bold;">TODO</span><span style="color: #98be65;">(t)"</span> <span style="color: #98be65;">"DOING(i)"</span> <span style="color: #98be65;">"|"</span> <span style="color: #98be65;">"DONE(d@)"</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
    <span style="color: #51afef;">(</span><span style="color: #51afef;">setq</span> <span style="color: #dcaeea;">org-log-done</span> <span style="color: #51afef;">'</span><span style="color: #ECBE7B;">time</span><span style="color: #51afef;">)</span> <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#27599;&#27425;&#24403;&#20320;&#23558;&#19968;&#20010;&#39033;&#20174; </span><span style="color: #ECBE7B; font-weight: bold;">TODO</span><span style="color: #5B6268;"> (not-done) &#29366;&#24577;&#21464;&#25104;&#20219;&#24847;&#30340; DONE &#29366;&#24577;&#26102;&#65292;&#37027;&#20040;&#65292;&#23427;&#23601;&#20250;&#33258;&#21160;&#22312;&#26631;&#39064;&#30340;&#19979;&#38754;&#25554;&#20837;&#19968;&#34892;&#19979;&#38754;&#30340;&#20869;&#23481;&#65306;CLOSED: [timestamp]</span>
</pre>
</div></li>
</ul></li>
</ul>


<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-agenda/26755">新人提问，org格式中，重复任务在某一天完成后，却不能在agenda正确显示。。。 - Emacs-general - Emacs China</a></li>
<li><a href="https://github.com/AbstProcDo/Master-Emacs-From-Scratch-with-Solid-Procedures/blob/master/06.Emacs-as-Agenda-by-Org.org">Master-Emacs-From-Scratch-with-Solid-Procedures/06.Emacs-as-Agenda-by-Org</a></li>
<li><a href="https://orgmode.org/manual/Agenda-Views.html">Agenda Views (The Org Manual)</a></li>
<li><a href="https://emacsist.github.io/emacsist/orgmode/orgmode%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html#org6796967">emacsist.github.io/emacsist/orgmode/orgmode手册学习笔记.html</a></li>
<li><a href="https://www.zmonster.me/2015/07/15/org-mode-planning.html">强大的 Org mode(2): 任务管理 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html#sec-5">Org-mode 简明手册 - open source - 博客园</a></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org709e5e2" class="outline-3">
<h3 id="org709e5e2">Org-capture</h3>
<div class="outline-text-3" id="text-org709e5e2">
<p>
<a href="https://orgmode.org/manual/Capture.html">Org-capture</a> 是org-mode做笔记比较核心的功能，结合capture-templates可以在不离开当前buffer的情况下，快速记录、捕捉特定的内容到特定的文件和位置。加上时间戳还可以在agenda里以时间线回顾。
</p>

<p>
目前PKM里的Journal-日志、clip-剪藏、task-TODO等都是用org-capture处理的。
</p>

<p>
一定要在最开始先设置好org的默认笔记目录： <code>(setq org-directory "~/your/path/org/")</code>
</p>

<p>
需要注意的是：对于Doom-Emacs，需要在~(after！org)~里写上关于org的配置来覆盖Doom-Emacs的默认配置。
</p>

<p>
如果常规的org-capture参数不足以满足你的需求，这个函数可能对你有帮助：
</p>

<div class="org-src-container">
<pre class="src src-nil">  ;; org-capture支持自定义函数，通过function来执行
  (defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
  (add-to-list 'org-capture-templates
               '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                 my-org-goto-last-todo-headline)
</pre>
</div>



<p>
下面是org-capture的模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(after! org
  ;; (server-start)
  ;; (require 'org-protocol)
  (org-link-set-parameters "zotero" :follow
                           (lambda (zpath)
                             (browse-url
                              ;; we get the "zotero:"-less url, so we put it back.
                              (format "zotero:%s" zpath))))
  (setq org-agenda-files '("~/Vandee/pkm/org/Journal.org" "~/Vandee/pkm/org/clip.org"))
  ;; (setq org-agenda-include-diary t)
  ;; (setq org-agenda-diary-file "~/Vandee/pkm/org/Journal.org")
  (setq org-directory "~/Vandee/pkm/org/")
  (global-set-key (kbd "C-c c") 'org-capture)
  ;;(setq org-default-notes-file "~/Vandee/pkm/inbox.org")
  (setq org-capture-templates nil)

  ;; (add-to-list 'org-capture-templates
  ;;              '("j" "Journal" entry (file+datetree  "~/Vandee/pkm/Journals/Journal.org")
  ;;                "* [[file:%&lt;%Y&gt;/%&lt;%Y-%m-%d&gt;.org][%&lt;%Y-%m-%d&gt;]] - %^{heading} %^g\n %?\n"))
  (add-to-list 'org-capture-templates
               '("j" "Journal" entry (file+datetree "~/Vandee/pkm/org/Journal.org")
                 "* TODOs\n* Inbox\n- %?"))
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file+datetree "~/Vandee/pkm/org/Inbox.org")
                 "* %U - %^{heading} %^g\n %?\n"))

  (defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
  (add-to-list 'org-capture-templates
               '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                 my-org-goto-last-todo-headline)
                 "* TODO %i%? \n%T"))

  (add-to-list 'org-capture-templates '("c" "Collections"))
  (add-to-list 'org-capture-templates
               '("cw" "Web Collections" item
                 (file+headline "~/Vandee/pkm/org/websites.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("ct" "Tool Collections" item
                 (file+headline "~/Vandee/pkm/org/tools.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("cc" "Clip Collections" entry
                 (file+headline "~/Vandee/pkm/org/clip.org" "Clip")
                 "* %^{heading} %^g\n%T\nSource: %^{source}\n%?"))

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://orgmode.org/manual/Capture.html">Capture (The Org Manual)</a></li>
</ul>
</div>
</div>
<div id="outline-container-orgb32a116" class="outline-3">
<h3 id="orgb32a116">Org-roam</h3>
<div class="outline-text-3" id="text-orgb32a116">
<p>
<a href="https://www.orgroam.com/">Org-roam</a> 是Emacs的一个包，也是org-mode 的扩展，可以简单的实现双链，通过org-roam-ui直观的预览。
</p>

<p>
也不是必须，只需要解决双链的查看就可以了。
</p>

<p>
org-roam也有它的capture，可以直接生成org笔记。而org-roam的「 node-insert 」可以快速在文档里直接插入新的笔记。与常规的org-mode~.org~文件不同的是，它可以通过带id的node「 节点 」链接来实现org-mode里的双链功能。每一个org-roam笔记都有唯一的id。
</p>

<p>
其他属性和使用基本与org-mode一致，也是生成~.org~文件。同样也需要配置org-roam的capture-templates。原来用org-roam创建Journal日志文件，现在已经用org-capture替代。
</p>

<p>
org-roam-ui也有和Logseq一样的网点图谱「 Graph View 」，也提供大纲结构视图，对于我来说用起来很亲切。如果你觉得org-mode可读性不强，那么org-roam-ui一定会让你喜欢。org-roam-ui是在浏览器里通过~org-roam-protocol~访问，需要在配置加上~(require &rsquo;org-roam-protocol)~。
</p>

<p>
同样也需要在最开始设置好org-roam笔记的文件夹： <code>(setq org-roam-directory "~/your/roam/directory/")</code>
</p>

<p>
有一个坑，org-roam会自动生成一个~.orgids~文件来记录生成的每个org-roam笔记的id，如果不设置会在系统根目录下自动生成。加上~(org-id-locations-file &ldquo;~/your/path/to/.orgids&rdquo;)~即可。在一开始我一度认为我的电脑是不是哪里出了问题🤣，这个文件冷不丁的就冒出来了，删了重启又有了。官方文档和各大论坛里都没有这个设置，困扰了我很久，还是GPT帮我解决了。
</p>

<p>
下面是模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-nil">;; (setq org-roam-dailies-directory "~/Vandee/pkm/Journals/")
(setq org-export-with-toc nil) ;;禁止生成toc
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; (org-roam-dailies-capture-templates
  ;;  '(("d" "daily" plain "* %&lt;%Y-%m-%d&gt;\n* TODO\n- \n* Inbox\n- %?"
  ;;     :if-new (file+head "%&lt;%Y&gt;/%&lt;%Y-%m-%d&gt;.org" "#+TITLE: %&lt;%Y-%m-%d&gt;\n"))))
  (org-roam-directory "~/Vandee/pkm/roam/")
  (org-id-locations-file "~/Vandee/pkm/roam/.orgids")
  (org-roam-capture-templates
   ~(("n" "note" plain "%?"
      :if-new (file+head "${title}.org"
                         "#+TITLE: ${title}\n#+UID: %&lt;%Y%m%d%H%M%S&gt;\n#+FILETAGS: \n#+TYPE: \n#+SOURCE: \n#+DATE: %&lt;%Y-%m-%d&gt;\n")
      :unnarrowed t))
   )
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n c" . org-roam-capture)
         ;; ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         ;; :map org-roam-dailies-map
         ;; ("Y" . org-roam-dailies-capture-yesterday)
         ;; ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)
  )

</pre>
</div>

<p>
<b>org-roam-capture模板分组</b>
</p>

<div class="org-src-container">
<pre class="src src-nil">;; org-roam-capture模板分组
(setq org-roam-capture-templates
      '(
        ("d" "default" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("g" "group")
        ("ga" "Group A" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("gb" "Group B" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")))

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-roam-v2-backlinks-buffer-headlines/23368/3">org-roam v2 的 backlinks buffer 能否显示指向当前文件的所有 headlines 的反链 - Org-mode - Emacs China</a></li>
<li>org-roam的官方论坛：<a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>
<li><a href="https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/">https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/</a></li>
<li><a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">使用 org-roam 构建自己的知识网络 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://d12frosted.io/tags/org-roam.html">Boris Buliga - org-roam</a></li>
<li><a href="https://emacs-china.org/t/org-roam-v2-org-roam-ui-emacs-29-sqlite/17806">Org-roam(v2) 以及 org-roam-ui 的使用姿势（已支持Emacs 29 内置的 sqlite) - Org-mode - Emacs China</a></li>
</ul>
</div>
</div>
<div id="outline-container-org5db8d76" class="outline-3">
<h3 id="org5db8d76">Org-export</h3>
<div class="outline-text-3" id="text-org5db8d76">
<p>
单独导出成MD、HTML或其他格式，Org-mode里就可以，也可以使用这些<a href="https://orgmode.org/zh-CN/tools.html">工具</a> 。批量导出，由于每个人的排版和格式习惯不同，还是自己用自己熟悉的语言，写几个正则，搞个脚本。
</p>

<div class="org-src-container">
<pre class="src src-nil">;; 当前buffer下，替换markdown的链接和标题格式到org-mode的格式，排除图片的转换、替换代码块格式。
(defun my-markdown-to-org ()
  (interactive)
  (save-excursion
    ;; 转换Markdown标题为Org-mode标题
    (goto-char (point-min))
    (while (re-search-forward "^\s*\\(#+\\) \\(.*\\)" nil t)
      (let ((level (length (match-string 1)))
            (title1 (match-string 2)))
        (replace-match (concat (make-string level ?*) " " title1)))))
  ;; 转换Markdown链接为Org-mode链接,但是跳过图片链接
  (goto-char (point-min))
  (while (re-search-forward "\\[[\(.*?\][\(.*?\)\]])" nil t)
    (let ((title (match-string 1))
          (url (match-string 2)))
      (unless (and (string-match "\\(jpeg\\|png\\|svg\\)" url)
                   (string-match "https" url))
        (replace-match (format "[[%s][%s]]" url title)))))
  ;; 转换Markdown代码块为Org-mode代码块
  (goto-char (point-min))
  (while (re-search-forward "^~~~" nil t)
    (if (looking-back "^~~~")
        (progn
          (replace-match "#+begin_src")
          (re-search-forward "^~~~" nil t)
          (if (looking-back "^~~~")
              (replace-match "#+end_src"))))))
</pre>
</div>



<ul class="org-ul">
<li><p>
<b>Markdown to org-mode</b>:
</p>

<p>
Pandoc转换md到org会有小问题，批量转换还是悠着点。
</p>

<p>
<a href="https://emacs-china.org/t/markdown-to-org-pandoc-filter/26424">一个改善 Markdown to Org 转换的 Pandoc Filter 脚本 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format">How to migrate Markdown files to Emacs org mode format - Emacs Stack Exchange</a>
</p></li>
</ul>

<p>
Ref：<a href="https://orgmode.org/manual/Exporting.html">Exporting (The Org Manual)</a>、<a href="https://orgmode.org/zh-CN/tools.html">工具 | Org mode</a>
</p>
</div>
</div>
<div id="outline-container-orgd4ce6c7" class="outline-3">
<h3 id="orgd4ce6c7">Org with Zotero</h3>
<div class="outline-text-3" id="text-orgd4ce6c7">
<p>
书和论文的PDF文件，我现在全部放在<a href="https://www.zotero.org/">Zotero</a>。快速复制单个笔记到org-mode也挺简单：
</p>

<p>
通过下载这个<a href="https://raw.githubusercontent.com/Zotero-ODF-Scan/zotero-odf-scan/master/attic/Zotero%20Select%20Item.js">文件</a>到 zotero 资料目录下的 translators 文件下，将其命名为 <code>Zotero Select Item.js</code> ，重启 Zotero 后在编辑-&gt; 首选项中配置便捷复制的 Item Format 为 Zotero Select Item:
</p>

<p>
这样就可以自定义复制粘贴过去的格式了。
</p>


<div class="org-src-container">
<pre class="src src-js">{
<span style="color: #98be65;">"translatorID"</span>:<span style="color: #98be65;">"76a79119-3a32-453a-a0a9-c92640e3c93b"</span>,
<span style="color: #98be65;">"translatorType"</span>:<span style="color: #da8548; font-weight: bold;">2</span>,
<span style="color: #98be65;">"label"</span>:<span style="color: #98be65;">"Zotero Select Item"</span>,
<span style="color: #98be65;">"creator"</span>:<span style="color: #98be65;">"Scott Campbell, Avram Lyon"</span>,
<span style="color: #98be65;">"target"</span>:<span style="color: #98be65;">"html"</span>,
<span style="color: #98be65;">"minVersion"</span>:<span style="color: #98be65;">"2.0"</span>,
<span style="color: #98be65;">"maxVersion"</span>:<span style="color: #98be65;">""</span>,
<span style="color: #98be65;">"priority"</span>:<span style="color: #da8548; font-weight: bold;">200</span>,
<span style="color: #98be65;">"inRepository"</span>:<span style="color: #a9a1e1;">false</span>,
<span style="color: #98be65;">"lastUpdated"</span>:<span style="color: #98be65;">"2012-07-17 22:27:00"</span>
}

<span style="color: #51afef;">function</span> <span style="color: #c678dd;">doExport</span>() {
    <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">item</span>;
    <span style="color: #51afef;">while</span>(item = Zotero.nextItem()) {
        Zotero.write(<span style="color: #98be65;">"zotero://select/items/"</span>);
        <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">library_id</span> = item.libraryID ? item.libraryID : <span style="color: #da8548; font-weight: bold;">0</span>;
        Zotero.write(library_id+<span style="color: #98be65;">"_"</span>+item.key);
    }
}
</pre>
</div>

<p>
然后在Emacs的配置文件里加上：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #51afef;">(</span><span style="color: #a9a1e1;">org-link-set-parameters</span> <span style="color: #98be65;">"zotero"</span> <span style="color: #c678dd;">:follow</span>
                         <span style="color: #c678dd;">(</span><span style="color: #51afef;">lambda</span> <span style="color: #98be65;">(</span>zpath<span style="color: #98be65;">)</span>
                           <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">browse-url</span>
                            <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">we get the "zotero:"-less url, so we put it back.</span>
                            <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">format</span> <span style="color: #98be65;">"zotero:%s"</span> zpath<span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
</pre>
</div>

<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/">https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/</a></li>
<li><a href="https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/">https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/</a></li>
</ul>
</div>
</div>
<div id="outline-container-org743b3af" class="outline-3">
<h3 id="org743b3af">Org-mode美化</h3>
<div class="outline-text-3" id="text-org743b3af">
<p>
我觉得原生的就挺好看，可读性也还好。
</p>

<ul class="org-ul">
<li><a href="https://github.com/minad/org-modern">minad/org-modern: :unicorn: Modern Org Style</a></li>
<li><a href="https://emacs-china.org/t/org/19458/3?page=3">想向各位道友收集一下美化 org 的配置 - Org-mode - Emacs China</a></li>
<li><a href="https://github.com/coldnew/pangu-spacing">coldnew/pangu-spacing：emacs minor-mode用于在中文/日文/韩文和英文字符之间添加空格</a></li>
<li><a href="https://remacs.fun/posts/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E6%88%91%E4%BB%AC%E6%80%8E%E4%B9%88%E7%8E%A9emacs1.-%E4%B8%AD%E8%8B%B1%E6%96%87%E8%BE%93%E5%85%A5%E6%97%B6%E7%9A%84%E7%A9%BA%E6%A0%BC/">大模型时代我们怎么玩Emacs：1. 中英文输入时的空格 | remacs的世界</a> 比pangu实用。</li>
</ul>

<div class="org-src-container">
<pre class="src src-nil">;; 设置标题大小
(after! org
  (custom-set-faces!
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold))

  (custom-set-faces!
    '(org-document-title :height 1.2)))

;;字体，设置正文大小
(setq doom-font (font-spec :family "霞鹜文楷等宽" :weight 'regular :size 14))

;; 设置行内make up，直接显示*粗体*，/斜体/，=高亮=，~代码~
(setq org-hide-emphasis-markers t)

;; 盘古，中英文混合排版美化
;;https://github.com/coldnew/pangu-spacing
(use-package pangu-spacing)
(add-hook 'org-mode-hook
          '(lambda ()
             (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))


</pre>
</div>
</div>
</div>
<div id="outline-container-orge9326b8" class="outline-3">
<h3 id="orge9326b8">Org-protocol</h3>
<div class="outline-text-3" id="text-orge9326b8">
<p>
Org-protocol可以在Emacs里更方便的剪藏网页内容，做after reading。也不是必须，多切换一次窗口也还好。
</p>

<ul class="org-ul">
<li><p>
protocol
</p>

<p>
<a href="https://emacs-china.org/t/org-capture/14190">求助: 在网页剪藏时用org-capture模板生成独立文件名 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-mode/8189/7">用org-mode做网页书签的可以进来看一下 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-protocol/8684">什么样才是正确的org-protocol姿势 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://www.orgroam.com/manual.html#Mac-OS">Org-roam User Manual-org-protocol</a>
</p></li>

<li><p>
插入网页连接：
</p>

<p>
<a href="https://emacs-china.org/t/emacs-firefox-org-link/23661">技巧分享：在 emacs 中获取 firefox 当前标签页并生成 org link</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-protocol-capture-html">org-protocol-capture-html </a>
</p>

<p>
或利用org-roam-capture-ref： <a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">https://www.zmonster.me/2020/06/27/org-roam-introduction.html</a>
</p>

<p>
或者使用浏览器插件：<a href="https://github.com/k08045kk/CopyTabTitleUrl">k08045kk/CopyTabTitleUrl</a>
</p>

<p>
Firefox这个反骨仔，经常不适配各种系统。比如不支持mac的applescript。
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orgaf01456" class="outline-3">
<h3 id="orgaf01456">网页摘录和after-reading</h3>
<div class="outline-text-3" id="text-orgaf01456">
<p>
利用org-capture，做剪藏和摘录很方便。现在保存在~clip.org~文件里，可以在agenda里按时间线回顾，由于agenda里只有标题，也起到了类似Anki卡片回顾的作用：
</p>

<p>
有一个JavaScript我一直在用，可以选定一个网页的特定内容，在翻译和剪藏的时候挺有用，同时也微微提升了一点阅读体验。我用 <a href="https://github.com/OwO-Network/DeepLX">DeepLX</a>  通过沉浸式翻译如果单次翻译内容太多会报错和限制，Deepl的中文翻译还是吊打其他的。
</p>

<p>
下面的代码保存到书签，单击书签就可以了：
</p>

<div class="org-src-container">
<pre class="src src-nil">javascript:(function(){var e=document.body;const n=document.head.appendChild(document.createElement("style"));n.textContent=".mainonly { outline: 2px solid red; }";const t=CSS.supports("selector(:has(*))");function o(n){n instanceof HTMLElement&amp;&amp;(e.classList.remove("mainonly"),(e=n).classList.add("mainonly"))}function s(e){o(e.target)}function a(o){if(o.preventDefault(),t)n.textContent=":not(:has(.mainonly), .mainonly, .mainonly *) { display: none; }";else{n.textContent=":not(.mainonly *, .mainonly-ancestor) { display: none; }";var s=e;do{s.classList.add("mainonly-ancestor")}while(s=s.parentElement)}l()}function i(n){n.preventDefault(),n.deltaY&lt;0?o(e.parentElement):o(e.firstElementChild)}function l(){document.removeEventListener("mouseover",s),document.removeEventListener("click",a),document.removeEventListener("wheel",i)}document.addEventListener("mouseover",s),document.addEventListener("click",a),document.addEventListener("wheel",i,{passive:!1}),document.addEventListener("keydown",(function o(s){if("Escape"===s.key&amp;&amp;(n.remove(),document.removeEventListener("keydown",o),l(),e?.classList.remove("mainonly"),!t))for(const e of document.getElementsByClassName("mainonly-ancestor"))e.classList.remove("mainonly-ancestor")}))}())
</pre>
</div>

<p>
after-reading我一直用的 <a href="https://docs.omnivore.app/zh/">Omnivore</a>，开源免费，支持RSS和Newsletter，可以自动同步高亮标注、摘录到Obsidian和Logseq。这部分用来做 <a href="https://www.vandee.art/posts/2024-06-18-%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BF%9D%E9%B2%9C%E6%9C%9F-%E6%B5%81%E5%8A%A8%E7%9F%A5%E8%AF%86%E7%9A%84%E6%A3%80%E7%B4%A2/">流动知识的检索</a>，文档+RAG现在的项目也越来越多了。用AI来过滤、总结这些信息流很巴适。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee&rsquo;s Blog</a>
</p>

<p>
有条件直接上 <a href="https://readwise.io/">Readwise</a>，配合Notion、Obsidian、Logseq都挺好用。<a href="https://getpocket.com/home?src=navbar">Pocket</a>、<a href="https://github.com/usememos/memos">memos</a> 也挺不错，可以把阅读整合到PKM里。
</p>

<p>
<a href="https://n8n.akashio.com/welcome">欢迎来到 n8n 中文教程 | 简单易懂的现代魔法</a>这里给出了一个 omnivore 到 notion 的 workflow。
</p>

<p>
最近<a href="https://www.vandee.art/posts/2024-07-24-start-to-get-readwies/">还是入坑了 Readwise</a>。
</p>
</div>
<div id="outline-container-org94dead4" class="outline-4">
<h4 id="org94dead4">tools</h4>
<div class="outline-text-4" id="text-org94dead4">
<ul class="org-ul">
<li><p>
网站：<a href="https://jina.ai/reader/">https://jina.ai/reader/</a>
</p>

<p>
Github：<a href="https://github.com/jina-ai/reader">https://github.com/jina-ai/reader</a>
</p>

<p>
它可以提取网页内容并转换为markdown格式，还支持直接搜索，支持API。
</p>

<p>
Reader does two things:
</p>

<ul class="org-ul">
<li><b>Read</b>: It converts any URL to an <b>LLM-friendly</b> input with <code>https://r.jina.ai/https://your.url</code>. Get improved output for your agent and RAG systems at no cost.</li>
<li><b>Search</b>: It searches the web for a given query with <code>https://s.jina.ai/your+query</code>. This allows your LLMs to access the latest world knowledge from the web.</li>
</ul>

<p>
添加下面代码到书签保存，点击书签就可以提取网页内容到markdown格式了。
</p>

<div class="org-src-container">
<pre class="src src-javascript">  javascript: <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">currentUrl</span> = window.location.href;<span style="color: #51afef;">var</span> <span style="color: #dcaeea;">newUrl</span> = <span style="color: #98be65;">"https://r.jina.ai/"</span> + currentUrl;window.open(newUrl, <span style="color: #98be65;">'_blank'</span>);window.history.pushState({}, <span style="color: #98be65;">''</span>, currentUrl);
</pre>
</div></li>
</ul>


<p>
以这个工具为跳板，就可以干许多有意思的事情了。
</p>

<ul class="org-ul">
<li><a href="https://github.com/JimmyLv/BibiGPT-v1">JimmyLv/BibiGPT-v1</a> 这个项目可以自己部署，总结B站、YouTube、抖音等等的视频内容，挺好用。</li>

<li><a href="https://sspai.com/post/89828">u-Sir/drag-to-preview</a>，最近发现一个Firefox浏览器插件，可以选中网页链接拖拽弹出单独的窗口预览网页，在窗口外区域鼠标点击即可关闭，很符合我的胃口。</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgee0b3c3" class="outline-3">
<h3 id="orgee0b3c3">输入法设置</h3>
<div class="outline-text-3" id="text-orgee0b3c3">
<p>
由于使用了evil，如果使用系统的输入法，每次在~:w~保存的时候，需要来回切换中英。推荐两种解决方案：SIS和pyim。
</p>
</div>
<div id="outline-container-org3c07712" class="outline-4">
<h4 id="org3c07712">SIS</h4>
<div class="outline-text-4" id="text-org3c07712">
<p>
<a href="https://github.com/laishulu/emacs-smart-input-source">emacs-smart-input-source</a> 是一个可以自动切换输入法的Emacs包。
</p>

<p>
之前在配置SIS的时候，可能是mac系统的问题，安装macism之后，Emacs一直弹窗辅助功能设置，最近突然好了。SIS比pyim方便，不需要再内置输入法，可以直接用系统的输入法。
</p>

<div class="org-src-container">
<pre class="src src-nil">(use-package sis
  ;; :hook
  ;; enable the /context/ and /inline region/ mode for specific buffers
  ;; (((text-mode prog-mode) . sis-context-mode)
  ;;  ((text-mode prog-mode) . sis-inline-mode))

  :config
  ;; For MacOS
  (sis-ism-lazyman-config

   ;; English input source may be: "ABC", "US" or another one.
   ;; "com.apple.keylayout.ABC"
   "com.apple.keylayout.ABC"

   ;; Other language input source: "rime", "sogou" or another one.
   ;; "im.rime.inputmethod.Squirrel.Rime"
   "im.rime.inputmethod.Squirrel.Hans")

  ;; enable the /cursor color/ mode
  ;; (sis-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  (sis-global-respect-mode t)
  ;; enable the /context/ mode for all buffers
  (sis-global-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  (sis-global-inline-mode t)
  )

</pre>
</div>
</div>
</div>
<div id="outline-container-org3ecd6de" class="outline-4">
<h4 id="org3ecd6de">pyim</h4>
<div class="outline-text-4" id="text-org3ecd6de">
<p>
<a href="https://github.com/tumashu/pyim">pyim</a> 也可以达到相同的效果。只是这个输入法是Emacs内置的。
</p>

<p>
可能是由于我用Homebrew安装的Emacs-plus，再加上使用的doomemacs，emacs报错：编译时无法找到 <code>emacs-module.h</code> ，一直无法在Emacs里加载 <a href="https://github.com/DogLooksGood/emacs-rime">emacs-rime</a> 。Emacs-rime的<a href="https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org#%E7%BC%96%E8%AF%91%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0-emacs-moduleh-">文档</a>里写加上~(rime-emacs-module-header-root &ldquo;~/emacs/include&rdquo;)~，我试了所有的Emacs可能的路径都不行。我在Linux-Ubuntu虚拟机里，没有任何问题。
</p>

<p>
这个输入法是Emacs里内置的，如果没有指定内置的输入法，会使用系统自带的。把内置的输入法设置好，同时也解决了中英混合输入的问题，在写代码的时候，来回切换输入法太磨叽了。
</p>

<p>
不知道是什么没设置好，每次新打开一个buffer都需要重新激活pyim，暂时先加了一个org-mode的hook，在org-mode里自动激活pyim。
</p>

<div class="org-src-container">
<pre class="src src-nil">(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))
</pre>
</div>



<p>
<b>pyim 设置</b> ：
</p>

<div class="org-src-container">
<pre class="src src-nil">;;输入法 https://github.com/tumashu/pyim
(global-set-key (kbd "C-\\") 'toggle-input-method)
(use-package pyim
  :init
  :config
  (pyim-default-scheme 'xiaohe-shuangpin)
  (setq default-input-method "pyim")
  )

(use-package pyim-basedict
  :config
  (pyim-basedict-enable))

(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))

;; 设置 pyim 探针
;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
;; 我自己使用的中英文动态切换规则是：
;; 1. 光标只有在注释里面时，才可以输入中文。
;; 2. 光标前是汉字字符时，才能输入中文。
;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
(setq-default pyim-english-input-switch-functions
              '(;; pyim-probe-dynamic-english
                pyim-probe-isearch-mode
                ;; pyim-probe-program-mode
                pyim-probe-org-structure-template
                pyim-probe-evil-normal-mode
                ))

(setq-default pyim-punctuation-half-width-functions
              '(pyim-probe-punctuation-line-beginning
                pyim-probe-punctuation-after-punctuation))

;; 键位绑定，解绑，转换
;; 修改默认键位映射，取消command键位
(setq mac-option-modifier 'meta)

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/os-smart-input-source/13436">（重新设计）中英文混打：OS输入法管理包 smart-input-source - Emacs-general - Emacs China</a></li>
</ul>
</div>
</div>
<div id="outline-container-orgea35b09" class="outline-4">
<h4 id="orgea35b09">RIME</h4>
<div class="outline-text-4" id="text-orgea35b09">
<p>
如果说PKM是纸，那么输入法就是笔。
</p>

<p>
再次强烈推荐 <a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p>

<p>
一个巨坑，最近的RIME更新在<a href="https://github.com/rime/squirrel/releases/tag/1.0.0">Release 1.0.0 · rime/squirrel</a>版本里改变了候选词横向和竖向的设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">style/horizontal 將徹底移除，雖然本版程序仍支持，但會被新控件的默認值覆蓋
請使用 candidate_list_layout: stacked/linear 和 text_orientation: horizontal/vertical
</pre>
</div>

<p>
而且最好直接在输入法外观的配置文件里，修改输入法外观的配置，而不是通用配置，反正我在通用设置里不起作用。
</p>

<p>
<b>下面是简单的安装步骤</b> ：
</p>

<div class="org-src-container">
<pre class="src src-bash">;; mac:
;; mac rime: https://rime.im/download/
Homebrew: brew install --cask squirrel
&#25110;&#32773;&#30452;&#25509;&#19979;&#36733;
;; mac rime-ice
&#20351;&#29992;&#19996;&#39118;&#30772; plum &#23433;&#35013;: https://github.com/rime/plum
<span style="color: #ECBE7B;">curl</span> -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash

&#23433;&#35013; rime-ice:
&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#20840;&#37096;&#25991;&#20214;
bash rime-install iDvel/rime-ice:others/recipes/full

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#25152;&#26377;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span>&#21253;&#21547;&#19979;&#38754;&#19977;&#20010;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/all_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#25340;&#38899;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span> cn_dicts/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/cn_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#33521;&#25991;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span> en_dicts/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/en_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032; opencc <span style="color: #51afef;">&#65288;</span> opencc/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/opencc

;;&#25110;&#20351;&#29992; rime-auto-deploy&#65306;https://github.com/Mark24Code/rime-auto-deploy&#65292;&#36825;&#20010;&#21644;plum&#21482;&#29992;&#36873;&#19968;&#20010;&#12290;

=======================================================
;;Linux
ibus:
https://github.com/rime/home/wiki/RimeWithIBus
<span style="color: #ECBE7B;">sudo</span> apt-get install ibus-rime                   <span style="color: #5B6268;">#</span><span style="color: #5B6268;">ibus</span>

fcitx5:
<span style="color: #ECBE7B;">sudo</span> pacman -Sy fcitx5-rime                      <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Arch Linux</span>
<span style="color: #ECBE7B;">sudo</span> apt update &amp;&amp; <span style="color: #ECBE7B;">sudo</span> apt install fcitx5-rime  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Ubuntu / Debian / Deepin</span>
<span style="color: #ECBE7B;">sudo</span> zypper install fcitx5-rime                  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">OpenSUSE</span>
<span style="color: #ECBE7B;">sudo</span> dnf install fcitx5-rime                     <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Fedora</span>

plum and rime-ice&#65306;
<span style="color: #ECBE7B;">git</span> clone --depth <span style="color: #da8548; font-weight: bold;">1</span> https://github.com/rime/plum ~/plum

;; &#20999;&#25442;&#21040;&#19996;&#39118;&#30772;&#30340;&#30446;&#24405;
<span style="color: #ECBE7B;">cd</span> ~/plum

;; &#22914;&#26524;&#20320;&#20351;&#29992;Fcitx5&#65292;&#20320;&#38656;&#35201;&#21152;&#20837;&#21442;&#25968;&#65292;&#35753;&#19996;&#39118;&#30772;&#25226;&#37197;&#32622;&#25991;&#20214;&#20889;&#21040;&#27491;&#30830;&#30340;&#20301;&#32622;
<span style="color: #dcaeea;">rime_frontend</span>=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full

;; &#22914;&#26524;&#20320;&#26159;&#29992;IBus&#65292;&#21017;&#19981;&#38656;&#21152;&#21442;&#25968;&#65292;&#22240;&#20026;&#19996;&#39118;&#30772;&#40664;&#35748;&#26159;&#20026;IBus&#29256;&#30340;RIME&#25171;&#36896;&#12290;
bash rime-install iDvel/rime-ice:others/recipes/full

</pre>
</div>


<p>
其他可以参考下面的文章:
</p>

<ul class="org-ul">
<li><a href="https://sspai.com/post/84373#!">自由输入法 RIME 简明配置指南 - 少数派</a></li>

<li><a href="https://sspai.com/post/89281">RIME + 雾凇拼音，打造绝佳的开源文字输入体验 - 少数派</a></li>

<li><a href="https://sspai.com/post/90068">让 RIME 体验更上一层楼：如何用 MediaWiki 扩展词库 - 少数派</a>  导入wiki</li>

<li><a href="https://github.com/gshang2017/rime-dict">gshang2017/rime-dict: RIME输入法(拼音)自用词库(包含英语，基础，维基，搜狗等词库)，词频基于腾讯AI向量词库逆序生成。</a>  自建词库，导入专业领域词汇</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org64e1864" class="outline-3">
<h3 id="org64e1864">Others</h3>
<div class="outline-text-3" id="text-org64e1864">
<ul class="org-ul">
<li><a href="https://github.com/lijigang/100-questions-about-orgmode">lijigang/100-questions-about-orgmode: It&rsquo;s all about <b>orgmode</b> !</a></li>

<li><a href="https://emacs-china.org/t/emacs-immersive-translate-emacs/24990">emacs-immersive-translate: Emacs 版本的沉浸式翻译（支持多个翻译后端） - Emacs-general - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/org-ql-columnview-org-roam-org-capture-org-super-links/21599">混用 org-ql、columnview、org-roam、org-capture、org-super-links 塑造我的笔记流程 - Org-mode - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/emacs-package/19922">我想分享一下我的emacs配置和学习思路，并向大家介绍一些我觉得有用的package - Emacs-general - Emacs China</a></li>

<li><p>
<a href="https://emacs-china.org/t/ekg-flomo/27505/12">https://emacs-china.org/t/ekg-flomo/27505/12</a>
</p>

<p>
<a href="https://github.com/ahyatt/ekg">https://github.com/ahyatt/ekg</a>
</p>

<p>
ekg：提供一个类似obsidian里dataview的查询汇总功能
</p></li>

<li><p>
<a href="https://github.com/protesilaos/denote">https://github.com/protesilaos/denote</a>
</p>

<p>
denote：提供类似org-roam的双链，快速插入等功能
</p></li>

<li><p>
Emacs里的其他笔记相关使用包
</p>

<p>
<a href="https://github.com/jrblevin/deft">jrblevin/deft: Deft for Emacs</a>
</p>

<p>
<a href="https://github.com/caiorss/org-wiki">caiorss/org-wiki: Wiki for Emacs org-mode built on top of Emacs org-mode.</a>
</p>

<p>
<a href="https://github.com/Kungsgeten/org-brain">Kungsgeten/org-brain: Org-mode wiki + concept-mapping</a>
</p>

<p>
<a href="https://github.com/weirdNox/org-noter">weirdNox/org-noter: Emacs document annotator, using Org-mode</a>
</p>

<p>
<a href="https://github.com/toshism/org-super-links">toshism/org-super-links: Package to create links with auto backlinks</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-ql">alphapapa/org-ql: A searching tool for Org-mode.</a>
</p>

<p>
<a href="https://www.armindarvish.com/post/web_omni_search_in_emacs_with_consult-web/">Web/Omni Search In Emacs with consult-web or Ditching the Browser&rsquo;s Default Search Engine</a>
</p></li>

<li><a href="https://mischavandenburg.com/zet/neovim-zettelkasten/">我的 Neovim Zettelkasten：我如何使用 Vim 和 Bash 在 Markdown 中做笔记 |米沙·范登伯格</a> 很强，之前用bash来生成md笔记的思路一下子扩展了。使用CLI来做笔记是一个很终极的方案。</li>
</ul>
</div>
</div>
<div id="outline-container-orged1b798" class="outline-3">
<h3 id="orged1b798">PKM with LLM</h3>
<div class="outline-text-3" id="text-orged1b798">
<p>
本地笔记的优势除了隐私性，再就是，数据在自己手上，就可以干很多事。把本地的笔记文档结合LLM做思维拓展，基于个人思维习惯更精确的问答。如果说有时候双链不足以串联整个思维链条，下面这些工具如虎添翼。
</p>

<p>
看到一个大佬已经用Ollama、RAG在MacBook Pro M3 Max上实现了基于obsidian的个人AI知识助手：<a href="https://lopespm.com/machine_learning/2024/06/24/personal-llm.html">个人本地 (Llama3 8B) LLM 使用 WhatsApp + Obsidian 数据扩展 - Byte Tank</a>，和我的思路基本一致。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee&rsquo;s Blog</a>
</p>

<p>
很久之前，看到一篇文章提出了一个观点：随着和LLM互动的增多，特别是现在各种LLM平台，ChatGPT、Claude、perplexity等等，查询、回顾、汇总这些问答是一个值得注意的点。
</p>

<p>
现在我的日常问答都在本地使用Open WebUI，可以导出聊天还有数据库可以直接备份，甚至还可以给对话打tag，当然也可以搜索。
</p>
</div>
<div id="outline-container-org79f9326" class="outline-4">
<h4 id="org79f9326">工具推荐</h4>
</div>
</div>
<div id="outline-container-orgb76da40" class="outline-3">
<h3 id="orgb76da40">Ollama</h3>
<div class="outline-text-3" id="text-orgb76da40">
<p>
<a href="https://ollama.com/">Ollama</a> 可以本地部署大语言模型，目前GitHub 69.1k star，一直在用。obsidian，Emacs，Logseq都支持。如果说Cloudflare是赛博活菩萨，那ollama就是LLM筋斗云。
</p>

<p>
ollama支持主流的开源模型如llama3，所有支持模型可查看：
</p>

<p>
<b>Model library</b> ：Ollama supports a list of models available on <a href="https://ollama.com/library">ollama.com/library</a>
</p>

<p>
相关文章：
</p>

<ul class="org-ul">
<li><a href="https://blog.inoki.cc/2024/04/16/Ollama-cn/">Ollama 架构解析 | Inoki in the world</a></li>
</ul>
</div>
</div>
<div id="outline-container-org24cce95" class="outline-3">
<h3 id="org24cce95">Open WebUI</h3>
<div class="outline-text-3" id="text-org24cce95">
<p>
<a href="https://github.com/open-webui/open-webui">Open WebUI</a> 提供一个WebUI运行本地LLM，目前GitHub 31k star。良好的兼容ollama，聊天数据本地保存，可本地导入文档做RAG查询。
</p>

<p>
<a href="https://openwebui.com/#open-webui-community">社区</a>提供了插件和功能，质变的是：可以让本地LLM搜索web的内容。
</p>

<p>
Open WebUI 在2024-10-06的版本中<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes，不过只支持原生的HTML和CSS。还更新了Overview，可以在白板里展示对话的内容，太实用了，史诗级更新！
</p>

<p>
*其他主要功能*：
</p>

<ul class="org-ul">
<li>📚 本地 RAG 集成：通过突破性的检索增强生成 (RAG) 支持深入探索聊天交互的未来。此功能将文档交互无缝集成到您的聊天体验中。您可以将文档直接加载到聊天中或将文件添加到文档库中，在查询之前使用 <code>#</code> 命令轻松访问它们。</li>

<li>🔍 RAG 的网络搜索：使用 <code>SearXNG</code> 、 <code>Google PSE</code> 、 <code>Brave Search</code> 、 <code>serpstack</code> 、 <code>serper</code> 、 <code>Serply</code> 、 <code>DuckDuckGo</code> 和 <code>TavilySearch</code> 并将结果直接注入您的聊天体验中。</li>

<li>🌐 网页浏览功能：使用 <code>#</code> 命令后跟 URL，将网站无缝集成到您的聊天体验中。此功能允许您将网络内容直接合并到您的对话中，从而增强交互的丰富性和深度。</li>
</ul>

<p>
<b>docker部署相当简单</b> ：
</p>

<ul class="org-ul">
<li>CLI: <code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</code></li>

<li><p>
Docker compose: <a href="https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml">https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml</a>
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #dcaeea;">services</span>:
    <span style="color: #dcaeea;">ollama</span>:
      <span style="color: #dcaeea;">volumes</span>:
        - ollama:/root/.ollama
      <span style="color: #dcaeea;">container_name</span>: ollama
      <span style="color: #dcaeea;">pull_policy</span>: always
      <span style="color: #dcaeea;">tty</span>: <span style="color: #a9a1e1;">true</span>
      <span style="color: #dcaeea;">restart</span>: unless-stopped
      <span style="color: #dcaeea;">image</span>: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}

    <span style="color: #dcaeea;">open-webui</span>:
      <span style="color: #dcaeea;">build</span>:
        <span style="color: #dcaeea;">context</span>: .
        <span style="color: #dcaeea;">args</span>:
          <span style="color: #dcaeea;">OLLAMA_BASE_URL</span>: <span style="color: #98be65;">'/ollama'</span>
        <span style="color: #dcaeea;">dockerfile</span>: Dockerfile
      <span style="color: #dcaeea;">image</span>: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
      <span style="color: #dcaeea;">container_name</span>: open-webui
      <span style="color: #dcaeea;">volumes</span>:
        - open-webui:/app/backend/data
      <span style="color: #dcaeea;">depends_on</span>:
        - ollama
      <span style="color: #dcaeea;">ports</span>:
        - ${OPEN_WEBUI_PORT-3000}:8080
      <span style="color: #dcaeea;">environment</span>:
        - <span style="color: #98be65;">'OLLAMA_BASE_URL=http://ollama:11434'</span>
        - <span style="color: #98be65;">'WEBUI_SECRET_KEY='</span>
      <span style="color: #dcaeea;">extra_hosts</span>:
        - host.docker.internal:host-gateway
      <span style="color: #dcaeea;">restart</span>: unless-stopped

  <span style="color: #dcaeea;">volumes</span>:
    <span style="color: #dcaeea;">ollama</span>: {<span style="color: #dcaeea;">}</span>
<span style="color: #dcaeea;">    open-webui</span>: {}
</pre>
</div></li>

<li><a href="https://docs.openwebui.com/getting-started/updating"> Updating | Open WebUI</a></li>
</ul>

<p>
Ref：<a href="https://docs.openwebui.com/">Open WebUI 官方手册</a>
</p>
</div>
</div>
<div id="outline-container-orgc126799" class="outline-3">
<h3 id="orgc126799">Aider</h3>
<div class="outline-text-3" id="text-orgc126799">
<p>
<a href="https://github.com/Aider-AI/aider">Aider</a> 最近挺火的一个CLI AI助手，开源，GitHub 20.3K Star，基本可以支持市面上的所有模型。当然也支持ollama，在Emacs里有个大佬做了个<a href="https://github.com/tninja/aider.el">aider.el</a>。
</p>

<p>
可以像cursor一样有diff，修改代码，比之前看到的许多CLI AI助手（例如 <a href="https://github.com/ErikBjare/gptme">gtpme</a>、<a href="https://github.com/BuilderIO/ai-shell">ai-shell</a> 、<a href="https://github.com/cline/cline">cline</a> 、<a href="https://github.com/Doriandarko/claude-engineer">claude-enginner</a>）全面许多。
</p>

<p>
先在本机的Python环境里<a href="https://aider.chat/docs/install.html">Install aider</a>，我用的conda，在terminal里：
</p>

<div class="org-src-container">
<pre class="src src-bash">conda activate yourenv
python -m pip install -U aider-chat
</pre>
</div>

<p>
实测在doomEmacs里要使用ollama的本地模型需要这样写：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #51afef;">(</span><span style="color: #51afef;">use-package</span> aider
  <span style="color: #c678dd;">:config</span>
  <span style="color: #c678dd;">(</span><span style="color: #51afef;">setq</span> <span style="color: #dcaeea;">aider-args</span> <span style="color: #51afef;">'</span><span style="color: #98be65;">(</span><span style="color: #98be65;">"--model"</span> <span style="color: #98be65;">"ollama/llama3.1"</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">setenv</span> <span style="color: #98be65;">"OLLAMA_API_BASE"</span> <span style="color: #98be65;">"http://127.0.0.1:11434"</span><span style="color: #c678dd;">)</span>
  <span style="color: #c678dd;">(</span><span style="color: #a9a1e1;">global-set-key</span> <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">kbd</span> <span style="color: #98be65;">"C-c a"</span><span style="color: #98be65;">)</span> <span style="color: #51afef;">'</span><span style="color: #ECBE7B;">aider-transient-menu</span><span style="color: #c678dd;">)</span>
  <span style="color: #51afef;">)</span>
</pre>
</div>

<p>
另外在package.el里的安装：
</p>

<div class="org-src-container">
<pre class="src src-nil">(package! aider
  :recipe (:host github :repo "tninja/aider.el" :files ("aider.el")))
</pre>
</div>

<p>
在Emacs里激活conda环境正常运行Aider.el。
</p>

<p>
Ref：<a href="https://emacs-china.org/t/ai-aider-emacs-aider-el/28064/15">抛砖引玉: 介绍命令行AI编程工具aider以及emacs集成aider.el - Emacs-general - Emacs China</a>
</p>
</div>
</div>
<div id="outline-container-org12629c1" class="outline-3">
<h3 id="org12629c1">gptel</h3>
<div class="outline-text-3" id="text-org12629c1">
<p>
<a href="https://github.com/karthink/gptel">gptel: A simple LLM client for Emacs</a> 是Emacs的一个包，可以在Emacs里直接和LLM对话，目前在用。
</p>


<p>
<b>最近更新了</b> ，可以支持直接添加文件、文本到上下文，awesome！居然还支持转换MD格式到Org？
</p>


<p>
您可以使用 gptel 的查询包含其他文本区域、缓冲区或文件。这个附加上下文是“实时”的，而不是快照。添加后，将在每次查询时扫描并包含区域、缓冲区或文件。
</p>

<p>
您可以从菜单中将选定的区域、缓冲区或文件添加到 gptel 的上下文中，或调用 <code>gptel-add</code> 。 （要添加文件，请在 Dired 中使用 <code>gptel-add</code> 或使用专用的 <code>gptel-add-file</code> 命令。）
</p>

<p>
Ref: <a href="https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests">https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests</a>
</p>


<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">To add context 添加上下文</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">gptel-add</td>
<td class="org-left">Add/remove a region or buffer to gptel’s context.  Add/remove marked files in Dired. 在 gptel 上下文中添加/删除区域或缓冲区。在 Dired 中添加/删除标记的文件。</td>
</tr>

<tr>
<td class="org-left">gptel-add-file</td>
<td class="org-left">Add a (text-readable) file to gptel’s context.  Also available from the transient menu. 将（文本可读）文件添加到 gptel 的上下文中。也可以从瞬态菜单中获得。</td>
</tr>
</tbody>
</table>



<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #5B6268;">;;</span><span style="color: #5B6268;">&#22522;&#26412;&#37197;&#32622;</span>
<span style="color: #51afef;">(</span><span style="color: #51afef;">use-package!</span> gptel
 <span style="color: #c678dd;">:config</span>
 <span style="color: #c678dd;">(</span><span style="color: #51afef;">setq!</span> gptel-api-key <span style="color: #98be65;">"your key"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>


<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">:key can be a function that returns the API key.</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-gemini</span> <span style="color: #98be65;">"Gemini"</span> <span style="color: #c678dd;">:key</span> <span style="color: #98be65;">"YOUR_GEMINI_API_KEY"</span> <span style="color: #c678dd;">:stream</span> t<span style="color: #51afef;">)</span>

<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">Perplexity offers an OpenAI compatible API</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-openai</span> <span style="color: #98be65;">"Perplexity"</span>         <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Any name you want</span>
  <span style="color: #c678dd;">:host</span> <span style="color: #98be65;">"api.perplexity.ai"</span>
  <span style="color: #c678dd;">:key</span> <span style="color: #98be65;">"your-api-key"</span>                   <span style="color: #5B6268;">;</span><span style="color: #5B6268;">can be a function that returns the key</span>
  <span style="color: #c678dd;">:endpoint</span> <span style="color: #98be65;">"/chat/completions"</span>
  <span style="color: #c678dd;">:stream</span> t
  <span style="color: #c678dd;">:models</span> <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #5B6268;">;; </span><span style="color: #5B6268;">has many more, check perplexity.ai</span>
            <span style="color: #98be65;">"pplx-7b-chat"</span>
            <span style="color: #98be65;">"pplx-70b-chat"</span>
            <span style="color: #98be65;">"pplx-7b-online"</span>
            <span style="color: #98be65;">"pplx-70b-online"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>

<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">Ollama</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-ollama</span> <span style="color: #98be65;">"Ollama"</span>             <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Any name of your choosing</span>
  <span style="color: #c678dd;">:host</span> <span style="color: #98be65;">"localhost:11434"</span>               <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Where it's running</span>
  <span style="color: #c678dd;">:stream</span> t                             <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Stream responses</span>
  <span style="color: #c678dd;">:models</span> <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #98be65;">"mistral:latest"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>          <span style="color: #5B6268;">;</span><span style="color: #5B6268;">List of models</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org475a9dd" class="outline-3">
<h3 id="org475a9dd"><b>Kotaemon</b></h3>
<div class="outline-text-3" id="text-org475a9dd">
<p>
从发现到现在差不多就一个多星期，GitHub直接飙升到10.9K star，win、mac、Linux都支持。边用边学习它的RAG构建框架，支持ollama，支持docker。
</p>

<p>
GitHub: <a href="https://github.com/Cinnamon/kotaemon">https://github.com/Cinnamon/kotaemon</a>
</p>

<p>
Hugging Face 在线体验: <a href="https://huggingface.co/spaces/cin-model/kotaemon-demo">https://huggingface.co/spaces/cin-model/kotaemon-demo</a>
</p>

<p>
官方介绍：
</p>

<p>
This project serves as a functional RAG UI for both end users who want to do QA on their documents and developers who want to build their own RAG pipeline.
</p>

<ul class="org-ul">
<li>For end users:
<ul class="org-ul">
<li>A clean &amp; minimalistic UI for RAG-based QA.</li>
<li>Supports LLM API providers (OpenAI, AzureOpenAI, Cohere, etc) and local LLMs (via <code>ollama</code> and ~llama-cpp-python`).</li>
<li>Easy installation scripts.</li>
</ul></li>
<li>For developers:
<ul class="org-ul">
<li>A framework for building your own RAG-based document QA pipeline.</li>
<li>Customize and see your RAG pipeline in action with the provided UI (built with <a href="https://github.com/gradio-app/gradio">Gradio</a>).</li>
<li>If you use Gradio for development, check out our theme here: <a href="https://github.com/lone17/kotaemon-gradio-theme">kotaemon-gradio-theme</a>.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1ebda5d" class="outline-2">
<h2 id="org1ebda5d">ChangeLog</h2>
<div class="outline-text-2" id="text-org1ebda5d">
<ul class="org-ul">
<li><p>
2024-09-13: 校对文档。在使用了Nvim做MD笔记一个月之后，还是割舍不了org-mode的编辑体验，还有agenda。lisp的可玩性比lua还是高一些，比如<a href="https://github.com/jwiegley/dot-emacs/blob/master/lisp/org-roam-logseq.el">dot-emacs/lisp/org-roam-logseq.el at master · jwiegley/dot-emacs</a>这是一个把org-roam和Logseq联用的el。
</p>

<p>
<a href="https://nicholas.carlini.com/writing/2024/how-i-use-ai.html">How I Use &ldquo;AI&rdquo;</a> 许多远古大佬还是在用Emacs，这点就足够我继续探索lisp的语言哲学了。<a href="https://x.com/oran_ge/status/1834253705149133225">orange.ai on X: "采访《汉语新解》作者李继刚：为什么会用 Lisp？ </a>,最近大火的汉语新解的prompt就是lisp语法写的。
</p></li>

<li><p>
2024-10-09：更新了输入法设置，加入sis的配置方案。Open WebUI最近<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了，支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes.
</p>

<p>
还有一大堆新更新。
</p></li>

<li>2024-10-13: 增加了 Aider (一个CLI AI编程助手)在 Emacs 里的安装。最近开源的从代码到部署的 <a href="https://github.com/stackblitz/bolt.new">bolt.new</a>  也很强，还有 Pythagora 的 <a href="https://github.com/Pythagora-io/gpt-pilot">gpt-pilot</a>， AI 辅助编程的项目越来越多了，感谢 cursor 带来了这么多的竞争者。</li>
<li>2024-10-24: 将 MD 文档转换成 org 文档的校对，删除了部分不必要的介绍。</li>
</ul>
</div>
</div>
<div id="outline-container-org1583fb2" class="outline-2">
<h2 id="org1583fb2">Thanks</h2>
<div class="outline-text-2" id="text-org1583fb2">
<p>
这个手册会持续更新，如果对你有所帮助，我会很开心。
</p>

<p>
另见：<a href="https://www.vandee.art/posts/2024-08-02-nvim-pkm-manual/">PKM（个人知识管理）构建手册 - Nvim</a>
</p>

<p>
这里是我日常使用的实用小工具： <a href="https://www.vandee.art/2024-07-26-useful-tools-recommended.html">实用小玩意收集</a>
</p>

<p>
Imagining and creating！
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-emacs.html">Emacs</a> <a href="https://www.vandee.art/tag-org.html">Org</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[Org]]></category>
  <link>https://www.vandee.art/2024-05-22-org-pkm-manual.html</link>
  <guid>https://www.vandee.art/2024-05-22-org-pkm-manual.html</guid>
  <pubDate>Wed, 22 May 2024 19:47:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[也说说艺术的价值]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org46bc932">《现代艺术150年》</a></li>
<li><a href="#orgf1a1187">艺术简史</a></li>
<li><a href="#orgc9700d8">艺术的价值</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org46bc932" class="outline-2">
<h2 id="org46bc932">《现代艺术150年》</h2>
<div class="outline-text-2" id="text-org46bc932">
<p>
<a href="https://www.bilibili.com/video/BV1ax4y1z7Tr/">拍卖网站上盲买了一幅毕加索，只为告诉你什么叫做艺术之殇</a> ，刷到了这个视频。
</p>

<p>
先闲聊几句养号。这个概念是一年前在一个帖子里看到，大概意思是：大数据和AI分析用户数据是不可避免的，既然这样就利用这个机制，让它来养号，一个号专门学习，只搜索哪些内容。抖音已经很久没用了，并不是内容的问题，根本原因是不方便我RSS订阅，再加上开屏自动播放突然出现的声音和画面让我比较反感。在Twitter建了几个分类的关注列表，B站上面因为长年搜索艺术、哲学、音乐相关的内容，主动获取信息的时候基本上大数据推的也是这些，再加上被动的RSS订阅定期推送关注的大佬的博客和newsletter，目前信息源就养成了这样。
</p>

<p>
回到这个视频，作者在视频里提到：
</p>
<blockquote>
<p>
毕加索远不是我个人喜欢的那一类艺术家，因为他太不纯粹了，虽然毕加索对于现代艺术的贡献是毋庸置疑的，但是他的创作真的太多太杂也太乱了，并且我可以说他那些作品里面95%以上都是没有任何艺术价值的商品。
</p>

<p>
威尔贡培兹的现代艺术150年，我感觉挺有意思的，就也买来看了看，里面提到了一个很有趣的观点，他说销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。贡培兹的意思很明确，那就是在现代社会的语境下，在资本主义的运作下，一栋房子好不好，一件艺术品美不美其实并没有那么重要，所谓的价值只不过是纯纯的附加值罢了。
</p>

<p>
但我只想说，时代造就艺术，所以艺术的问题就是时代的问题，我不愿意过多地去妄断这些艺术，现代艺术也好，当代艺术也好，是因为不管他们有什么千奇百怪的问题，最终都会反噬到我们这个社会，反射到我们每一个个体上面。
</p>
</blockquote>

<p>
<a href="https://book.douban.com/subject/26854318/">《现代艺术150年》</a>已经加入书单，再顺便提一嘴<a href="https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram">https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram</a> bot，会更新最新的可用域名，网上查到的许多都是钓鱼网站。这也是没法，他们天天要和FBI躲猫猫。（支持正版！）
</p>

<p>
现代艺术商业性远大于艺术性，时代造就艺术，所以说，艺术的问题就是时代的问题。很赞同作者的看法，另外我也不太喜欢毕加索过于商业化的一面，但这并不妨碍我对毕加索是个天才的定论。不吹不黑，相比之下，梵高、高更、塞尚这些差不多同世纪的艺术画家，确实纯粹一些。窦唯现在好像只倾心于北京的京酱面，彻底修仙了。
</p>

<p>
今天思考的问题是，艺术价值与纯粹的问题。
</p>
</div>
</div>
<div id="outline-container-orgf1a1187" class="outline-2">
<h2 id="orgf1a1187">艺术简史</h2>
<div class="outline-text-2" id="text-orgf1a1187">
<p>
我不是什么艺术科班学生，也没有特别出众的艺术特长，更没有什么实际的艺术运作经历，只是一个艺术爱好者，平常拍拍照、唱唱歌、录录音（写谱还在学，AI赶紧出个自动写谱的！），纯粹是瞎聊。有一个概念是<a href="https://wangyurui.com/posts/si-wei-mo-xing-04-si-xiang-shi-yan-5744df28">思想实验</a>，我就勉强把自己的瞎想往上面靠了。在想象力方面，我还是对自己有信心的。
</p>

<p>
现阶段我对于价值的思考的底层逻辑，很大一部分来源于马克思的《资本论》，勉强看懂了开头。再加上一点点曼昆的《经济学原理》、亚当·斯密的《国富论》柏拉图的《理想国》。而对于艺术的理论认知也仅仅来源于《艺术与视知觉》、《艺术的故事》、原研哉的《设计中的设计》（强烈推荐）。
</p>

<p>
在比较认真的谈论一个具体事情的时候，摆出自己观点之前，阐明自己的理论和来源，我认为是很有必要的，观点都是有倾向性和局限性的。
</p>

<p>
下面正式开始，先简单过一遍艺术的发展史（主要是绘画史，比较可考，音乐能固定下来那是太近代的事了，许多艺术风格概念的来源也是绘画）。
</p>

<p>
从艺术的诞生开始说起的话，史前时期的原始部落会做一些人偶和泥巴雕塑，到了古埃及时期，法老陵墓里的壁画，艺术风格或者说艺术形式开始出现雏形。当时艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描 绘成从偶然碰上的角度看到的样子。他们是**根据记忆作画**，所遵循的一些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。
</p>

<blockquote>
<p>
这大概跟他们的绘画必须为另一种目的服务有关系。当时最关紧要的不是好看不好看，而是完整不完整。艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描绘成从偶然碰上的角度看到的样子。他们是根据记忆作画，所遵循的一 些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。事实上，他们的做法很像画地图，不像作画。埃及人处理这个问题时内心没有任何不安。他们会径直把池塘画成 从上面看、把树木画成从侧面看的样子。然而池塘里的鱼禽若从上面看则很难辨认，所以就把它们画成侧面图。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
古埃及时期，艺术创作更多的服务于目的，到了希腊和罗马时期，艺术家开始更多的表达自己想表达的内容，肖像画和雕塑中人的肖像体现的很明显，古埃及时期和希腊时期的肖像都没有具体的表情和神态，因为那个时期艺术服务于具体的目的，肖像更像是一种象征，象征神和君王，但到了罗马，艺术家开始注重这些细节，并敢于在作品里呈现。而在希腊时期，画家们有一项压倒一切的伟大发现，即发现了短缩法 （foreshortening），希腊艺术家使用衣饰去标出人体的主要分界，这类手法仍然表明他们是多么注重关于形式的知识，并且希腊时期的艺术家开始研究肌肉、骨骼进一步运用知识来创作，这正是严格地循规蹈矩和寓变化于规矩之中二者所达到的平衡。许多现代的艺术手法依然能在其中找到影子。
</p>

<p>
简单来说，随着人类认知的提升，艺术创作的目的、过程、技术、手法，都在发生着微妙的变化。以古埃及到古罗马时期为例，艺术家从根据记忆作画，尽可能的保留记忆中重要的画面，目的更多的是记录，到后来逐渐开始运用知识来重新定义表现的形式与重点。
</p>

<p>
中间经历了伟大的文艺复兴和宗教改革，经过19世纪晚期的印象派（主要是想提一提梵高），来到了20世纪前半叶，表现主义（蒙克-尖叫，石版画）、抽象派和立体主义（蒙德里安-红，黑，蓝，黄和灰的构图、毕加索Pablo Picasso-小提琴和葡萄），再到超现实主义（萨尔瓦多·达利Salvador Dali-永恒的记忆）。其实纵观艺术的历史，和思想史差不多，艺术风格的演变基本围绕着：现实和虚拟这两个对立面。
</p>

<p>
古埃及时期，其实也是为了写实才画出埃及壁画上的侧身人面像，到了中世纪开始涌现大量宗教题材的作品，巴洛克和宗教改革之后，18世纪中晚期画家基本就是皇家御用的肖像画照相机了，到了19世纪工业革命时期，因为出现了大量的没有灵魂的流程化工业艺术加工品，在加上对学院派过于循规蹈矩和各个学院派系之间的争斗（就好像我哈佛的就是瞧不起剑桥的），艺术家们逐渐在以巴黎蒙马特区（Montmartre）的咖啡馆中开始讨论新的艺术概念。居斯塔夫·库尔贝（Gustave Courbet, 1819-1877）1855年，在巴黎的一座棚屋里开个人画展的时候，给画展取名为（现实主义——G·库尔贝画展》（Le Realisme, G·Courbet），“现实主义”革命开始，这个现实主义主要的意思是要展现自然真实的光影，而不是学院派过于追求技法的那种在画室内纯写实却忽略了自然里的各种不可用公式固定下来的自然变化，学院期望艺术家们以神话、宗教形象、历史或者古典 风俗习惯为基础，用一种把主题理想化的风格来创作他们的作品，印象派艺术家从室内走向室外，通过拆除工作室与实际生活之间的壁垒而改变了游戏规则。之后以爱德华·马奈（Édouard Manet, 1832—1883）、克劳德·莫奈（Claude Monet, 1840-1926）为代表，印象派开始萌芽。
</p>

<p>
从现实主义革命开始，现代艺术的风格就一直在争斗，这个时期的市场经济也发达许多，资本主义也逐渐成熟，艺术家们自己也比较迷茫，参照传统的艺术风格吧，印象派已经说明太传统的技法反而不能反映出时时都在变化的大自然环境，不符合人眼最直观的“印象”，创新一些吧，大佬就那么几个可以迎合市场需求的。到了现代的超现实主义之后，我个人感觉，艺术风格已经是一个非常宽泛的概念了，主流的传统艺术风格已经在各派的争斗当中演变成许多叫不出名的分支。引用《艺术的故事》里作者感叹：
</p>

<blockquote>
<p>
在这里，我们终于回到我们的出发点。实际上根本没有艺术其物。 只有艺术家，他们是男男女女，具有绝佳的天资，善于平衡形状和色彩 以达到“合适”的效果；更难得的是，他们是具有正直性格的人，绝不肯在半途止步，时刻准备放弃所有省事的效果，放弃所有表面上的成 功，去经历诚实的工作中的辛劳和痛苦。我们相信永远都会有艺术家诞生。但是会不会也有艺术？这在同样大的程度上也有赖于我们自己，亦即艺术家的公众。通过我们的冷漠或我们的关心，通过我们的成见或们的理解，我们还是可以决定事情的结局。恰恰是我们自己，必须保证传统的命脉不致中断，保证艺术家仍然有机会去丰富那串宝贵的珍珠， 那是往昔留给我们的传家之宝。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
艺术好像其实从来就不存在，我们日常所说的艺术、艺术的价值，演变为了，艺术品的商品价格、公众和时代对于艺术家、艺术品的风评与潮流。被时代认可的风格，才能成为历史中叫得出名字的艺术，存在的是艺术品，而不是艺术。
</p>
</div>
</div>
<div id="outline-container-orgc9700d8" class="outline-2">
<h2 id="orgc9700d8">艺术的价值</h2>
<div class="outline-text-2" id="text-orgc9700d8">
<p>
确实，到了现在，如同开始提到的那个视频里所说，销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。资本也在很大程度上影响着艺术。
</p>

<p>
到这里，悖论就显而易见了：如果说艺术家是追求纯粹的表达，但艺术作品的价值体现从来就不是一个可以纯粹的过程，那现实里存在纯粹的艺术么？如果说艺术家不是追求纯粹的表达，那艺术作品的价值是从什么而抽象出来的？随意一个有一定劳动价值的作品就可以称作为艺术品，并附加上艺术品的价值么？（严格区分艺术、艺术家、艺术作品这三个概念）
</p>

<p>
我现在的想法是：艺术创作肯定是劳动的一种，既然是劳动的一种，按照马克思《资本论》里关于价值的理论，这种自由的、自发的劳动的价值，一定会对象化到一个对象上（暂时称作 <b>art object</b> ），对于商品，劳动者的劳动价值就对象化到了商品的价值也就是货币。无论在那个时代，art object是一直都存在的，从远古时代到现代，它提供的美的欣赏的价值一直没有变化，创造这个过程本身的价值也没有发生变化。人类创造这个art object是自然自发的行为，来源于生存需求之上的审美需求以及想象力、想象的表达，一部分也来自于无聊。无聊的时候，人就会找事情做，让自己不无聊。人类如果没有艺术创作，没有艺术真的会无聊死的。我无法想象，没有音乐、没有绘画、没有艺术设计的世界，就好像一切突然都失去了色彩，只剩下空洞和死板。
</p>

<p>
但艺术家也要生存，所以，art object 的一部分对象化到商品与货币上是天经地义的。更何况最开始，艺术家根本不存在，做雕塑和画像也没有特定的艺术创作目的，只是在工作和劳动。人类不同时代的认知决定了不同的艺术形式与概念，艺术品的商业价值、商品价值更是如此。艺术品的art object 和艺术品的拍卖价格这两个价值也其实并不冲突，拍卖价格是社会共同价值规律形成的，这同样是艺术的一部分。无法流通到社会的艺术品，独有自己的art object也就无法被社会共同价值衡量。
</p>

<p>
因此，简单来说：art object是对个人的美的价值，而艺术品的商品价值是对外的社会共同价值。说人话就是，我喜欢什么是我的事，它之多钱是它的事，这也正是艺术自由的地方，人人都可以保有自己的art object。
</p>

<p>
写到这里突然让我想到了电影《私人定制》里，王宝强那个弹棉花的章节。李成儒扮演的大导演为了摆脱俗，追求极致的雅，和王宝强换血，最后去弹棉花去了。无法被人欣赏的艺术品，也就是失去了社会共同价值，可能也就不能称作为一个艺术品了，因为艺术品是需要欣赏对象的，艺术家和欣赏对象共同加起来才是艺术品。我一个人天天在街上拿着一幅画喊，我邻居画的这幅画可好看了！喊到喉咙破了，也涨不了几毛钱。
</p>

<p>
最后，
</p>

<p>
我认为，这些壁画、雕塑、工艺品、摄影、音乐等等劳动品能够在人类认知的发展中逐渐统一起来有了一个共同的称呼：艺术，是因为它们都有一个共同的object： <b>填补真实与虚拟之间的空隙</b> 。这个art object从来独立于它可以卖多少钱，也与这个附加价值并不冲突，也不会让它变得不纯粹，美一直是纯粹的，不纯粹的是社会共同价值规律。
</p>

<p>
这也是我现阶段对于艺术的定义。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-art.html">Art</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Art]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/2024-05-05-the-value-of-art.html</link>
  <guid>https://www.vandee.art/2024-05-05-the-value-of-art.html</guid>
  <pubDate>Sun, 05 May 2024 21:29:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[三颗大包菜]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8729c34">书的香味</a></li>
<li><a href="#org2f0e830">三颗大包菜的分量</a></li>
</ul>
</div>
</nav>

<figure id="org4c786be">
<img src="https://s2.loli.net/2024/03/15/bUw5MqRz639pIHs.jpg" class="img ：height 50%" width="50%">

</figure>
<div id="outline-container-org8729c34" class="outline-2">
<h2 id="org8729c34">书的香味</h2>
<div class="outline-text-2" id="text-org8729c34">
<p>
好几天没吃有机娃娃菜了，思来想去，还是它在一大堆乱七八糟的食物中脱引而出。买完菜回来路上，看到一个摆着许多书的大摊子，支棱起来的简陋的棚子上面挂着一个牌子，醒目的写着：全场图书，买二本送三本。
</p>

<p>
老实说，不是这个牌子，我今天是应该不会走过去的。我也一贯没觉得自己的热爱足以给我不加思考就不自觉行动的动力。如果我是因为热爱读书，喜欢看王小波的书，在白嫖完电子版之后我应该早就在书店买了精装版，而现在却是在一个图书大甩卖的街边小摊，而且很可能是盗版。开始写标题和日期的时候才发现，今天正好是315。
</p>

<p>
就看书这个事，有必要多写几句。我不是一个爱看书的人，从我看过的书那少的可怜的数量就足以说明。但是走过路过书店，总是会不自觉看一眼，但又很少走进去。为数不多的进去书店的时候，也只是翻看翻看书皮，正过来看又反过来看，回忆起来真不知道自己当时是在干嘛。只记得，印刷书的油墨味道好闻，把书捧在手里的感觉巴适，还有把纸张翻页过去，手指摩擦纸面的触感，这些总在我看到书的时候不自觉的被调动起来。如此说来，我对书的兴趣从一开始就不是因为书的内容和书这个承载知识的载体本身，这个兴趣的源头极有可能是因为<a href="https://www.vandee.art/posts/2022-11-24-undefined/">无聊</a>。
</p>
</div>
</div>
<div id="outline-container-org2f0e830" class="outline-2">
<h2 id="org2f0e830">三颗大包菜的分量</h2>
<div class="outline-text-2" id="text-org2f0e830">
<p>
买了时代三部曲和其他几本看过的觉得不错的就走了，一共140元。
</p>

<p>
这六本还是有点沉的，大约是三颗大包菜的重量。四舍五入，一个时代，一个人的一生现在也就约等于三个大包菜。
</p>

<p>
在那个书摊上，还有许多很有分量的书，比如：《穷查理宝典》、《纳瓦尔宝典》、中国四大名著、《白夜行》等东野圭吾小说，再就是儿童图书和一些畅销书。整个书摊大概三百本左右，如此分量，一个简陋的书摊架子足以，因为书摊架子只会不自觉的提供向上的支持力平衡书的重力，这对于铁架子加上厚木板的组合太轻松了。
</p>

<p>
也因为书架不会看书，所以只能本能的、不自觉的提供材料的支持力和张力，感受到书本的物理重量；而我会看书，除了提供把书拿起来、翻页之外好像也没多少其他我这个材料本能的、不自觉的力量，况且三个大包菜的重量我已经觉得沉了。因此我远不如一个三百本也不费吹灰之力的书架。但在路过书店这个事上，我比书架做得好，我自觉的就像不自觉一样，这是书架做不到的。
</p>

<p>
王小波的书放在书摊里不起眼，这个不起眼有三：和中国四大名著放一起的不起眼，和《穷查理宝典》、《纳瓦尔宝典》，还有和育儿、儿童书放一起的不起眼。四大名著自不用说，这是正统文学文化根基的分量，《穷查理宝典》这是教人致富的财富分量、名人典型的分量，育儿、儿童书、畅销书这是生活消遣、童趣的分量（今天书摊里看的人最多的也是这一块）。对于我这种没有看书“不自觉”的人来说，更不起眼，很可能以前在书店已经路过王小波的书许多次了。
</p>

<p>
我今天买这些书的行为可能在我读了这些文字的时候就已经决定了，一个作家、文学创作者，跳出了艺术创作的体裁本身，这正是我现在在思考和践行的过程。我既想看看王小波的答案，更想找到新的自己的答案。
</p>
<blockquote>
<p>
<b>没有科学知识的人比有科学知识的人更容易犯错误；但没有艺术修养的人就没有这个缺点，他还有容易满足的好处。假如一个社会里，人们一点文学修养都没有，那么任何作品都会使他们满意。</b> 举个例子说， 美国人是不怎么读文学书的，一部《廊桥遗梦》就可以使他们如痴如狂。相反，假如在某个国家里，欣赏文学作品是他们的生活方式，那就只有最好的作品才能使他们得到满足。我想，法国最有资格算作这类国家。一部《情人》曾使法国为之轰动。大家都知道，这本书的作者是刚去世不久的杜拉斯。这本书有四个中文译本，其中最好的当属王道乾先生的译本。我总觉得读过了《情人》，就算知道了现代小说艺术；读过道乾先生的译笔，就算知道什么是现代中国的文学语言了。
</p>

<p>
有位作家朋友对我说，她很喜欢《情人》那种自由的叙事风格。她以为《情人》是信笔写来的，是自由发挥的结果。我的看法则相反，我 认为这篇小说的每一个段落都经过精心的安排：第一次读时，你会感到极大的震撼；但再带着挑剔的眼光重读几遍，就会发现没有一段的安排经不起推敲。从全书第一句“我已经老了”，给人带来无限的沧桑感开 始，到结尾的一句“他说他爱她将一直爱到他死”，带来绝望的悲凉终，感情的变化都在准确的控制之下。 <b>叙事没有按时空的顺序展开，但有另一种逻辑作为线索，这种逻辑我把它叫做艺术——这种写法本身就是种无与伦比的创造</b> 。我对这件事很有把握，是因为我也这样写过：把小说的文件调入电脑，反复调动每一个段落，假如原来的小说足够好的话，逐渐就能找到这种线索；花上比写原稿多三到五倍的时间，就能得到一篇新小说，比旧的好得没法比。事实上，《情人》也确实是这样改过，一直改到改不动，才交给出版社。《情人》这种现代经典与以往小 说的不同之处，在于它需要更多的心血。我的作家朋友听了以后感觉有点泄气：这么写一本书，也不见得能多赚稿费，不是亏了吗？但我以为，我们一点都不亏。现在世界上已经有了杜拉斯，有了《情人》，这位作家和她的作品给我们一个范本，再写起来已经容易多了。 <b>假如没范本，让你凭空去创造这样一种写法，那才是最困难的事</b> ：六七十年代，法国有一批新小说作家，立意要改变小说的写法，作品也算是好 看，但和《情人》是没法比的。有了这样的小说，阅读才不算是过时的 陋习——任凭你有宽银幕、环绕立体声，看电影的感觉终归不能和读这 样的小说相比。
</p>

<p>
引自“用一生来学习艺术”收录于《沉默的大多数》—王小波
</p>
</blockquote>

<p>
《黄金时代》、《白银时代》、《青铜时代》、《黑铁时代》，真想看看王小波写的这个时代。
</p>

<p>
<a href="https://lizhi.turkyden.com">李志</a>被禁言了，《黄金时代》王小波被删减了，我们这个时代的最后是几颗大包菜不起眼的躺在书架上呢。
</p>


<figure id="orgdca7e26">
<img src="https://s2.loli.net/2024/03/15/yIuJ2pEOVnZ1MA7.jpg" class="img ：height 50%" width="50%">

</figure>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <link>https://www.vandee.art/2024-03-15-the-weight-of-three-cabbages.html</link>
  <guid>https://www.vandee.art/2024-03-15-the-weight-of-three-cabbages.html</guid>
  <pubDate>Fri, 15 Mar 2024 14:26:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[摇树枝的猴子]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgdb4271a">摇树枝的猴子</a></li>
<li><a href="#orgd8f60b0">开源的知识</a></li>
<li><a href="#org0089fde">幸福</a></li>
<li><a href="#org8062c84">跬步与千里</a></li>
</ul>
</div>
</nav>
<p>
我觉得自己是个不会种地的农民，总是赶不上节气。 —王小波《黄金时代》
</p>


<figure id="orgab9b104">
<img src="https://s2.loli.net/2024/03/03/GVe18fzdCjXF5Ra.jpg" class="img" width="50%" height="50%">

</figure>
<div id="outline-container-orgdb4271a" class="outline-2">
<h2 id="orgdb4271a">摇树枝的猴子</h2>
<div class="outline-text-2" id="text-orgdb4271a">
<blockquote>
<p>
这场访谈聊开后，许志远在猝不及防的问宁浩，你最大的弱点是什么呢？
宁浩这才回答，&#x2026;但我觉得我怯懦，
</p>

<p>
或许在这个意义价值普遍被消解的时代，荒诞与发疯已经成为常态，已经成为了人们一种自我保护的方式。
</p>

<p>
在宁浩的办公室门前有一尊斗战胜佛像，对此他解释，每个人的人生都像孙悟空一样，走过一个被规范了的过程。
</p>

<p>
最后他讲了一个猴子摇树枝的故事，有人曾经问宁浩你为什么拍电影，他说小时候老看见动物园里有一只猴子被关在笼子里，没事就晃树枝，他想知道为什么，意义是什么。过了几个月之后再去看，他发现那只猴子还在那晃树枝。宁浩突然明白这只猴子能怎么样呢，他觉得自己晃树枝晃得比别的猴子晃得好，它就瞬间产生了一个意义，就是它不晃树枝又做什么呢。那我们就是要去找到我们人生中的各种意义，拍拍电影，晃晃树枝。
</p>

<p>
或许对于宁浩来说，如今拍电影就是在笼子里晃树枝。这让我想到红毯先生最后一幕，刘维持在封闭的大楼里，踩着平衡车来来回回兜圈子，搭上时代的车无意义的回旋，最重要的好像是学会站稳好了。
</p>

<p>
来源：<a href="https://www.bilibili.com/video/BV1f4421A7yU/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=670">吃了这些真瓜，更懂《红毯先生》 【精准空降到 11:10】 </a>
</p>
</blockquote>

<p>
经常看到网上的这类话，大致意思是：人生或许本来就没有意义，是人类赋予了生命意义、追寻这个“没有意义的人生”就是意义、这个没有意义本身就是意义，诸如此类。
</p>

<p>
在前几年我或许还会赞同一些，但现在只是不反对。混淆哲理和哲学是个老问题，在生活中问题不大，混为一谈甚至还有诸多好处，哲学的学术语义也逐渐被日常口语语义哲理所覆盖，古典哲学的内涵也早就演变成了分析哲学和语言哲学，如此说来也无可厚非。
</p>

<p>
人生意义这个问题，就好像，一定体积的水被放在一个既定外形的容器内，
哲理的意思是：水本来没有特别意义，装在瓶子里，有了容器，就有了形状，我们喝水，这个水于是有了被喝意义，人生也是如此。很显然这和哲学没有一点关系。
</p>

<p>
我是物质决定意识的拥护者，
</p>
<blockquote>
<p>
不，我们身上没有任何东西可以逃过自然法则。假如真有那样的东西，那我们早该发现了。我们身上并没有违背事物自然表现的东西。整个现代科学，从物理学到化学，从生物学到神经科学，都在巩固我们的这一认知。这个困惑的解答在别处。当我们认为自己很自由的时候，我们确实做得到，因为我们的行为由身体内部的大脑决定，不受外部因素左右。但是自由并不意味着我们的行为不受自然规律的支配，而是说明自然规律通过大脑的运作来决定我们的行为。我们的自由决定，是我们大脑中数十亿个神经元相互作用的结果，其交互极为丰富，无比迅速。 <b>我们的抉择固然自由，但却不可能超出神经元的相互作用。</b> 这是否意味着当我做出决定的时候，那个决定的人就是“我”呢？ 对，当然是这样，难道“我”还能做出与我的神经元不同的决定吗？那也太荒谬了。 <b>正如7世纪荷兰哲学家斯宾诺莎（Baruch Spinoza ）极为清楚地认识到的那样，这二者是一回事。其实并没有“我”和“我大脑的神经元”之分，这两者本是一码事。一个人就是一个程序，复杂而又极其完备。</b>
</p>

<p>
—卡洛·罗韦利《七堂极简物理课》
</p>
</blockquote>

<p>
笛卡尔的<a href="https://wangyurui.com/posts/wo-si-gu-wo-zai-9f4374ba">我思故我在</a>，现在仍然可以是人类的强心剂。我一直抱有一个观点：哲学唯物唯心的答案在我们找到外星人(不低于人类的高等文明)之后自然会有结论，内禀的矛盾还得参照系统外部。即便是物质决定的意识，我们人类所反应出的意识也只是宇宙里并不唯一的版本，只不过我们统治了地球的生态。我们在物质绝对规律（科学）所反馈的意识下，来演绎、归纳物质的规律，这本身从源头开始就是矛盾的，因此我也一直更愿意把这些称为“发现”而不是“发明”。
</p>

<p>
康德的先验理论、黑格尔的绝对精神和形而上学放在现在一定是违背现代科学理论体系的，但谁又能完全否定物质就是不那个“神”呢？我们掌握了物质的绝对的全部奥秘就能掌控我们自己的人生，人类的文明么？犹太人第一个说不，薛定谔第二个。
</p>

<p>
<b>不怀疑和否定存在，就无法肯定存在</b> 。作为物质来说，人类、人类文明必然是没有意义的（熵是老大），物质就是现代文明，现代科学的“神”，但臣服于物质的一定不是人类，人类也一定不会臣服于物质，因为“我思故我在”，因为在同一个物质体系中人类文明一直延续到了现在，因为人类的爱和非理性就是这个无秩序的物质世界带来秩序和无序的最大变数。
</p>

<p>
许多生物都会繁殖、生殖，但只有人类说，爱。
</p>

<p>
宁浩可能正处于笛卡尔怀疑自己的那个阶段，我很喜欢宁浩，很想再看到疯狂的石头、疯狂的赛车这样的作品。我们就是摇树枝的猴子，爱就完事了，毫无意义又怎样？只因为，我们存在。（并没有存在是意义本身的意思）
</p>
</div>
</div>
<div id="outline-container-orgd8f60b0" class="outline-2">
<h2 id="orgd8f60b0">开源的知识</h2>
<div class="outline-text-2" id="text-orgd8f60b0">
<blockquote>
<p>
这几天被收藏最多的链接之一，一定有这个飞书文档。
</p>

<p>
一群年轻人用手工协作的方式，一砖一瓦的砌成了可能是中文互联网里最好的AI知识库，然后本着开源的理念把文档共享给所有人。
</p>

<p>
说实话，这让我有点依稀感觉到维基百科的古典文化了，文档的主要创作者刚刚开了一场直播，讲他们是怎么打造这项宏大工程，以及在欠缺回报的预期下，为何这么多人愿意参与到共建行为里。
</p>

<p>
在过去，这本来不会构成一个问题，因为互联网的起源，就始于一台主机与另一台主机的连接，任何信息的交换，都伴随着数据的上传和下载，上世纪九十年代马化腾和雷军作为志愿者主动维护的FidoNET，也承载着饱含热情的共享兴趣，再往后「做一个有种的男人」，也见证了BT与电驴的浪潮兴衰。
</p>

<p>
商业化在某种程度上破坏了互联网的初衷，虽然未必应当批判市场的选择，但是利用而非填平信息鸿沟的做法泛滥起来，终究是让人失望的，就像OpenAI自己都还在研究Sora，关于如何精通Sora的付费课程已经齐刷刷的上市了，好笑的背后，其实充满了悲哀。
</p>

<p>
所以看到年轻人赤手空拳的打破围栏，重新拽回「我为人人、人人为我」的互联网精神，让AI的知识得到普惠传递，这份拾光筑梦的本色，真的值得记录下来。
</p>

<p>
来源：<a href="https://weibo.com/1560906700/O37SZek39">https://weibo.com/1560906700/O37SZek39</a>
</p>
</blockquote>

<p>
就是这个<a href="https://waytoagi.feishu.cn/wiki/QPe5w5g7UisbEkkow8XcDmOpn8e">通往AGI之路-飞书文档</a> 了，再看看<a href="https://www.thepaper.cn/newsDetail_forward_137600">李一舟</a>。
</p>

<p>
<a href="https://www.vandee.art/2023-12-06-learn-all-the-time.html">Learn All The Time</a> 里我提到了认知盈余，以及价值的一些思考。
</p>

<blockquote>
<p>
因此知识的交换，互联网信息的共享，认知盈余这种价值的形成是一定的。
</p>

<p>
我相信那些固有价值一直都是还是存在的。也就是马克思所说的劳动、劳动品价值或者商品的使用价值。 <b>它们不应该在现在习以为常的资本和货币华丽耀眼的盛装舞蹈中被渐渐淡忘。知识和认知更是这样。</b> 并不是所有价值都能在货币里的得到应有的体现，也并不是所有价值都能够或应该参与货币的这场变装游戏，并不是所有的价值最后都会被披上货币的外衣。固有的价值，在其他对象化的形式之中，也一样会展现出它自身的价值。
</p>
</blockquote>

<p>
我认为真正的“知识”就应该是开源的，它是人类历史文明延续的结晶，有着自身固有的价值，不是个人和个体的体量可以承载的。
</p>

<p>
<a href="https://www.thepaper.cn/newsDetail_forward_26530853">马斯克状告OpenAI，称自己被骗惨了，要求赔钱、开源</a>，看马斯克继续打怪。
</p>
</div>
</div>
<div id="outline-container-org0089fde" class="outline-2">
<h2 id="org0089fde">幸福</h2>
<div class="outline-text-2" id="text-org0089fde">
<p>
<a href="https://1q43.blog/post/5322">幸福的积分 – 虹线</a>，这篇文章很长，我也没有读完，但很有价值。<a href="https://mp.weixin.qq.com/s/COs1bul0aCiMFAw4OT9q6Q">中国可能在经历一波“文艺复兴”</a>，九边最近也发了一篇。
</p>

<p>
这两篇都和幸福有关，感兴趣的可以看看。
</p>

<p>
这个话题太大，现在也没什么特别的想法，只觉得：假如说，人得到自己希求的东西就是幸福，那就言之成理。倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的。
</p>
<blockquote>
<p>
罗素在讨论伦理问题时曾经指出，人人都希求幸福。假如说，人得到自己希求的东西就是幸福，那就言之成理。倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的。谁也不是因为吃是幸福的才饿的呀。幸福的来源，就是不计苦乐、不计利弊、自然存在的需要，这种需要的种类、分量，都不是可以任意指定的。
</p>

<p>
—王小波《沉默的大多数》
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org8062c84" class="outline-2">
<h2 id="org8062c84">跬步与千里</h2>
<div class="outline-text-2" id="text-org8062c84">
<blockquote>
<p>
说起来，这是我的问题。我活在一个巨大的错觉里。我曾经以为大家达成了很多基本共识，但并没有。我曾经以为很多常识性的观念只有历史价值，但也不是。就像王小波的杂文，我一度觉得写得很有趣，但是内容都是老生常谈而已。我这么想也并非没有理由。当时整个社会对王小波的杂文都是一边倒地赞赏，但并没引发太大的争论。四平八稳的常识能引发什么争论呢？
</p>

<p>
但是，现在如果再爆出《花拉子模信使问题》、《思维的乐趣》《积极的结论》这样的文章，就很可能引发争论，很多人就会不认可，甚至会骂。我猜想，以后有些年轻人再读王小波，甚至可能会受到思想上的震撼：原来还可以这样思考问题！
我并没有贬低人家的意思。这是没有办法的事情，我们就是要不断发现常识，不断重申一些简单得不能再简单的道理，不断将老生常谈谈了又谈。王小波常读常新，已经灌过一百次的醍醐随时准备灌第一百零一次。有人可能会觉得这是原地打转，但要想保持原地打转，都需要付出艰巨的努力。这个过程就是西西弗斯推石头一样。它考验的不是智力。这不需要太高的智力，它考验的是耐心和勇气。大家都觉得中国式父母唠叨，但他们再唠叨也唠叨不过咱们的常识输出者。他们必须不停地说，不停地说，把同样的道理用不同方式说了又说。可是他们真的不能停下来。
</p>

<p>
这让我想起《爱丽丝镜中奇缘》里，红皇后对爱丽丝说的一句话。她说：“在这个世界上，你必须不停地奔跑，才能保持在原地。”
</p>

<p>
来源：<a href="https://mp.weixin.qq.com/s/IMCnW_6sZPIZlsFwj_QF6g">关于莫言的争论，让我有种巨大的荒谬感</a>
</p>
</blockquote>

<p>
也是看到王小波这三个字才看完的，作者中肯的态度也挺喜欢，
</p>

<p>
“在这个世界上，你必须不停地奔跑，才能保持在原地。”这话，说的挺好。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Thinking]]></category>
  <link>https://www.vandee.art/2024-03-03-a-Monkey-shaking-the-branch.html</link>
  <guid>https://www.vandee.art/2024-03-03-a-Monkey-shaking-the-branch.html</guid>
  <pubDate>Sun, 03 Mar 2024 14:41:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[羊好可怜]]></title>
  <description><![CDATA[
<div id="outline-container-org7991c60" class="outline-2">
<h2 id="org7991c60">羊好可怜</h2>
<div class="outline-text-2" id="text-org7991c60">
<p>
最近爱上了家附近的一家羊肉粉，很还原贵阳的风味。羊肉片的薄厚适中，量也不多不少，粉快见底了，肉也差不多吃完，辣椒面更是香而不呛喉。这种凝结于劳动实践中的精确剂量，比任何公式都要准确，随手一抓每次我吃来都刚刚好。虽然这样同样我也是被“算计者”，却全然没有被大数据计算的那种厌烦感。
</p>

<p>
吃了差不多有两个月了，本来每次都吃的香香的，全身暖和，直到今天。
</p>

<p>
从地铁出来，走过两个红绿灯，直行500米之后，我和往常一样又点了一碗。正夹起一片羊肉，突然听到身后一个小女孩说：妈妈，妈妈，羊好可怜啊。妈妈没说话，然后是小女孩的重复。
</p>

<p>
我没有回过头去看他们是不是还是点了一碗，也没有听清女孩妈妈最后说的什么，也许是她还是没想好怎么解释，也许是对店员的一个点头，可能是直接走远了所以听不到，可能是我注意力还是在香香的羊肉上选择性过滤了。我可以确定的是，她一定说了话，而我在一瞬间思考的空白之后，吃的还是挺香。
</p>
</div>
</div>
<div id="outline-container-org0ee4243" class="outline-2">
<h2 id="org0ee4243">困扰</h2>
<div class="outline-text-2" id="text-org0ee4243">
<p>
路上无数个关于善恶、佛教信仰、素食环保的问题相互纠结，后悔没仔细听听女孩妈妈是怎么回答的，这样我可能可以知道一个正确的答案或者排除一个错误的。不想清楚这个问题到不是很困扰我想以后小孩教育的事，最要紧的是这会直接影响我下一次吃粉的体验。我知道下一次我再吃的时候，一定又会再想这个问题。
</p>

<p>
困扰我的不是人应不应该吃羊的事；也不是是不是吃羊了就是大恶人，不吃就又日行了一善，少吃了一片就又积了一德。因为凭我现在的道行是一定回答不了的，所以干脆先丢到一边。
</p>

<p>
让我现在能困扰，又还能接着想想的是：我小时候究竟有没有问过这个问题（模糊的印象里我肯定说过）；为什么听到小女孩这个问题的时候，心里还是有犹豫。如果我是那个问题答案的任意一边，我都应该不会犹豫，我不知道我犹豫的是什么。我只想吃羊肉的时候还是香香的。
</p>

<p>
这让我突然想到超市猪肉包装上的卡通猪logo、电梯里最近的猪肉广告，是不是其实他们还是会心存愧疚，要不然为什么要把这个东西画的这么可爱，好像那个健康快乐的猪的形象可以让消费者联想到这个猪肉很健康，让我们从开始就觉得吃着这个健康快乐的卡通猪是一个也会让很快乐的事，就像电梯广告里卡通猪说的：我吃的健康，肉味更香（画面是一个微笑的大猪脸）。
</p>

<p>
小女孩的问题我可能会这样回答：我也这么认为，羊是真挺可怜的，你看替罪羔羊这个成语，羊也被用来祭祀和献祭。但《圣经》里也有说：“次日，约翰看见耶稣来到他那里，就说，看哪，神的羔羊，除去（或作背负）世人罪孽的。”（约翰福音1:29），同样也是基督教动物象征符号，象征耶稣及其追随者。
</p>

<p>
我知道，这次我又会是局外人了。因为，虽然下一次我还会再想这个问题，我也还是会吃的很香。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-局外人.html">局外人</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[局外人]]></category>
  <link>https://www.vandee.art/2024-02-01-poor-sheep.html</link>
  <guid>https://www.vandee.art/2024-02-01-poor-sheep.html</guid>
  <pubDate>Thu, 01 Feb 2024 14:52:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Learn All The Time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9c6f183">尝试维持两种相反的想法</a>
<ul>
<li><a href="#org43ab429">太极张三丰</a></li>
<li><a href="#org008b7fd">从事物之间的联系出发</a></li>
</ul>
</li>
<li><a href="#org7991379">认知盈余</a></li>
<li><a href="#orgbd43be5">Learn，learn，and learn</a></li>
<li><a href="#orgfe30ffa">Reference</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org9c6f183" class="outline-2">
<h2 id="org9c6f183">尝试维持两种相反的想法</h2>
<div class="outline-text-2" id="text-org9c6f183">
<p>
作家<a href="https://en.wikipedia.org/wiki/F._Scott_Fitzgerald">F·斯科特·菲茨杰拉德</a>（F. Scott Fitzgerald,小说《了不起的盖茨比》作者）谈什么是聪明的头脑：
</p>
<blockquote>
<p>
&ldquo;The test of a first-rate intellect is the ability to hold two opposing ideas in your head at the same time, and still retain the ability to function.&rdquo;
</p>

<p>
“对一流智力的考验是能够同时在脑海中持有两个相反的想法，并且仍然保持运作的能力。”
</p>

<p>
Source: <a href="https://click.convertkit-mail4.com/k0u7xn6xqnf6hdz6pdeu9h8w8p577/vqh3hrhpn63plxug/aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9DcmFjay1VcC1GLVNjb3R0LUZpdHpnZXJhbGQvZHAvMDgxMTIxODIwMQ==">The Crack-Up</a>
</p>
</blockquote>

<p>
如同<a href="https://zh.wikipedia.org/wiki/%E4%BC%8F%E7%88%BE%E6%B3%B0">伏尔泰</a>可能所说：我并不同意你的观点，但是我誓死捍卫你说话的权利。虽然<a href="https://www.douban.com/note/616832515/?_i=1838282i5YSKNh">不是伏尔泰原话</a>但不妨碍引用，借谁的口无妨。一位伟大的农夫和伟大的哲学家没有区别。
</p>
</div>
<div id="outline-container-org43ab429" class="outline-3">
<h3 id="org43ab429">太极张三丰</h3>
<div class="outline-text-3" id="text-org43ab429">
<p>
这既是一种包容的人生态度，更是让思维保持活跃和客观的修行的一种实际方法。这当然不是说，要精神分裂，每时每刻都和相反的想法做斗争，而是共存。**让事物的本质从不同角度，同时呈现在思维当中，这绝对可以说是一种修行**。就像张三丰悟出的太极，它无形又包容万千变化，这是自我与万物的变化保持的微妙平衡，是自我与外界对话，信息交换的微妙平衡。这真是人类与自然最完美的关系的一种了。
</p>

<p>
在最近看完的卡洛·罗韦利 <a href="https://book.douban.com/subject/33424487/">时间的秩序</a> 一书中，按照圈量子理论他提出了一个观点：世界由事件而非物体构成，“物体”本身仅仅是暂时没有变化的事件，是事件表现的形式。
</p>

<blockquote>
<p>
很久以来，我们都试图从基本物质的角度来理解世界，物理学也许比任何其他学科都更需要追寻这种基本物质。但我们研究得越多，越难以从“存在的东西”这个角度去理解世界，而从事件之间的关系来理解世界却容易得多。
</p>

<p>
“我们可以把世界看作由物体、物质、实体这一类东西构成。或者我 们可以把它看作由事件、发生、过程、出现组成。它不能持久，会不断 转化，无法在时间中永恒。基础物理学中，时间概念的毁灭导致了以上 两种观点中前者的崩塌，而非后者。 <b>这是一种领悟，认识到无常的普遍性，而不是一切在静止的时间里停滞</b> 。通过把世界看作事件、过程的集合，我们得以更好地理解与描述世 界。这是与相对论兼容的唯一方式。世界并不是物体的集合，而是事件 的集合。 <b>物体与事件的区别在于，物体在时间中持续存在，而事件的持续时间有限</b> 。石头是典型的“物体”，我们可以问它明天在哪里。与此相反， 亲吻是一个“事件”，问这个吻明天在哪儿是没有意义的。世界由亲吻的 网络构成，而非石头。
</p>

<p>
因此，我们按照出现的方式而非存在的方式来描述世界。牛顿力 学、麦克斯韦方程组、量子力学等，都告诉我们事件怎样发生，而非事 物是什么样的。通过研究生物的演化与生存，我们理解了生物学。通过 研究人与人交往、思考的方式，我们才理解心理学（只有一点点，并不 多）&#x2026;&#x2026; <b>通过形成过程而非存在，我们理解世界</b> 。“物体”本身仅仅是暂时没有变化的事件。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a> -卡洛·罗韦利
</p>
</blockquote>


<p>
他同样写到：
</p>
<blockquote>
<p>
我认为不需要比这理解得更多了。我们可以问更多问题，但我们要 小心那些无法被准确表述的问题。**当我们发现了时间能被谈论的所有方面，我们就发现了时间。**我们也许表达不出对时间的直接感知，但还是 对它笨拙地示意（好吧，但它为何会“流逝”呢？），但我相信，我们现 在只是在把事情搞混，执意要把近似的语言转化为事物。当我们无法精 准地表述问题时，通常不是由于这个问题十分深奥，而是因为这是一个 假问题。
</p>
</blockquote>

<p>
还是拿张三丰的太极来说。可能在太极被“创造”出来之前，其实太极这种形式就已经存在了。要回答“太极”这个语言概念什么，按照一直以来哲学的思维方式是这样：从现象出发，提出问题，探究本质，归纳总结真理。
</p>

<p>
但就像时间这种概念一样，这个概念是人类思维、体验提出的，我们把这个未知的概念用”时间“来指代，但其实很可能时间从来就不是一个可以具体描述的概念，可以说是我们自己给了自己一个无法回答的问题，人类思维的一个很大的限制就是：我们一贯用已知的东西来描述未知，来获得一种确定性，可描述性，因为我们要开口说话，我们要和物质进行信息交换，这一切的源头就是这个、那个，this、that。因此我们想描述昨天发生的一个事的时候，我们自动在思维中想出一个概念去表达，没有语言的时候我们用肢体、图案 <b>。所以我们自动得出一个“时间”的概念，这个概念很大程度来源于我们大脑结构对于记忆的处理，我们的记忆中存在这种对发生过的事情留下的痕迹</b> ，于是我们说昨天发生了什么，刚刚发生了什么。
</p>
</div>
</div>
<div id="outline-container-org008b7fd" class="outline-3">
<h3 id="org008b7fd">从事物之间的联系出发</h3>
<div class="outline-text-3" id="text-org008b7fd">
<p>
扯远了一点，回到开头说的太极的修行。
</p>

<p>
在探求一个未知的概念的过程中，我们往往不可避免的被问题本身所限制了。因为仿佛要获得打开一扇门的钥匙就必须先看看这个钥匙孔张什么样。但这个未知问题很可能本身就没有可以被人类现有思维理解的表现形式，它也从来不是一扇门，也就没钥匙和钥匙孔这一说了，正如同刚刚说到的时间这个概念。因此，从事物之间的联系出发，是一个非常有效的思维方式。
</p>

<p>
举个书中的苹果酒的例子：
</p>

<blockquote>
<p>
如果宇宙的一个子集在这种意义上很特殊，那么对这个子集而言， 宇宙的熵在过去就很低，热力学第二定律就成立；记忆会存在，痕迹会 留下，也会有进化、生命与思想。
</p>

<p>
换句话说，如果宇宙中有这样的东西——对我来说肯定会有——那 么我们就刚好属于它。此处，“我们”指的是我们经常接触并且用来描述 世界的物理量的集合。因此，也许，时间的流动不是宇宙的特征，就像 天空的旋转，来自我们在自己角落中的独特视角。
</p>

<p>
但为什么我们会属于这些特殊的系统呢？苹果长在喝苹果酒的北 欧，葡萄长在喝葡萄酒的南方，和这个是同样的原因。或是在我出生的 地方，人们居然刚好说的是我的母语；或是温暖我们的太阳与我们的距 离刚好合适——不近也不远。**这些例子里，“奇特”的巧合都源于把因果 关系搞反了：不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。这样说的话，就没什么奇怪的了**。
</p>

<p>
在进化的历程中，面对我们无法直接感知的事物（“我不懂为什么 我这样忧郁。”安东尼奥在《威尼斯商人》一开头咕哝道），**大脑的庞大机制已经经过设计，以便对可能的未来做出计算。这就是我们所说 的“决定”。**因为大脑可以根据现在详细描述出未来可能的样子（除了细节稍有出入），这样我们就会自然倾向于按照“原因”先于“结果”的逻辑 来思考：过去的事件是未来事件的原因，如果没有这个原因，未来的事 件就不会以完全相同的样子出现在我们的世界里。”
</p>

<p>
在我们的经验里，原因的概念在时间中是不对称的，原因先于结 果。当我们发现两个事件“具有相同的原因”时，我们发现这个共同原因 [25]在过去，而非未来。如果一场海啸的两股波浪同时到达邻近的岛屿， 我们会认为在过去有一个事件引起了这两股波浪，我们不会去未来寻 找。但那不是因为有一种从过去到未来的神奇的“因果”力量，而是因为 两个事件之间关联的不可能性需要一些不可能之事，而只有过去的低熵 才能提供这种不可能性。不然还有什么能提供这种不可能性呢？换句话 说，那些存在于过去的原因只不过是过去低熵的显现。在热平衡态，或 是在纯粹的力学系统中，由因果关系确定的时间方向并不存在。
</p>
</blockquote>

<p>
因为我们大脑神经结构的限制，我们的记忆习惯于把已经发生过的事情归纳为原因，把思维加工过的记忆、逻辑思考的结果称作那个原因的结果。但其实，不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。从事物之间的联系出发才是关键，也就是事件。如果把每一个孤立的物体都看作一个发生的事件，这些事件共同支起一个网络，每一个物体不是静止不动的孤立的个体，树在那里的高楼也一样在随着地球旋转，它们每时每刻都在与外界的一切信息发生着交换，影响着每一个其他物体未来要发生的事件的概率。通过形成过程而非存在，我们理解世界。“物体”本身仅仅是暂时没有变化的事件。就如同一个智者所说，没有绝对的沉默。
</p>

<p>
每一种学科、理论，经济学、哲学、物理学、化学、生物学，都是对于这些事物之间的联系—也就是各种事件的不同视角。我们不应该孤立的去看待这些问题，思考这些现象。因为每时每刻，我们都必然位于一个绝对的环境内部，**不识庐山真面目，只缘身在此山中。**我们现在被限制在太阳系这个物理环境中，当然看不到太阳系之外的视角。因此，需要同时保持内部环境的思维和外部环境的思维，对于环境内部和外部的事情，思维的方式就应该是不同的，用内部现象的结论去看待外部现象，必然会出现矛盾。两种不同的体系，当然不存在统一的真理，这并不是说完全否定存在着不同系统中统一的东西。
</p>

<p>
到这里，我好像终于把要说的说清楚了。总结一下：
</p>

<ul class="org-ul">
<li>我想说的尝试维持两种相反的想法，第一个层面就是针对外部环境与内部环境而言。</li>

<li>第二个层面，如果可以的话，我甚至愿意把两种扩展到X种。具体到实际的问题的时候，比如今天看到的一个讲拿破仑的文章 <a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a>。孤立的看这个问题，只会得到片面的结论，也不存在一个完美视角能覆盖到一个事物的全貌。保持自己的视角、态度，才是更应该着手事情。</li>
</ul>

<p>
如此多的视角和想法，如何找到自己的，这也就是我想说的太极与修行了。
</p>

<p>
对于 <a href="https://vandeefeng.github.io/posts/2022-08-07-undefined/">读万卷书还是行万里路</a>  这个我一直会思考下去的问题，重要的不是答案，而是过程，每一个在这个问题上的选择，就是我对这个问题的答案了。也没必要给自己徒增矛盾与烦恼，因为它本身就是矛盾，或者说它就是矛盾本身。（这并不是在辩证，因为它们本来就区别很大。）
</p>

<blockquote>
<ul class="org-ul">
<li><p>
从来就存在着两条路，一条路是向外探索，探索物质世界，从原子结构到股票涨落，从中研究控制现实世界的方法。一条路是向内探索，探索心灵世界，探究“我”的构成，“我”的特性，“我”的能力，建构起对自己的认知。遗憾的是，在前一条路上人山人海，在后一条路上却行者寥寥，而前一条路上遇见的诸多难解的问题，往往在后一条道路上才能找到答案。
</p>

<p>
来源： <a href="https://mp.weixin.qq.com/s?__biz=MjM5MjAzODU2MA%3D%3D&amp;chksm=bd46be028a313714a282554c31cb967d3a9710eddcb0fe9ca826ae044e4d788231a38cc1519e&amp;idx=1&amp;mid=2652796365&amp;sn=39b4d46467b7df6472ae469d2f6cffbe">和自己相处</a>
</p></li>
<li><p>
我们每个人都曾经有这样经历：多年之后，才明白当年的某个人说的某句话原来是这个意思。我们的头脑就像一个斜坡。当我们没有任何阅历与经验时，那个斜坡的表面是光滑的。而我们在书本上读到的，在书斋里听到的，在前辈那里似懂非懂学来的东西，就像是从斜坡上方流下来的水。光滑的斜坡留不住任何水。读书一箩筐竟似什么都记不住。而我们的每一次刻骨铭心的经历，都像是一把把锤子，将这个光滑的斜坡砸出一个个大大小小的坑。
</p>

<p>
来源： <a href="https://shixingcuowu.zhubai.love/posts/2320790958667300864?push_source_id=2314749384392835072&amp;push_source_type=email">🥫阅读碎片罐头（202309月刊） 试行错误竹白</a>
</p></li>
<li><p>
不知来，视诸往 。其实当我们读了很多的历史的时候，我们或许可以明白《徐霞客游记》中那句：“初四日，兀坐听雪溜竟日。”为何意，而《德道经》的“执今之道，以御今之有”的“道”意的真正含义或许就暗合于此吧。那一天，山下的你我，正奔忙着追逐“虚幻”，但徐霞客却坐在黄山绝顶，细声闻簌簌，远势望濛濛，不知过了多久，起身，抖掉蓑衣残雪，朝着光的方向，继续行走在路上。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/dai-bei-bai-tou-weng-f08b8fdf">行走在路上 - 太隐</a>
</p></li>
<li><p>
去的地方越多，你就觉得去的地方太少，看的风景越多，就觉得还有太多的风景没有看过。苏格拉底：我只知道一件事，就是我一无所知。似乎有的尽头就是无，宇宙也好像就是这样。时间的箭头，总是只会指向一个方向，阴晴圆缺，周而复始，易得易失。
</p>

<p>
来源：<a href="https://vandeefeng.github.io/posts/2023-06-02-undefined/">渴望着下一段旅行 梵低&rsquo;s Blog</a>
</p></li>
</ul>
</blockquote>
</div>
</div>
</div>
<div id="outline-container-org7991379" class="outline-2">
<h2 id="org7991379">认知盈余</h2>
<div class="outline-text-2" id="text-org7991379">
<p>
在<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>这篇推送里，看到了“认知盈余”这个概念，挺有意思。
</p>

<blockquote>
<p>
Clay Shirky （克莱·舍基）是一位美国作家、顾问和教师，他主要研究互联网技术对社会和经济的影响。他在纽约大学的互动电信项目（ITP）担任客座讲师，教授新媒体课程。Shirky还是一位 TED 演讲者，他在演讲中探讨了现代世界的变革与媒体的演变，以及这些变化对社会和政治的深远影响。TED链接：<a href="https://www.ted.com/speakers/clay_shirky">Clay Shirky  Speaker  TED</a>
</p>

<p>
Shirky的代表著作有《认知盈余》（Cognitive Surplus）、《未来是湿的》（Here Comes Everybody）等，这些书籍分析了互联网现象，并探讨了这些现象对未来的影响。
</p>

<p>
认知盈余指的是就是**受过教育，并拥有自由支配时间的人，他们有丰富的知识背景，同时有强烈的分享欲望，这些人的时间汇聚在一起，产生巨大的社会效应。**比如Meta、X以及维基百科的成功，都是“认知盈余”的功劳。在中国，微博、小红书、知乎的兴起，同样有赖于它。**参与分享的网民数量越来越多，力量越来越强大，互联网产业也随之迎来“核聚变”，原来我们所熟知的商业模式，随时可能成为泡影。**
人类是社会性动物，但自由时间的激增和某种社会资产的稳步减少趋于一致，这种社会资产便是人与人之间的信任与依靠。
</p>

<p>
自己创造的事物就算很普通，和消费别人创造的质量上乘的事物相比，它仍然有一种与众不同的吸引力。并不是我们的工具塑造了我们的行为，但是工具赋予了我们行为发生的可能。
要从一个工具中创造出最大的价值，靠的并不是总体规划或者跨越式发展，而是连续不断的尝试与错误。对于任何一个社会来说，在这样一种转变中要面对的关键问题是，如何充分利用这个过程。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>
</p>
</blockquote>

<p>
第一时间想到的就是在看马克思《资本论》的时候想回答的什么是真正的价值，这个问题。
</p>

<p>
一直以来，我都抱有一个想法：
</p>

<p>
如同水的价值一样，它的价值不因为它一定生成、产出什么而存在，而是因为它固有的性质。知识也是一样，它有着自身固有的永恒的价值。
</p>

<p>
在之前的<a href="https://vandeefeng.github.io/posts/2023-11-20-Get-rich-slow/">富有的概率</a>里，我想到：
</p>
<blockquote>
<p>
富有从来不是真正富有的人本来的目的，它是伴随的一个概率。该有的都有了的时候，你想不富有其实也挺难的，名利会追逐你，甩都甩不掉，甚至反过来吞噬你。当所有的导向富有的概率事件都发生了的时候，最后那一点别人没有的” 运气 “，才是 fortune 真正到来的时候。当然这个运气，也可以说成是你的实力、命运，或者缺少这个运气的人的抱怨和忌妒。
</p>

<p>
提升自己就是最大的人生储蓄，最大的财富。当然富有了之后，它是真理，富有之前，它是一坨 shit。
</p>
</blockquote>

<p>
认知盈余这个概念扩展了这个想法。
</p>

<p>
在1844手稿中，马克思就提出 <b>人的本质就是自由而自觉的活动</b> ，我们的生产、劳动在当今资本化的社会运作中，剩余价值被剥削，这些自由而自觉的活动产生不了它原本应该对应的社会价值与个人价值，它们被抽象成一般的无差别的人类劳动，进而劳动和劳动品的价值和使用价值发生变化。我们的个人价值在现在的社会交换中，大部分只能存在与商品之中了。在价值和价格、货币、资本的转化过程中，现在的经济运行法则必然会导致财富向少数人流动。
</p>

<p>
马克思还说到，就算没有货币这种体现价值交换的形式出现，也必然会导致相似的社会运行规律。我们的自由而自觉的活动就算没有被抽象化成商品，也得对象化到其他形式之中，人类是社会性动物，交换是绝对而且必须的。
</p>

<p>
因此知识的交换，互联网信息的共享，认知盈余这种价值的形成是一定的。
</p>

<p>
我相信那些固有价值一直都是还是存在的。也就是马克思所说的劳动、劳动品价值或者商品的使用价值。 <b>它们不应该在现在习以为常的资本和货币华丽耀眼的盛装舞蹈中被渐渐淡忘</b> 。知识和认知更是这样。并不是所有价值都能在货币里的得到应有的体现，也并不是所有价值都能够或应该参与货币的这场变装游戏，并不是所有的价值最后都会被披上货币的外衣。固有的价值，在其他对象化的形式之中，也一样会展现出它自身的价值。
</p>

<p>
艺术发展到现在，一个个天价拍卖，买的人都是人傻钱多？为什么一个只能挂墙上的东西指这么多钱？当然不是，这就是它固有价值的表现方式之一。就如同货币本身的职能一样，价值的体现。天价的艺术品，在今天是天价，可能一晚上之后，就是废品。但它固有的价值并没有变化，变化的是它的表现形式。
</p>

<p>
所以，那句废话还是得说：知识就是财富。
</p>

<p>
但前提是，知识的价值形式可以转化。
</p>

<blockquote>
<p>
As one resource becomes abundant, other resources become bottlenecks. When wealth and power become abundant, anything wealth and power cannot buy become bottlenecks - including knowledge and expertise.
</p>

<p>
当一种资源变得丰富时，其他资源就会成为瓶颈。当财富和权力变得丰富时，任何财富和权力买不到的东西都会成为瓶颈——包括知识和专业知识。
</p>

<p>
After a certain point, wealth and power cease to be the taut  constraints on one’s action space. They just don’t matter that much.  Sure, giant yachts are great for social status, and our lizard-brains  love politics. The modern economy is happy to provide outlets for  disposing of large amounts of wealth and power. But personally, I don’t  care that much about giant yachts. I want a cure for aging. I want  weekend trips to the moon. I want flying cars and an indestructible body and tiny genetically-engineered dragons. Money and power can’t  efficiently buy that; the bottleneck is knowledge.
</p>

<p>
到了一定程度之后，财富和权力就不再是对一个人行动空间的严格限制。他们只是没那么重要。当然，巨型游艇非常有利于社会地位，而我们的蜥蜴脑热爱政治。现代经济很乐意为处置大量财富和权力提供渠道。但就我个人而言，我不太关心巨型游艇。我想要治愈衰老的方法。我想要周末去月球旅行。我想要飞行汽车、坚不可摧的身体和基因工程的小龙。金钱和权力无法有效地买到这一点；瓶颈是知识。
</p>

<p>
<a href="https://wiki.vandee.art/#%E5%BD%93%E9%87%91%E9%92%B1%E5%85%85%E8%A3%95%E6%97%B6%EF%BC%8C%E7%9F%A5%E8%AF%86%E6%89%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%B4%A2%E5%AF%8C%20%E2%80%94%20LessWrong">当金钱充裕时，知识才是真正的财富 — LessWrong - Vandee Wiki</a>
</p>
</blockquote>
</div>
</div>
<div id="outline-container-orgbd43be5" class="outline-2">
<h2 id="orgbd43be5">Learn，learn，and learn</h2>
<div class="outline-text-2" id="text-orgbd43be5">
<p>
最近都在说查理·芒格的格言和它的故事。与其说芒格爱读书，不如说是爱学习和思考。
</p>

<p>
我只想记住下面这一条，因为芒格的格言都是“废话”。芒格自己也说过：钓鱼的两个原则：一是在有鱼的地方钓鱼，二是不要忘记第一条原则。
</p>
<blockquote>
<p>
&ldquo;I think a life properly lived is just learn, learn, learn all the time.&rdquo;
</p>

<p>
正确的过完这一生，就是不断学习、学习、学习。
</p>
</blockquote>

<p>
万物之始，大道至简，衍化至繁。这自然也是一句“废话”。
</p>

<p>
和开头我想说的一样，这些话谁说出来都一样。因为，知识，Knowledge、智慧，philosophia有它固有的价值。它不因为它是“农夫”而褪色，也不因为它是“芒格”而耀眼。它就是知识与智慧本身。
</p>

<p>
<a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a>，最近<a href="https://www.notboring.co/p/openai-and-grand-strategy">奥尔特曼被罢免</a>的事情，让<a href="https://zh.wikipedia.org/zh-cn/%E6%9C%89%E6%95%88%E5%88%A9%E4%BB%96%E4%B8%BB%E7%BE%A9">有效利他主义 - 维基百科</a>这个词又频繁出现，过多的争论的这些各方观点，没什么意义。没有孤立的物体，有的是互相联系的事件。即使这些事情都没有发生，也会有另一个OpenAI，另一个Chatgpt，另一个山姆·奥尔特曼。因为按照我们人类对于历史的总结：历史总是惊人的相似。
</p>

<p>
现在我其实越来越倾向于奥尔特曼和马斯克，虽然他们的想法好像是相反的。量子力学的出现质疑了牛顿经典力学的“决定论”体系（注：这里的“决定”指的是相对于概率模糊性的可计算的确定性），而越来越多的物理学家和哲学家倾向于自由意志是不存在的（注：量子力学并不完全否定自由意志，这里的自由意志概念不同于法律、心理学中的自由意志）。
</p>

<p>
就如同基因最本来的目的一样—自私的无限复制自己，也如同宇宙本来的目的一样—从低熵到高熵的状态，熵增加。我们无法阻止未来“既定”的事情，因为并没有过多的原因去导向这个结果。
</p>
<blockquote>
<p>
热振动就像在不停地洗一副牌：如果牌是按顺序排列的，洗牌的过 程就会把顺序打乱。这样，通过洗牌——借助万物自发的无序化，热量 就从高温物体传向了低温物体，而非反之。熵的增加只不过是普遍又常见的无序的自然增长。 这就是玻尔兹曼领悟到的内容。过去与未来的区别不在运动的基本 规律里，也不在自然的深层法则中。是自然的无序化导致了越来越非特 定、不特殊的情形。
</p>

<p>
如此看来，只有当我把目光聚焦于牌的特定方面时（在这个例子中 是颜色），“某些排列比另一些更特殊”的概念才有意义**（比如二十六张 红色的牌，然后是二十六张黑色的牌）。如果我们从各个方面对牌进行 区分，那所有排列就都是等价的：没有哪个比其他的更特殊。[11]只有当 我们以一种模糊与近似的方式看待宇宙的时候，“特殊性”的概念才会出现。玻尔兹曼说明了熵之所以会存在，是因为我们以一种模糊的方式描述世界。他证明了熵就是我们模糊的视野无法区分的不同排列的数量。 热量、熵、过去的低熵都是近似地、统计性地对自然进行描述的概念。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a>
</p>
</blockquote>

<p>
我们现在自以为的秩序，可能真只是一个随机洗牌的结果，我们在这个巧合中，认为我们是特殊的。我们因为在寻求逻辑自洽，寻求一个确定性的答案，归纳总结出这些符合我们大脑逻辑规律的真理。就像恐龙爸爸怎么也想不到有一天自己突然就没了，人类突然某一天就从猩猩进化了，并没有一定的原因和结果。
</p>

<p>
AI就是一个随机洗牌的特定结果，我们在这个洗牌中，没必要一直争论这些原因和结果。崇尚革命的激进派像宗教一样的布道，保守派一味的设定限制和强调伦理，这些唾沫贩卖了太多的焦虑，让吃瓜的我们在<a href="https://en.wikipedia.org/wiki/Overton_window">Overton window 奥弗顿之窗</a>之中一并贩卖了自己的注意力。
</p>

<blockquote>
<ul class="org-ul">
<li><p>
There’s this concept called the Overton Window: the range of policies or ideas that are politically acceptable at any given time.
</p>

<p>
有一个概念叫做“奥弗顿之窗”（Overton Window）：在任何特定时间在政治上可以接受的一系列政策或想法。
</p></li>
<li><p>
Since Joseph Overton came up with the idea in the mid-1990s, the concept has expanded beyond government policy. Now, it’s used to describe how ideas enter the mainstream conversation where they influence public opinion, societal norms, and institutional practices.
</p>

<p>
自从约瑟夫·奥弗顿（Joseph Overton）在1990年代中期提出这个想法以来，这个概念已经扩展到政府政策之外。现在，它被用来描述思想如何进入主流对话，影响公众舆论、社会规范和制度实践。
</p></li>
<li><p>
The Overton Window is the knot in the narrative tug-of-war. The teams pulling on either side don’t actually expect that everyone will agree with and adopt their ideas; they just need to pull hard enough that the Overton Window shifts in their direction.
</p>

<p>
奥弗顿之窗是叙事拉锯战中的结。任何一方的团队实际上并不期望每个人都会同意并采纳他们的想法;他们只需要用力拉，让奥弗顿窗朝他们的方向移动。
</p>

<p>
来源：<a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a>
</p></li>
</ul>
</blockquote>

<p>
就像<a href="https://movie.douban.com/subject/3025375/">奇异博士一</a>，Doctor Strange最后看了无数种结局也没有逆转的答案。最后自己进入那个结局，进入那个无限失败的结局的循环，结果拯救了世界。如果结局注定就是没有自由意志，这很重要么？就随它去吧。这正是我们一直在选择的自由。
</p>

<p>
一切，自有答案。Just learn, learn, learn all the time。
</p>

<p>
和这句话一样，其实今天写的都是“废话”。文章的标题更是“废话”到我自己都不会怎么点开，
</p>

<p>
但也许这才是《穷查理宝典》，查理·芒格真正牛逼的地方，他一生都在学习，一生都真正的践行了他的这些“废话”而不是和他们插肩而过，一直坚持的做到了许多人坚持不到的程度，以至于当他顺理成章随口说出这些的时候，那么的让许多人“不以为然”。
</p>
</div>
</div>
<div id="outline-container-orgfe30ffa" class="outline-2">
<h2 id="orgfe30ffa">Reference</h2>
<div class="outline-text-2" id="text-orgfe30ffa">
<ul class="org-ul">
<li><a href="https://book.douban.com/subject/33424487/">时间的秩序</a></li>
<li><a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a></li>
<li><a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a></li>
<li><a href="https://www.notboring.co/p/openai-and-grand-strategy">OpenAI &amp; Grand Strategy-notboring.co</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a></li>
<li><a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a></li>
</ul>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://www.vandee.art/2023-12-06-learn-all-the-time.html</link>
  <guid>https://www.vandee.art/2023-12-06-learn-all-the-time.html</guid>
  <pubDate>Wed, 06 Dec 2023 21:33:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[都是因为无聊]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb294f05">都是因为无聊</a></li>
<li><a href="#orgdfaeb03">《瓦尔登湖》梭罗</a></li>
<li><a href="#orgab2618e">《人生的智慧》叔本华</a></li>
<li><a href="#org402125b">真正的自由，是与孤独共舞</a></li>
<li><a href="#orge291d35">也正是因为无聊</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgb294f05" class="outline-2">
<h2 id="orgb294f05">都是因为无聊</h2>
<div class="outline-text-2" id="text-orgb294f05">
<p>
在罗翔老师这个视频的最后<a href="https://www.bilibili.com/video/BV1584y1v7AH/?is_story_h5=false&amp;p=1&amp;share_from=ugc&amp;share_medium=iphone&amp;share_plat=ios&amp;share_session_id=6A638284-7696-49A9-8E91-11D995CDA224&amp;share_source=GENERIC&amp;share_tag=s_i&amp;timestamp=1668484448&amp;unique_k=KsojvdJ&amp;vd_source=92184533e359726f138fee9650261f0f">【罗翔】“网课爆破”犯了什么法？<sub>哔哩哔哩</sub><sub>bilibili</sub></a>
</p>

<p>
他提出了一个观点：
</p>

<blockquote>
<p>
很多严重的罪行,它最初的动力都是无聊。那如何来抵制我们时常会生发的这种无聊感呢，
</p>

<p>
如何来让我们过得充实呢，这是我们一生所需要考虑的问题。
</p>

<p>
。。。。。。。
</p>

<p>
也能够时常拥有一种力量，来抵制我们内心的无聊。
</p>
</blockquote>

<p>
就从这些开始聊起吧。
</p>
</div>
</div>
<div id="outline-container-orgdfaeb03" class="outline-2">
<h2 id="orgdfaeb03">《瓦尔登湖》梭罗</h2>
<div class="outline-text-2" id="text-orgdfaeb03">
<p>
梭罗的这个小说其实说的是关于自然的事，是一个崇尚自然、崇尚自由之人所向往的精神生活，以及对当时时代背景下（那时美国正处于农业时代向工业时代转型的初级阶段，伴随着资本主义工业化的进程，在经济突飞猛进的势头下，也伴随着对财富和金钱的欲望于追逐。）一种生活方式的思考与追逐。
</p>

<p>
而在小说的「孤独」这一章中，
</p>

<p>
梭罗写到：
</p>

<blockquote>
<p>
这是一个美妙的黄昏，全身只有一个感官，每一个毛孔中都浸润着欢乐。 <b>我在大自然里以一种奇异的自由姿态来去，成了她的一部分。当我只穿衬衫，沿着布满石头的湖岸行走，天气虽凉，多云而且有风，也没有什么特别的东西吸引我，所有的元素都与我和谐相处。</b> 牛蛙鸣叫，宣告黑夜降临，夜鹰的乐音则乘着吹起涟漪的风从湖上传来。赤杨和白杨摇曳多姿，让我心生戚戚之感，以至于我几乎不能呼吸了；然而像湖水一样，我心中的宁静只有涟漪而没有激荡。和如镜的湖面一样，晚风吹起来的微波距离暴风雨还很远。尽管天色黑了，风仍然在森林中吹着，咆哮着，波浪还在撞击水岸，某一些动物还在用它们的乐音为别的生物催眠。但绝非完全都在休息。野性十足的动物并没有休息，现在正找寻它们的猎物；狐狸、臭鼬、兔子也正在原野上森林中游荡，却没有恐惧。它们是大自然的看守者——是连接一个个生气勃勃的白昼的环节。
</p>

<p>
等我回到屋子里，发现曾有访客来过，并且还留下他们的名片，或是一束花，或者一个常春树的花环，或用铅笔写在黄色的胡桃叶或者木片上的一个名字。不经常走入森林的人常把森林中的一小片什么东西一路上拿在手里把玩，有时故意，有时偶然，把它们全留下了。有个人剥下了柳枝的外皮，编织成一个戒指，丢在我桌上。我总能知道在我出门期间是否有客人来过，从弯倒的树枝或青草，或者从他们的鞋印可以看出来，而且通常来说，从他们留下的蛛丝马迹里我还可以推测出他们的年龄、性别和性格，比如掉在地上的一朵花，一把被拔下来又扔掉的草，甚至还有一直带到半英里外的铁路边才扔掉；有时，还残留着雪茄烟或烟斗味道。我常常还能从他的烟斗的香味，注意到60杆之外公路上这个行经的旅行者。
</p>

<p>
<b>然而我有时有这样的体验，在任何大自然的事物中，都能找出最甜蜜温柔、最纯真和鼓舞人心的朋友，即使是对于最愤世嫉俗的人和最忧郁的人也是如此。</b> 对于一个生活在大自然中而且还有感觉的人来说，不可能会有太过阴暗的忧郁。对于健康而纯洁的耳朵来说，暴风雨就是伊奥勒斯希腊神话中的风神。的音乐。没有任何东西有理由迫使一个单纯而勇敢的人产生庸俗的伤感。当我享受着四季的友爱时，我相信，任什么也无法把生活变成我沉重的负荷。今天洒在我的豆子上的轻柔细雨，使我一整天都待在屋子里，但这雨并不使感到我沮丧或抑郁，对于我也是很有好处的。虽然下雨不能让我出去给豆田松土，但比我锄地更有价值。如果下雨时间太长，会让地里的种子、低地的土豆烂掉，可它对高地的草还是有好处的，既然它对青草有好处，它对我也就会有好处。有时，我拿自己和别人作一番比较，觉得我比别人更得诸神的青睐，超过了我感觉自己应得的；就好像我有一张保证书和保单在他们手上，我的同胞们却没有，因此我受到了特别的指导和保护。我并没有自夸，可是如果可能的话，倒是他们抬举了我。 <b>我从不感到寂寞，也不会受到寂寞感的压迫，但是有一次，那是在我进了森林数星期后，有一个小时的时间，我产生了疑问，要过宁静而健康的生活是否应当有些近邻。独处是有点不愉快。与此同时，我意识到我的情绪有些轻微的失常了，并且似乎也预知我会恢复。</b> 当这些思想在我的思想中占据上风时，轻柔的细雨飘洒下来，我突然感觉到与大自然做伴是如此甜蜜如此受惠，就在这滴答滴答的雨声中，我屋子周围的听到的每一个声音和看到的每一幅景象都存在着无穷尽无边际的友爱，就像支持我的气氛，一下子把我想象中的有邻居的种种好处的思潮压下去了，从此，我就没有再想到过邻居这回事了。每一支小小松针胀大起来，充满了同情心，对待我如同朋友。我清楚地意识到，这里存在着我的同类，虽然我是在一般人所谓荒凉阴郁的处境中，然则那与我的血统最接近，并最富于人性的却并不是一个人或一个村民，所以我认为，再也不会有什么地方会使我觉得陌生的了——
</p>

<p>
“悲悼让悲伤的人未老先衰；
</p>

<p>
在生者的土地上，他们的时日无多。
</p>

<p>
托斯卡尔美丽的女儿啊。”
</p>
</blockquote>

<p>
这是梭罗关于独处，关于无聊的答案。
</p>

<p>
回归自然，在自然中洗涤自我，用纯净平静的内心去接壤土地、湖泊、动物。他已经成为了自然的一部分，也就不存在无聊与不无聊了。
</p>

<p>
天空、大地、湖泊从来都是孤独的，但它们包容，它们承载，它们就是孤独的参照物，也就不会孤独了。
</p>

<p>
“天行健，君子以自强不息。地势坤，君子以厚德载物。”
</p>

<p>
对于一个真正找到了自我，有着独立自我、独立人格的人来说，享受孤独，只是前菜了。在孤独和独处中，他只会越来越强大，而不会被空虚和欲望吞噬，更不会觉得无聊。
</p>

<p>
所以我们的皇帝喜欢自称：孤，寡人。孤寡孤寡孤寡。。。。
</p>
</div>
</div>
<div id="outline-container-orgab2618e" class="outline-2">
<h2 id="orgab2618e">《人生的智慧》叔本华</h2>
<div class="outline-text-2" id="text-orgab2618e">
<p>
在《人生的智慧》中的第7章，章节的名字就是：痛苦和无聊。
</p>

<blockquote>
<p>
第七章 痛苦和无聊
</p>

<p>
生活就是在这二者间强度不一的振荡。
</p>

<p>
一项最普遍的调查已向我们表明，人类幸福的两个敌人就是痛苦和无聊。更进一步说，如果我们足够幸运，能够远离其中一个，则会接近另外一个。事实上，生活就是在这二者间强度不一的振荡。究其原因，是这两极间存在着一种双重的对立：一重是外在的或客观的，一重是内在的或主观的。一贫如洗的境遇会引发痛苦；然而，一个人如果家财万贯，则会感到无聊。相应地，下层阶级要和贫困作无休止的斗争， <b>换个说法，就是与痛苦斗争；而上层阶级则时常要和无聊展开绝望的战斗。内在或主观的对立出自一个事实，即在个体之中，对疼痛的感受力和对无聊的感受力成反比，因为感受力是直接和精神力量成正比的。</b> 我要解释一下，通常来说，迟钝的头脑总与迟钝的敏感性相伴，没有什么刺激物能对迟钝头脑的神经产生影响，简而言之，头脑迟钝的人不会感到太多的痛苦和焦虑——无论这痛苦和焦虑事实上有多么严重或可怕。因而，智力上的迟钝就是印刻在无数面孔之上的“灵魂空虚”的根源，同时，这一精神状态会暴露于对外部世界各类琐碎细节持续而活跃的关注。这才是无聊的真正源头——不间断地渴求刺激，只为了找一个借口，好用某些事物填塞头脑与心灵。人们为达此目的而选择的那类事物毫无特别之处，能证明这一点的，包括他们所依赖的可悲的消遣方式、对社交之乐趣和聊天的看法，还有在门口传闲话的人以及在窗口目瞪口呆地凝视着窗外的人的数量。正因为内在的、心灵的空虚，人们才会寻求社交、消遣、娱乐和各式各样的奢华享乐，并由此走上挥霍与悲苦之路。没有什么比内在的财富——心智的财富——更能抵御这种悲苦了，因为心智的财富规模越庞大，留给无聊的空间就越狭小。用之不竭的思想活力啊，永远都在多种多样的自我与自然现象中寻找新的材料，并准备好根据这些材料打造新组合——这样就有了滋补心智的养料，除了较为放松的若干片刻，心智都可以借此远远超出无聊的范围。
</p>

<p>
但另一方面，这种高度的智力水平植根于高度的感受力、更强的意志力和热情之中，而这些素质的结合会产生被增强的情绪负荷、对一切精神乃至肉体痛苦的被放大的敏感，以致对阻碍更缺乏耐心、对干扰更为愤懑。 <b>所有这些趋势都因为想象的力量、思想的鲜明特性被加强——包括令人不快的思想。我说的这些，可以在不同程度上适用于心智能力这把宏大标尺的每一层级，从十足的蠢材到有史以来最伟大的天才，概莫能外。因此，无论是从主观还是客观的角度来看，一个人离某种痛苦的根源越近，他就离另一种越远。</b> 故而，一个人的天性会指引他尽可能地让自己的客观世界遵从主观世界，也就是说，他会采取最广泛的手段来对付自己最易遭受的那种痛苦。对智者而言，最重要的是力争摆脱痛苦和烦恼，追求安静和闲暇，从而过上宁静而节制的生活，尽可能减少与人的接触。因此，在有了一点所谓的人世经验以后，他就会选择过退休生活；甚至，他如果才智超群，还会选择离群索居。因为一个人自身拥有的越多，对别人的索求就越少——实际上，别人能对他提的要求也会越少。这就是高智商会让一个人变得孤僻的原因。诚然，如果智力的“质量”可以用“数量”来弥补的话，那么即使生活在这样一个伟大世界里也是值得的；不过很不幸，一百个傻瓜聚在一起也抵不上一个智者。
</p>

<p>
<b>一项最普遍的调查已向我们表明，人类幸福的两个敌人就是痛苦和无聊。</b>
</p>

<p>
心智的财富规模越庞大，留给无聊的空间就越狭小。
</p>

<p>
对智者而言，最重要的是力争摆脱痛苦和烦恼，追求安静和闲暇，从而过上宁静而节制的生活，尽可能减少与人的接触。
</p>

<p>
<b>在独处时，每个人都只能求诸自身的才智，其内在也因此暴露。在这人世间，一个人要么选择独处，要么选择庸俗，除此之外别无他途。</b>
</p>
</blockquote>

<p>
这些思考和思想即带着强烈的个人性格色彩，又不可避免的附加上历史的大环境和局限性。
</p>

<p>
我通常更关注的是这些思想家对于问题的思考，这些自由浪漫的思想本身。
</p>

<p>
盲目的把一些名人名言孤立于时代背景，甚至当作信条，就真的是盲目了。
</p>
</div>
</div>
<div id="outline-container-org402125b" class="outline-2">
<h2 id="org402125b">真正的自由，是与孤独共舞</h2>
<div class="outline-text-2" id="text-org402125b">
<blockquote>
<p>
社会就像一团熊熊燃烧的烈火——聪明人因懂得与之保持适当的距离而能够借其取暖；傻瓜则不是因为离得太近被火灼伤，就是因为抱怨火的灼热而躲得远远的，以致只能孤零零地忍受严寒的折磨。
</p>
</blockquote>

<p>
这是是叔本华的《一切都在孤独里成全》的结束语。
</p>

<p>
无聊和孤独是每个人必须要面对的阴暗面，空虚和欲望则是许多罪恶的源头。
</p>

<p>
自由不是放任，也当然不是无力的逃避，不是理所当然的肆无忌惮。恰恰相反，自由是束缚的。
</p>

<p>
自由从来都是有代价的，没有代价的自由自在只能叫做：自妄。
</p>
</div>
</div>
<div id="outline-container-orge291d35" class="outline-2">
<h2 id="orge291d35">也正是因为无聊</h2>
<div class="outline-text-2" id="text-orge291d35">
<p>
但无聊同样也是想象力的来源，人类进步的来源。
</p>

<p>
阿基米德洗澡的时候无聊，发现了浮力；
</p>

<p>
牛顿在苹果树下面无聊（有争议），发现了万有引力；
</p>

<p>
伽利略对着天空无聊，发明了天文望远镜进一步证实了哥白尼的日心说；
</p>

<p>
达尔文喜欢对着动植物无聊，提出了自然选择；
</p>

<p>
爱因斯坦对着时间无聊，想搞清楚时间到底是什么，提出了相对论；
</p>

<p>
尼古拉·特斯拉对着黑夜无聊，做出了第一个交流电发动机（本人讨厌爱迪生）；
</p>

<p>
人对着木头无聊，点着了火。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-philosophy.html">Philosophy</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-readings.html">Readings</a> </div>]]></description>
  <category><![CDATA[Philosophy]]></category>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Readings]]></category>
  <link>https://www.vandee.art/2023-11-24-something-about-boring.html</link>
  <guid>https://www.vandee.art/2023-11-24-something-about-boring.html</guid>
  <pubDate>Fri, 24 Nov 2023 17:23:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[富有的概率]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf3051ee">薛定谔的富有</a></li>
<li><a href="#org2a6d3d1">提升自己是最大的储蓄</a></li>
<li><a href="#orge2e117b">Reference</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgf3051ee" class="outline-2">
<h2 id="orgf3051ee">薛定谔的富有</h2>
<div class="outline-text-2" id="text-orgf3051ee">
<p>
做梦中彩票这种事，我天天也在想，正好这两天看到了这些，挺有共鸣。<a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a>、<a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 &rsquo;不断变化的世界秩序&rsquo;动画完整版 40分钟【中英精校】<sub>哔哩哔哩</sub><sub>bilibili</sub></a>
</p>

<p>
从经济学角度来思考问题，确实可以让现实的问题简单一些，它不像哲学那样弯弯曲曲，直接的经济学模型带来直接的计算结果。
</p>

<p>
<a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a>里作者说到：
</p>

<blockquote>
<p>
fortune 有幸运也有财富的意思，实际上这两个词也基本划等号。
</p>

<p>
&#x2026;
</p>

<p>
众所周知我们的人生就是一场概率的游戏，这个说法我都说过无数次了。天降横财、一夜荣华、时来运转的概率和买彩票差不多。相对于这些不确定的事情，我们能掌握的可能是那些收益率低于 5% 的事情。这些事情可大可小，可以跟金融相关也可以跟自身提升相关，总之有正向收益的事情，你都可以把它理解成**增加确定性**的事情，也即增加概率的事情。比如：&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
如果把变富看作一场赌博，那么我们应该赌概率大的事情，而不是收益率大的事情，赌长期的事情，而不是短期的事情。其实对于每个普通人，只要不去做一些突破自己认知但又完全无法衡量风险的事情，基本上是不会回退的。那么，你变富就是一件确定的事情。也许选择比努力重要，但努力决定了确定性的大小。
</p>

<p>
所以，慢慢变富其实是一种复利，既然是复利，那它的增长就是指数型的。只要我们每天还在进步，那我们缺的就不是那些让人焦虑的快速致富的机会，而是时间。一口吃不成胖子，但一口一口吃，总有一天会胖的。我们也许要做的是尽量延长自己玩这个长期游戏的时间。
</p>

<p>
&#x2026;
</p>

<p>
很大程度上，变富实际上是认知在增长，也许等我们认知水平到了一定程度，财富自然而然就来了。而且，这个过程会是非常有趣的，会是一种享受，持续的增长会释放内啡肽，过快的刺激只会带来多巴胺。
</p>
</blockquote>

<p>
fortune 有幸运也有财富的意思，实际上这两个词也基本划等号。许多复杂的谜题的答案，往往就是题面本身。
</p>

<p>
随着了解初步的量子力学、决定论、宇宙目的论等概念，我逐渐对一些观点有了倾向性：
</p>

<ul class="org-ul">
<li>对于生命本身而言，它确实可以说是有目的性的，细胞分裂是你无法阻止的生命的脉动，贪婪的基因其实只有一个目的，让自己无限复制下去。但对于宇宙和物质而言，或许就是回到大爆炸的原点，无限膨胀再坍塌、无限收束、压缩。还有在诺兰电影<a href="https://movie.douban.com/subject/30444960/">信条</a>里被大家熟知的热力学第二定律，熵增加原理。</li>
<li>每时每刻发生的事情，都是概率。用这种极其不确定的概念来体会现实中看似确定发生的事情，挺美妙的。最近还下单了个龟壳，学学周文王。**在不确定性中寻求希望中的确定性**，也就是人类一直在做的事情。</li>
</ul>

<p>
所以其实每个人都有富有的可能性，只是你还没有到达“富有态”🤣，可能性的大小不一样罢了。我们应该做的也是其实能做到的，就是增加这种可能性的大小。
</p>
</div>
</div>
<div id="outline-container-org2a6d3d1" class="outline-2">
<h2 id="org2a6d3d1">提升自己是最大的储蓄</h2>
<div class="outline-text-2" id="text-org2a6d3d1">
<p>
<b>很大程度上，变富实际上是认知在增长</b> ，也许等我们认知水平到了一定程度，财富自然而然就来了。
</p>

<p>
我一直很赞同这个观点。之前看到一句话：你只能赚到你认知范围以内的钱，也是一个意思。fortune，真正的富有一定是两方面的：财富富有和精神富有，也真就和字面一样，是种幸运。应该没有人会讨厌活着拒绝真正的&rsquo;‘富有“，但正如罗翔在<a href="https://www.bilibili.com/video/BV1j84y1D7pP">【麦家x罗翔x衣戈猜想】人生海海，错了再来</a> 里所说，正如一个智者所说：名利，它可能追逐的，就是那些并不在乎它的人。
</p>

<p>
富有从来不是真正富有的人本来的目的，它是伴随的一个概率。该有的都有了的时候，你想不富有其实也挺难的，名利会追逐你，甩都甩不掉，甚至反过来吞噬你。当所有的导向富有的概率事件都发生了的时候，最后那一点别人没有的”运气“，才是fortune真正到来的时候。当然这个运气，也可以说成是你的实力、命运，或者缺少这个运气的人的抱怨和忌妒。
</p>

<p>
<b>提升自己就是最大的人生储蓄，最大的财富。</b> 当然富有了之后，它是真理，富有之前，它是一坨shit。
</p>

<p>
瑞达利欧的《原则》，看了一点开头就一直放着了，现在确实还看不懂。<a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 &rsquo;不断变化的世界秩序&rsquo;动画完整版 40分钟【中英精校】<sub>哔哩哔哩</sub><sub>bilibili</sub></a>里提到的经济周期，宏观的经济运行规律，是从历史的不确定性中找到确定性，瑞达利欧总结出这些，称作原则。
</p>

<p>
但历史的进程和拐点，往往来自于那些不确定性，往往是这些不确定的人做出的不确定的事带来新的稳定与秩序。乔布斯不去”剽窃“施乐的图形界面，就不会有现在的苹果、比尔·盖茨不去接着”剽窃“苹果也不会有现在的微软、余华也想不到自己找了一个文化馆的工作到后来写出了《活着》、爱因斯坦质疑牛顿经典力学提出相对论、马云去了一趟美国回来忽悠了一帮朋友创建了阿里。
</p>

<p>
你以为我接下来会说，所以我们要向上面说的那些人那样啥的啥的，并不是，这些历史的结果和他们并没有什么绝对的联系。
</p>

<p>
我今天一出门，无非两个结果，出太阳了，还是出太阳了。
</p>
</div>
</div>
<div id="outline-container-orge2e117b" class="outline-2">
<h2 id="orge2e117b">Reference</h2>
<div class="outline-text-2" id="text-orge2e117b">
<ul class="org-ul">
<li><a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a></li>
<li><a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 &rsquo;不断变化的世界秩序&rsquo;动画完整版 40分钟【中英精校】<sub>哔哩哔哩</sub><sub>bilibili</sub></a></li>
<li><a href="https://www.thepaper.cn/newsDetail_forward_24958915">作家余华已死，网红余华活着</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Thinking]]></category>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/2023-11-20-get-rich-slow.html</link>
  <guid>https://www.vandee.art/2023-11-20-get-rich-slow.html</guid>
  <pubDate>Mon, 20 Nov 2023 14:54:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[读或听或看？]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9967779">再聊“读书无用”</a></li>
<li><a href="#org4fa5bd0">扁平化信息or立体化信息</a></li>
<li><a href="#org889be6b">最后</a></li>
</ul>
</div>
</nav>
<p>
再给自己开个小坑，也是记录一下从RSS订阅到现在的信息输入方案给自己的反馈。
</p>

<p>
去年从RSS订阅开始，是一个实验，想看看文字信息阅读和视频、音频信息之间对于我来说，哪个效率更高，最终是想得出一个文字信息和视频信息之间的权重，每年再根据想了解的领域微调，作为一个信息输入模板固定下来。
</p>

<p>
近一年，基本没有过多的主动视频信息的摄入，感觉也还挺不错，有种吃完大荤，涮点青菜的感觉，很清爽。
</p>
<div id="outline-container-org9967779" class="outline-2">
<h2 id="org9967779">再聊“读书无用”</h2>
<div class="outline-text-2" id="text-org9967779">
<p>
Andy 的 <a href="https://andymatuschak.org/books/">Why books donʼt work   Andy Matuschak</a> (就是 <a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a> 那个 Andy)，大致讲了这么个事：
</p>

<blockquote>
<p>
<b>为什么 “读书无用”</b>
</p>

<p>
<a href="https://andymatuschak.org/books/">Why books donʼt work</a> 其实主要探讨了为什么书籍和演讲作为传统的知识传递媒介的局限性。
</p>

<p>
作者首先没有否认书籍的重要性，但我们扪心自问读过的很多书，真的能吸收的又有多少呢？可能读完的时候认为自己能把书的内容大致总结一遍，过段时间可能只能记得一些零碎的句子，再过一段时间可能不看目录根本想不起这本书主要讲什么。
</p>

<p>
紧接着作者开始从 “为什么讲座无用” 来侧面解释 “读书无用”。作者认为这两种媒介都有问题，因为都犯了 <b>transmissionism</b> （直译过来，传输主义？）的错误，
</p>

<ul class="org-ul">
<li>讲座，指望着听众从头到尾听到每句话，然后就能完全理解演讲者的观点了</li>
<li>读书，指望着读着通过阅读句子来理解知识，作者用文字描述一个知识，读着从头到尾读过，就理解了。</li>
</ul>

<p>
这些都是不科学的，因为它们没有调动起我们人类真正掌握知识的方式 —— 即我们认知的过程。
</p>

<p>
<b>to understand something, you must actively engage with it</b>.
</p>

<p>
Source: <a href="https://geekplux.com/newsletters/41">为什么读书无用 -#41 - GeekPlux</a>
</p>
</blockquote>

<p>
信息输入的载体，还是得量体裁衣，关键在于认知的过程。也就是 Andy 所说的，to understand something, you must actively engage with it.（2024-10-28-add：Andy 算是我 PKM 和笔记的启蒙导师了，现在的 tiddlywink 就是仿造 Andy 个人网站的翻页效果。）
</p>

<p>
<b>对于自主学习而言：</b> 扁平化的信息，简单来说即文字信息，更有利于调动自主的学习。
</p>

<p>
<b>对于知识吸收效率而言</b>: 立体化的信息，无疑在短期理解和吸收方面，效率更高。视频、音频的载体包含更多更直接的信息，更有利于信息的直接吸收。
</p>
</div>
</div>
<div id="outline-container-org4fa5bd0" class="outline-2">
<h2 id="org4fa5bd0">扁平化信息or立体化信息</h2>
<div class="outline-text-2" id="text-org4fa5bd0">
<p>
先简单把文字信息定义为扁平化信息，视频、音频等信息定义为立体化信息。
</p>

<p>
设定大前提：信息传播是一定有损耗的。
</p>

<p>
对于信息传播者来说，立体化的信息载体无疑可以包含更多信息的元素，对于信息接受者来说，当然理论上就可以接收到更多的信息。问题是出现在信息接收之后，也就是调动认知的这个过程。
</p>

<p>
<b>信息损耗率+认知调动率 = 新认知迭代率</b>
</p>

<ul class="org-ul">
<li>对于认知调动，比较明确：就是要做自主的信息再输出, to understand something, you must actively engage with it.</li>

<li>而对于信息损耗率，这个就因人而异了，如果听书和看视频对于你来说效率更高，一下就能记住很多信息，那么它对于你来说就是一个优秀的形式。</li>
</ul>

<p>
而对于我来说，现阶段，我更喜欢文字信息，也就是扁平化的信息。（2024-10-28-add：现在我已经体会到文字信息带来的好处了，<a href="https://clip.vandee.art/2024/10/writes-and-write-nots---%E5%86%99%E4%BD%9C%E8%83%BD%E5%8A%9B%E7%9A%84%E5%88%86%E5%8C%96/index.html">2024-10-28-Writes and Write-Nots - 写作能力的分化 - Vandee&rsquo;s Clip</a> ， <a href="https://wiki.vandee.art/#%E6%96%87%E5%AD%97%E9%98%85%E8%AF%BB%E7%9A%84%E7%89%B9%E6%9D%83">文字阅读的特权</a>）
</p>

<p>
原因有几点：
</p>

<ul class="org-ul">
<li>文字所包含的直接信息更少，但间接信息更多
<ul class="org-ul">
<li>直接信息是指，文字的表面意思。比如最近在看的资本论，原文是真的拗口，能直接理解到的信息不多。</li>
<li>间接信息是指，文字所想表达的信息。还是说资本论，马克思的一个小概念后面，可能都可以写一篇论文了，想要理解吸收这些概念，自然就会自主的去查。</li>
<li>文字信息所呈现给你的很单一很具体，因此注意力的损耗相对会低一些。没有视频、音频信息的介入，我所面对的就是纯粹的思想提炼，和自己的思维碰撞。</li>
</ul></li>
<li>视频所包含的直接信息更多，但间接信息更少
<ul class="org-ul">
<li>看视频的时候，注意力不会完全集中在实质内容上，视频会让你分散一些注意力在它这个形式本身，可能是这个up长得很帅很好看，或者是视频效果很炫酷等等。这些声音和图像不会完全是和你想输入的内容完全相关，这是一部分注意力的损耗，视频的间接信息被这些占用了，而图书文字就是一张白纸。</li>
<li>视频更像是一个窗口，我觉得这和把书和文字捧在手上的感觉还是很不一样的
<ul class="org-ul">
<li>比如，打开一个北京大学的视频课，它更像是一个信息的窗口在你的对面，始终感觉隔着点什么。我调动的是视觉听觉和很多联动的反应来应对这个信息的窗口。时间久了，它好像更像是一个在发生的事件。</li>
<li>而看书的时候，我更自由一点,可能感觉跟实在点吧，这本书是我的。和视频对比，更让我感觉这是一个纯粹学习的过程。它不是一个事件，而是我本来就在思考的海洋，现在汇入了另一个思考的溪流。</li>
<li>我个人更喜欢这种感觉，你也可以说看书和视频对于你而言，看书更像是一个事件。</li>
</ul></li>
</ul></li>
</ul>


<p>
听书这个形式另说，比较特殊。本质上是信息的呈现，从视觉变成了听觉。
</p>

<p>
很多人没有整块独立下来的时间来安静的阅读，碎片化的时间听个书，是个很好的“看书”的方式。在心力不是足的情况下，就不应该选择要消耗很多心力的形式，这个时候，放松的信息输入形式，更好。不足的地方可能在于，内容的结构和体系不如文字直接，文字有直接的提纲和标题。但，在认知调动的时候可以自主总结，或者逻辑思维足够的情况，听下来也就把大纲固定下来了。
</p>
</div>
</div>
<div id="outline-container-org889be6b" class="outline-2">
<h2 id="org889be6b">最后</h2>
<div class="outline-text-2" id="text-org889be6b">
<blockquote>
<p>
For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin.
</p>

<p>
<b>对我来说，做笔记有助于确保我真正认真思考其中的内容。如果我不同意这本书，有时需要花很长时间才能读完这本书，因为我在页边空白处写了太多内容</b>
</p>

<p>
— <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a>
</p>
</blockquote>

<blockquote>
<p>
Text is a form of communication. If something, or someone wrote it for us, certain decisions were made along the way to convey the goal that we gave. Out of the many paths possible to crystallize that piece of knowledge into a piece text, one of them was chosen.
</p>

<p>
文本是一种交流形式。如果有什么东西，或者有人为我们写了它，那么我们就会在整个过程中做出某些决定来传达我们给出的目标。将知识结晶成一篇文本的多种可能途径中，我们选择了其中一条。
</p>

<p>
Source: <a href="https://lopespm.com/notes/2023/07/02/writing-as-a-form-of-thinking.html">Writing as a form of thinking - Byte Tank (lopespm.com)</a>
</p>
</blockquote>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> </div>]]></description>
  <category><![CDATA[Thinking]]></category>
  <link>https://www.vandee.art/2023-09-18-read-or-listen.html</link>
  <guid>https://www.vandee.art/2023-09-18-read-or-listen.html</guid>
  <pubDate>Mon, 18 Sep 2023 17:58:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[蓝色药丸还是红色药丸？]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgaee8fee">虚拟摄影和艺术</a>
<ul>
<li><a href="#org7708b91">摄影概念的内涵与外延</a></li>
</ul>
</li>
<li><a href="#org1ed61d2">黑客帝国</a></li>
<li><a href="#orgd00eee7">什么是虚拟？什么才是现实？</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgaee8fee" class="outline-2">
<h2 id="orgaee8fee">虚拟摄影和艺术</h2>
<div class="outline-text-2" id="text-orgaee8fee">
<p>
最近还是入坑了switch，玩了一下塞尔达，在爬山开图的时候，看到了许多绝美的风光，就习惯性的来了两张。
</p>


<figure id="org223101c">
<img src="https://s2.loli.net/2023/02/23/mZQ4kRHxwVliBYr.jpg" class="img" width="60%" height="60%">

</figure>


<figure id="org6c53b3d">
<img src="https://s2.loli.net/2023/02/23/TvK1DtIBQuFicpw.jpg" class="img" width="60%" height="60%">

</figure>



<p>
游戏摄影，或者说是虚拟摄影，这类的概念，就像无反对单反、数码摄影对胶片的挑战一样，以后一定会挑战传统的摄影理念。AI随着chatGPT的公测，让我们更近距离的体验到了AI对生活、行业、技术的改变。
</p>

<p>
PS等各种后期视频、图片软件，也都加入了AI处理的功能。技术的发展使得摄影后期越来越便利，创作的多样性也不可同日而语，更不谈AIGC（AI Generated Content）的事了。现在大量的插图、封面图，都是由AI自动生成。
</p>

<p>
<b>摄影后期和前期的界限越来越模糊，似乎摄影前期的重要性，这个摄影的根本正在被人们忽视。</b>
</p>
</div>
<div id="outline-container-org7708b91" class="outline-3">
<h3 id="org7708b91">摄影概念的内涵与外延</h3>
<div class="outline-text-3" id="text-org7708b91">
<p>
数码摄影的作品载体（不冲印的前提下）简而言之就是：图片格式。JPG,PNG,GIF,RAW。这么看，摄影作品和游戏摄影、AI做图（虚拟摄影）本质上区别不是很大。
</p>

<p>
所以从形式上来说，摄影作品这个概念的外延现在已经非常大了，最主要的延伸就体现在作品的载体上，许多图片形式的作品，也都可以包含在摄影作品这个概念的外延之中。
</p>

<p>
<b>而摄影这个概念的内涵，我认为是至少包括四个部分的：</b>
</p>

<p>
<b>摄影行为主体，摄影器材，摄影作品载体，摄影作品呈现。</b>
</p>

<p>
即：由谁，通过什么固定图像和色彩的方式，以什么形式保存（胶片、数码），以什么形式呈现（冲印，以网络形式上传）。
</p>

<p>
摄影主体是不是一定要是人这个问题，已经摆在我们面前了，我个人倾向于折中说：有人的参与就行。
</p>

<p>
或者换句话说，我们通常所说的摄影，一般已经默认为摄影主体是人了，这显然缩小了摄影作为一个艺术概念的外延。进一步说，这又不得不牵扯到另一个问题：对于艺术作品而言，我们人类，到底是作为一个裁判，即审美规则的制定者，还是作为一个参与者即参与到整个宇宙，或是整个大自然的评价标准中去。
</p>

<p>
而这正是艺术的价值，这个根本的问题，这个话题目前我还展开不了。但我的观点是：艺术的绝对价值是可以脱离人的意识和标准而客观存在的。这些在宇宙、自然中已经存在的秩序和绝对的美，是不因人的意识改变而改变的。我们所做的是发现美，表达美，在这些客观存在的根本的“秩序美”之上创造我们人类文化的“艺术美”。
</p>

<p>
<b>如果说艺术是一个形式，那美就是艺术内容的本质。</b>
</p>

<p>
打个比方：另一个外星文明，也有着他们的对于艺术的定义和表述，用他们的语言和行为来表达“美”这个概念。即自然中的风光、各种自然现象， <b>我们不是这些物质元素的初始创造者，我们是诞生于这些物质元素本身的发现者和探索者</b> 。我们创造的文化理念、艺术理念、人类的文明，至少目前还脱离不了宇宙秩序这个根本的规则，即我们通常所说的美这个概念一样是有前提的。这些概念放到宇宙的尺度内，又是另一回事了。
</p>

<p>
<b>所以，我也一向对现有的我们人类文明中关于什么是美的，什么不是美的，不那么在意。</b>
</p>

<p>
美的标准一定不会是一恒不变的，至少人类文明发展到现在，已经经历了太多次艺术审美的变革（人文主义发展之前，文艺复兴之前，艺术大多是宗教体裁的，人类思想解放之后才更多的出现描绘人自身表达的艺术作品。）这些变革有思想解放带来的，也有技术发展带来的（绘画、摄影、到现在的AIGC）。古人仰望天空看星星，我们现在探索宇宙，看星系。
</p>

<p>
不变的是美的本质。它以后还会被不同的主体表达，以各种不同的形式呈现出来。
</p>

<p>
不管如何去定义美这个概念，我认为美是包含在「绝对秩序」这个概念之中的：对称、规则的几何图形等这些元素排列的形式和方式，会给人或者其他生物带来 <b>稳定感、和谐感、平衡感</b> ，无论是视觉上的还是体感上的。简而言之，让人感到舒适的，你就会觉得它美。这个概念在《艺术与视知觉》这本书里有详细的讲解。
</p>

<p>
对于人类而言，至少有一点是肯定的：美寄托着人类对于美好未来的向往和憧憬，美是一种希望。
</p>

<p>
说回摄影。
</p>

<p>
<a href="https://mp.weixin.qq.com/s/c2UKBOrZ8WU7Km6U2i48LQ">徐淳刚：中国摄影向何处去 (qq.com)</a>这篇文章里面说到了一个概念：摄影的本体语言。
</p>

<blockquote>
<p>
今天的中国摄影，没有自己的本体语言。一切都是照搬国外。国外有新纪实，我们照搬新纪实，国外有景观，我们也照搬景观，始终走在西方后面。摄影归根到底是一种表达的方式，一种和自身发生真切关系的语言。我们可以从郎静山的例子，看清中国摄影的语言探索。郎静山的摄影，虽然是画意摄影，远远滞后于西方当时的直接摄影，但是郎静山的可贵之处在于他想走出一条“中国摄影”的路，这就牵扯到摄影的本体语言的问题。
</p>

<p>
<b>摄影技术、相机、银盐、数码，所有的东西都是西方的，怎样才能有自己的本体语言？郎静山的摄影是理想化的，他想着把中国绘画融入摄影。但如何走出中国摄影的道路？如何让摄影的语言成为中国摄影的语言？尽管郎静山的摄影有很大的局限性，但他的实践意义重大。</b>
</p>

<p>
关于中国摄影的本体语言，郎静山说了一句话，一语中的。他说：“总是跟在人家后面跑，即使拍得再好，拍得再像，也是跟人家学的。”所以他想走中国摄影自己的路，这个方向无疑是对的。但郎静山的摄影后继无人。他想去讲求古典主义，可是我们的生活和理念已经完全现代化，所以中间的鸿沟非常大，很难做到中西合璧。这是郎静山的困境，一种严峻的美学困境，也是我们的真实困境，一种文化传承与缺失的困境，传统与现代的困境。
</p>

<p>
到底什么是摄影的本体语言？ <b>摄影的本体语言不是指技术性的语言，它是指根本性的语言，表现的最终的本质是什么样的</b> 。摄影是西方的，为什么要说郎静山，就是因为他有意识地在思考中国摄影的本体语言，不按照西方人的方式去拍。郎静山在思考摄影的本体语言，这个在过去的摄影师中是绝无仅有的。现在中国新锐摄影师的作品，别人一写文章，就说国外的摄影师也拍过，那个摄影师也拍过。我们没有自己的本体，借鉴了别人的本体。摄影的本体语言最终是一种文化的、本质的东西，是一个最高理念的东西。中国摄影没有自己的本体语言，会始终被牵着鼻子走，甚至会在世界摄影的范围内被淘汰。
</p>
</blockquote>

<p>
我认为这个概念侧重点是表现形式，摄影内容的表现形式，美的标准，美的表现形式。
</p>

<p>
关于这个问题的看法，上面已经说的很多了。
</p>
</div>
</div>
</div>
<div id="outline-container-org1ed61d2" class="outline-2">
<h2 id="org1ed61d2">黑客帝国</h2>
<div class="outline-text-2" id="text-org1ed61d2">
<p>
接着艺术的表现形式这条线往下说。摄影当然只是艺术表现形式里很小的一个了，也是很年轻的一个。
</p>

<p>
今天主要想思考的是，虚拟与现实的问题。
</p>

<p>
说到这个，不得不先扯一下黑客帝国。这是我最喜欢的科幻电影之一了。和一样超前的终结者、还有大佬级别的星际穿越不同，和可帝国里夹带着许多哲学的思考。它将人与AI，虚拟与现实等一些主题借着这个故事，表现的太好了。插管接入虚拟世界这个设定实在是太巧妙了。电影名字名字也起的好，The Matrix，中文名就少了许多哲学的韵味。
</p>

<p>
感兴趣的可以看看这个<a href="https://www.bilibili.com/video/BV1gf4y117cz/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">【培根悖论】深度回顾世纪之交最佳科幻系列《黑客帝国》<sub>哔哩哔哩</sub><sub>bilibili</sub></a>，豆瓣上也有许多很有想象力的解读，<a href="https://movie.douban.com/subject/1291843/">黑客帝国 (豆瓣) (douban.com)</a>。
</p>

<p>
最有代表性的一定是 Morpheus 让 Neo 选药丸这个场景了：
</p>


<figure id="org42120b8">
<img src="https://s2.loli.net/2023/02/23/D2786pQHgAqERVX.jpg" class="img" width="60%" height="60%">

</figure>

<p>
这两个名字也是有寓意的（网络摘录）：
</p>

<blockquote>
<p>
Neo：
</p>

<p>
Neo有两层意思，neo是希腊语里的&ldquo;new&rdquo;，他将带领我们开启新的篇章。另外Neo其实还是一个anagram，即变位词，由颠倒字母顺序而构成的词。Neo是one的变位词。Neo is the One。Neo就是那个唯一，那个救世主。
</p>

<p>
Neo本名Thomas A·Anderson，从希腊语角度考虑的话，Thomas有&ldquo;twin&rdquo;和&ldquo;leader&rdquo;的意思。
</p>

<p>
Morpheus:
</p>

<p>
人物原型出自尼尔·盖曼大神的《Sandman》同名人物。Morpheus这个词表示The God of dreams,是希腊神话里掌管梦的神。
</p>
</blockquote>

<p>
这些神话的元素，让本身就有很浓哲学内核的电影更有美感了。
</p>

<p>
今天想说的是：虚拟和现实的界限，随着科学技术的发展，一定会越来越模糊。
</p>

<p>
虽然元宇宙凉了，Facebook 推的 Meta，凉的一塌糊涂，但还记得刚开始由比特币、去中心化、WEB3 这些概念衍生出的元宇宙被吹的有多火么。正如现在的 chatGPT。AI 的革命或许真的就不远了。<a href="https://www.bilibili.com/video/BV1Cd4y1c7GR/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">人类现在想突破宇宙这个尺度的限制，可能真的得改造自己的生物属性了</a>。
</p>
</div>
</div>
<div id="outline-container-orgd00eee7" class="outline-2">
<h2 id="orgd00eee7">什么是虚拟？什么才是现实？</h2>
<div class="outline-text-2" id="text-orgd00eee7">
<p>
我们有句老话，眼见为实，耳听为虚，现在眼见真的不一定是实了。关于物质决定意识还是意识决定物质这个问题上，我是坚定的唯物主义者。
</p>

<p>
当虚拟现实眼镜真的可以做成隐形眼镜的大小，我们人类将迎来全新的世界。仅仅通过视觉，我们就必须得重新定义什么是现实，什么是虚拟。
</p>

<p>
以后一定是虚拟叠加现实的世界，因为现在已经是如此了。社交软件只不过没有被虚拟现实化，元宇宙因为技术的瓶颈，还不能有质变，这些社交软件的账号，就是我们在互联网上的另一个分身，另一个我们，我们一直在用虚拟与现实沟通。（2024-10-28-再编辑：在这个<a href="https://wiki.vandee.art/#Google%20%E5%89%8D%20CEO%20%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E6%96%BD%E5%AF%86%E7%89%B9%E8%BF%91%E6%9C%9F%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%20CS323%20%E8%AF%BE%E5%A0%82%E4%B8%8A%E7%9A%84%E8%AE%BF%E8%B0%88">笔记</a>笔记里我又想到了同样的事。）
</p>

<p>
不难想象这样一个全新的虚拟与现实交融的世界：
</p>

<p>
存在着一个类似终结者里天网的全球联网人工智能系统，它接入了我们生活的方方面面。我们带上VR设备，各种新的移动终端，VR百度地图导航，实时在视网膜上显示。道路名称，交通状况，店铺信息，一目了然。然后路上碰到一家新开的煎饼果子店，摊位信息上显示着今天老板卖了多少个煎饼果子，
</p>

<p>
老板的头上还显示着他今天刚更新的朋友圈：这个月生意不太行，生活好难，加油！但是刚在天网商城买了一套虚拟衣服，就是今天身上的这件“梵高向日葵”，真的好看！哈哈。
</p>

<p>
于是你也登录了天网商城，领取了连续签到的天网币，看了眼天网账户的余额。边等着果子，边逛着网店。逛着逛着，你预设的5条最快上班线路中的一条，发来提示，公交还有10分钟到站。
</p>

<p>
虚拟现实带来的伦理、道德、法律问题一定会很多，但我也真的很期待这样的世界。
</p>

<p>
所以如果是这样，什么是虚拟，什么又是现实呢？
</p>

<p>
<b>你会更想带上这个VR眼睛看到自己想看到的世界，还是不带眼镜，看着其他都带着眼镜的人看着你。</b>
</p>

<p>
如果是这样，对于你来说，不带眼镜就真的就真实了么？
</p>

<p>
那个时候，你会选择蓝色药丸还是红色药丸呢？
</p>

<p>
<a href="https://zhuanlan.zhihu.com/p/60958735">“梦是欲望的满足”，这句话是弗洛伊德在《梦的解析》中最核心、最重要的结论。</a>
</p>

<p>
虚拟是现实的映射，没有黑也就无所谓白，
</p>

<p>
影也本就是是光的一部分，没有了影就感受不到光的力量。
</p>

<p>
这也是我喜欢摄影的原因了，
</p>

<p>
按下快门的一瞬间，
</p>

<p>
虚拟和现实相互映射，就随着那一声让人上瘾的咔擦声，链接了。
</p>

<p>
链接着我们对美，以及美好的想象。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-philosophy.html">Philosophy</a> <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Philosophy]]></category>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/2023-02-23-blue-or-red.html</link>
  <guid>https://www.vandee.art/2023-02-23-blue-or-red.html</guid>
  <pubDate>Thu, 23 Feb 2023 17:40:00 +0800</pubDate>
</item>
</channel>
</rss>
