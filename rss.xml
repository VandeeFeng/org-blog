<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Vandee's Blog]]></title>
<description><![CDATA[Vandee's Blog]]></description>
<link>https://www.vandee.art/</link>
<lastBuildDate>Fri, 25 Oct 2024 04:11:07 +0800</lastBuildDate>
<item>
  <title><![CDATA[我的第一个 org 博客]]></title>
  <description><![CDATA[
<b>AI摘要</b>
<p id="aitext">正在生成中……</p>
<p id="ai-output"></p>
<br>
<div id="outline-container-orge25499c" class="outline-2">
<h2 id="orge25499c">一</h2>
<div class="outline-text-2" id="text-orge25499c">
<p>
从 Jekyll 到 Hexo，再到 Hugo，已经忘记了为什么开始写博客了。
</p>

<p>
随着对 Emacs 的使用，开始理解为什么之前看到有人用 Emacs 记录了自己的一生，org-mode 太好用了。
</p>

<p>
我也不是一个前端程序员，对前端的设计兴趣也不大，也不需要一个炫技的页面来展示。一直在说回归本质，stay simple，在博客这点上，我就一直弄的越来越复杂。
</p>

<p>
这个博客回归网页最基础的框架，只有 HTML，CSS，搜索是 JavaScript，然后就没有其他了。
</p>

<p>
形式和内容一直是分不开的，但形式对我来说早就变得越来越不重要。我不敢说自己现在已经到了一个什么特别的境界，但每天我都能感受到我和自然界，万物之间的交融越来越自然了。
</p>

<p>
这篇的所有文字都是在 Emacs 里用 org-mode 写的。
</p>


<figure id="orgf2b48e0">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-blog.png" alt="org-blog" class="img" width="50%" height="50%">

</figure>
</div>
</div>
<div id="outline-container-orgcbd87c0" class="outline-2">
<h2 id="orgcbd87c0">二</h2>
<div class="outline-text-2" id="text-orgcbd87c0">
<p>
无意中发现了这个： <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> ，可以从 org 文档生成 HTML 文件，简化了 org-publish 的流程。
</p>

<p>
然后发现了这个 <a href="https://github.com/chenyo-17/org-static-blog">chenyo-17/org-static-blog: Here hosts my org static blog</a>，CSS 后面再慢慢改吧。
</p>

<p>
之前的博客，还是可以通过：<a href="https://hugoblog-bxc.pages.dev">https://hugoblog-bxc.pages.dev</a> 来访问。
</p>

<p>
新的博客地址还是 <a href="https://www.vandee.art">https://www.vandee.art</a> , 也可以通过 <a href="https://x.vandee.art/blog">https://x.vandee.art/blog</a> 来访问。
</p>

<p>
回顾了一下这几年写的东西，那些记录的点滴穿珠成线，就像在漆黑无边的宇宙里，一个个闪光的思维点按照自然本身的秩序和规律联结在一起，一直延伸到现在。
</p>

<p>
准备整理整理，陆续发在新博客里。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-blog.html">Blog</a> </div>]]></description>
  <category><![CDATA[Blog]]></category>
  <link>https://www.vandee.art/2024-10-24-my-first-org-blog.html</link>
  <guid>https://www.vandee.art/2024-10-24-my-first-org-blog.html</guid>
  <pubDate>Thu, 24 Oct 2024 15:04:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[用GitHub仓库做书签和AI摘要-流动知识检索]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf26da69">GitHub 书签</a></li>
<li><a href="#orgf6034d2">从GitHub书签到页面</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgf26da69" class="outline-2">
<h2 id="orgf26da69">GitHub 书签</h2>
<div class="outline-text-2" id="text-orgf26da69">
<p>
看到了<a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引 - Nekonull&rsquo;s Garden</a>这篇文章，思路很值得借鉴，通过 GitHub Actions 来总结网页文章内容并写入到GitHub仓库里。
</p>

<p>
之前在思考流动知识检索的时候，完全没有想到利用 GitHub Actions来构建 workflow。
</p>

<p>
大致流程是：通过 <a href="https://github.com/osmoscraft/osmosmemo">osmos::memo</a> 书签插件，将网页文章的链接以MD格式保存到GitHub仓库，然后利用 GitHub Actions 读取这些链接用LLM做总结并保存到另一个 bookmark-summary 仓库。
</p>

<p>
作者的主要思路：
</p>

<blockquote>
<p>
为了解决这些问题，我建立了一个新的存储库 [bookmark-summary](<a href="https://github.com/jerrylususu/bookmark-summary">https://github.com/jerrylususu/bookmark-summary</a>)。这个存储库可以视为现有书签存储库的辅助数据，其中包含了新增书签的 Markdown 格式全文、列表摘要、一句话总结，和现有存储库之间通过 Github Actions 联动。其工作原理如下：
</p>

<ol class="org-ol">
<li>我通过书签插件，在现有的书签存储库中新增了一个条目</li>

<li>代码提交到主干，触发名为 `summarize` 的 Github Actions（[yml 工作流文件](<a href="https://github.com/jerrylususu/bookmark-collection/blob/main/.github/workflows/bookmark_summary.yml">https://github.com/jerrylususu/bookmark-collection/blob/main/.github/workflows/bookmark_summary.yml</a>)）</li>

<li><p>
Github Actions 执行，首先 checkout 书签存储库和摘要存储库，然后执行
</p>

<p>
process<sub>changes.py</sub>
</p>

<ol class="org-ol">
<li>首先解析书签 README.md 文件，找到最近新增的条目标题和 URL</li>
<li>将 URL 保存到 Wayback Machine</li>
<li>输入 URL，使用 [jina reader](<a href="https://jina.ai/reader/">https://jina.ai/reader/</a>) API 获取网址的 Markdown 全文，并保存到 `YYYYMM/{title}<sub>raw.md</sub>`</li>
<li>输入 URL，使用 LLM 生成列表摘要（prompt 在 `summarize<sub>text</sub>` 函数 [link](<a href="https://github.com/jerrylususu/bookmark-summary/blob/main/process_changes.py#L80">https://github.com/jerrylususu/bookmark-summary/blob/main/process_changes.py#L80</a>)）</li>
<li>输入列表摘要，使用 LLM 生成一句话总结</li>
<li>将列表摘要和一句话总结保存到 `YYYYMM/{title}.md`（[效果示例](<a href="https://github.com/jerrylususu/bookmark-summary/blob/main/202410/2024-10-02-a-local-first-case-study-jakelazaroff.com.md">https://github.com/jerrylususu/bookmark-summary/blob/main/202410/2024-10-02-a-local-first-case-study-jakelazaroff.com.md</a>)）</li>
<li>更新摘要存储库的 README.md，增加到摘要文件的链接</li>
</ol></li>

<li>Github Actions 提交变更到摘要存储库</li>
</ol>
</blockquote>

<p>
我跟着文章跑着试了一下，效果挺好的：
</p>


<figure id="orgb5f7558">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/Kapture%202024-10-12%20at%2017.38.32.gif" class="img" width="60%" height="60%">

</figure>

<p>
Github Actions里模型、总结的prompt、输出的格式和方式都可以根据自己的需求修改。
</p>

<p>
有一个小<a href="https://github.com/jerrylususu/bookmark-summary/issues/8">问题</a>正好别人也遇到了，运行 <code>process_changes.py</code> 的时候由于要读取 <code>data.json</code> 文件，而初始文件没有内容，加上一个 <code>{}</code> 空字典就好了。可以在脚本里优化一下这个过程，如果没有 data.json 或者 data.json 文件为空自动写入数据。
</p>

<p>
对我来说，这个保存书签bookmark和总结的workflow特别适合那些不痛不痒的文章，有些亮点但又不那么惊艳，丢掉又有点可惜，或者是纯记录价值的文章，对我特别有价值的都直接记录在我的PKM里了。再一个，备份数据是一个很好的习惯，<a href="https://www.bilibili.com/video/BV1yA4y1U77y/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=337">关键素材被删！找不到素材？影视飓风是如何摆脱丢数据噩梦的</a>:三备二介异地。就是一个数据备份3次，储存在2种介质当中，并且保证有一份完整的数据在异地，可以简称3-2-1原则了。
</p>

<p>
之前尝试过 <a href="https://github.com/ArchiveBox/ArchiveBox">archivebox</a>，就是个可以自己部署的 Internet Archive。开源免费，支持 docker，但这个项目太大了，作者这个轻巧的方案现在正符合我的需求。
</p>

<p>
日常的阅读我现在基本都在 Readwise了，这个 workflow 后面还可以和RAG结合起来，作为我<a href="https://www.vandee.art/posts/2024-06-18-the-freshness-date-of-information/">流动知识的检索</a>的数据库。后面想到什么好点子再融合进来，这个项目是一个很好的思路和模板，感谢作者的分享。
</p>

<p>
我去掉了作者保存到 <a href="https://help.archive.org/help/using-the-wayback-machine/">Wayback Machine</a>（Internet Archive）的这一步，更改了按年份、月份保存文件，下面是修改后 <code>process_changes.py</code> 的完整代码：
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> re
<span style="color: #51afef;">from</span> typing <span style="color: #51afef;">import</span> List, Optional
<span style="color: #51afef;">import</span> requests
<span style="color: #51afef;">import</span> json
<span style="color: #51afef;">from</span> datetime <span style="color: #51afef;">import</span> datetime
<span style="color: #51afef;">from</span> pathlib <span style="color: #51afef;">import</span> Path
<span style="color: #51afef;">from</span> dataclasses <span style="color: #51afef;">import</span> dataclass, asdict
<span style="color: #51afef;">import</span> os
<span style="color: #51afef;">import</span> logging
<span style="color: #51afef;">import</span> time
<span style="color: #51afef;">from</span> functools <span style="color: #51afef;">import</span> wraps
<span style="color: #51afef;">from</span> urllib.parse <span style="color: #51afef;">import</span> quote

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">-- configurations begin --</span>
<span style="color: #dcaeea;">BOOKMARK_COLLECTION_REPO_NAME</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"bookmark-collection"</span>
<span style="color: #dcaeea;">BOOKMARK_SUMMARY_REPO_NAME</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"bookmark-summary"</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">-- configurations end --</span>

logging.basicConfig(
    level=logging.INFO,
    <span style="color: #c678dd;">format</span>=<span style="color: #98be65;">'%(asctime)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s'</span>,
    datefmt=<span style="color: #98be65;">'%Y-%m-%d %H:%M:%S'</span>
)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">log_execution_time</span>(func):
    <span style="color: #ECBE7B;">@wraps</span>(func)
    <span style="color: #51afef;">def</span> <span style="color: #c678dd;">wrapper</span>(*args, **kwargs):
        logging.info(f<span style="color: #98be65;">'Entering </span>{func.<span style="color: #c678dd;">__name__</span>}<span style="color: #98be65;">'</span>)
        <span style="color: #dcaeea;">start_time</span> = time.time()
        <span style="color: #dcaeea;">result</span> = func(*args, **kwargs)
        <span style="color: #dcaeea;">end_time</span> = time.time()
        <span style="color: #dcaeea;">elapsed_time</span> = end_time - start_time
        logging.info(f<span style="color: #98be65;">'Exiting </span>{func.<span style="color: #c678dd;">__name__</span>}<span style="color: #98be65;"> - Elapsed time: </span>{elapsed_time:.4f}<span style="color: #98be65;"> seconds'</span>)
        <span style="color: #51afef;">return</span> result
    <span style="color: #51afef;">return</span> wrapper

<span style="color: #ECBE7B;">@dataclass</span>
<span style="color: #51afef;">class</span> <span style="color: #ECBE7B;">SummarizedBookmark</span>:
    year: <span style="color: #c678dd;">str</span>
    month: <span style="color: #c678dd;">str</span>  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">yyyyMM</span>
    title: <span style="color: #c678dd;">str</span>
    url: <span style="color: #c678dd;">str</span>
    timestamp: <span style="color: #c678dd;">int</span>  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">unix timestamp</span>

<span style="color: #dcaeea;">CURRENT_YEAR</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y'</span>)
<span style="color: #dcaeea;">CURRENT_MONTH</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%m'</span>)
<span style="color: #dcaeea;">CURRENT_DATE</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y-%m-%d'</span>)
<span style="color: #dcaeea;">CURRENT_DATE_AND_TIME</span>: <span style="color: #c678dd;">str</span> = datetime.now().strftime(<span style="color: #98be65;">'%Y-%m-%d %H:%M:%S'</span>)

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_text_content</span>(url: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">jina_url</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"https://r.jina.ai/</span>{url}<span style="color: #98be65;">"</span>
    <span style="color: #dcaeea;">response</span>: requests.Response = requests.get(jina_url)
    <span style="color: #51afef;">return</span> response.text

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">call_openai_api</span>(prompt: <span style="color: #c678dd;">str</span>, content: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">model</span>: <span style="color: #c678dd;">str</span> = os.environ.get(<span style="color: #98be65;">'OPENAI_API_MODEL'</span>, <span style="color: #98be65;">'gpt-4o-mini'</span>)
    <span style="color: #dcaeea;">headers</span>: <span style="color: #c678dd;">dict</span> = {
        <span style="color: #98be65;">"Authorization"</span>: f<span style="color: #98be65;">"Bearer </span>{os.environ['OPENAI_API_KEY']}<span style="color: #98be65;">"</span>,
        <span style="color: #98be65;">"Content-Type"</span>: <span style="color: #98be65;">"application/json"</span>
    }
    <span style="color: #dcaeea;">data</span>: <span style="color: #c678dd;">dict</span> = {
        <span style="color: #98be65;">"model"</span>: model,
        <span style="color: #98be65;">"messages"</span>: [
            {<span style="color: #98be65;">"role"</span>: <span style="color: #98be65;">"system"</span>, <span style="color: #98be65;">"content"</span>: prompt},
            {<span style="color: #98be65;">"role"</span>: <span style="color: #98be65;">"user"</span>, <span style="color: #98be65;">"content"</span>: content}
        ]
    }
    <span style="color: #dcaeea;">api_endpoint</span>: <span style="color: #c678dd;">str</span> = os.environ.get(<span style="color: #98be65;">'OPENAI_API_ENDPOINT'</span>, <span style="color: #98be65;">'https://api.openai.com/v1/chat/completions'</span>)
    <span style="color: #dcaeea;">response</span>: requests.Response = requests.post(api_endpoint, headers=headers, data=json.dumps(data))
    <span style="color: #51afef;">return</span> response.json()[<span style="color: #98be65;">'choices'</span>][<span style="color: #da8548; font-weight: bold;">0</span>][<span style="color: #98be65;">'message'</span>][<span style="color: #98be65;">'content'</span>]

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">summarize_text</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">prompt</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"""</span>
<span style="color: #98be65;">&#35831;&#29992;markdown&#21015;&#34920;&#26684;&#24335;**&#35814;&#32454;**&#24635;&#32467;&#25105;&#21457;&#36865;&#32473;&#20320;&#30340;&#25991;&#26412;&#12290;&#20805;&#20998;&#21512;&#29702;&#20351;&#29992;&#32553;&#36827;&#21644;&#23376;&#21015;&#34920;&#65292;&#22914;&#26524;&#26377;&#38656;&#35201;&#21487;&#20197;&#20351;&#29992;&#22810;&#23618;&#23376;&#21015;&#34920;&#65292;&#25110;&#26159;&#22312;&#23376;&#21015;&#34920;&#20013;&#21253;&#21547;&#22810;&#20010;&#26465;&#30446;&#65288;3&#20010;&#25110;&#20197;&#19978;&#65289;&#12290;&#22312;&#27599;&#20010;&#24635;&#32467;&#39033;&#24320;&#22836;&#65292;&#29992;&#31616;&#30701;&#30340;&#35789;&#35821;&#25551;&#36848;&#35813;&#39033;&#12290;&#24573;&#30053;&#21644;&#25991;&#31456;&#20027;&#20307;&#26080;&#20851;&#30340;&#20869;&#23481;&#65288;&#22914;&#24191;&#21578;&#65289;&#12290;&#26080;&#35770;&#21407;&#25991;&#35821;&#35328;&#20026;&#20309;&#65292;&#24635;&#26159;&#20351;&#29992;&#20013;&#25991;&#36827;&#34892;&#24635;&#32467;&#12290;</span>
<span style="color: #98be65;">"""</span>
    <span style="color: #51afef;">return</span> call_openai_api(prompt, text)

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">one_sentence_summary</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">prompt</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"&#20197;&#19979;&#26159;&#23545;&#19968;&#31687;&#38271;&#25991;&#30340;&#21015;&#34920;&#24418;&#24335;&#24635;&#32467;&#12290;&#35831;&#22522;&#20110;&#27492;&#36755;&#20986;&#23545;&#35813;&#25991;&#31456;&#30340;&#31616;&#30701;&#24635;&#32467;&#65292;&#38271;&#24230;&#19981;&#36229;&#36807;100&#20010;&#23383;&#12290;&#24635;&#26159;&#20351;&#29992;&#31616;&#20307;&#20013;&#25991;&#36755;&#20986;&#12290;"</span>
    <span style="color: #51afef;">return</span> call_openai_api(prompt, text)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">slugify</span>(text: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">invalid_fs_chars</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">'/</span><span style="color: #a9a1e1;">\\</span><span style="color: #98be65;">:*?"&lt;&gt;|'</span>
    <span style="color: #51afef;">return</span> re.sub(r<span style="color: #98be65;">'['</span> + re.escape(invalid_fs_chars) + r<span style="color: #98be65;">'\s]+'</span>, <span style="color: #98be65;">'-'</span>, text.lower()).strip(<span style="color: #98be65;">'-'</span>)

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_summary_file_path</span>(title: <span style="color: #c678dd;">str</span>, timestamp: <span style="color: #c678dd;">int</span>, year: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>, month: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>, in_readme_md: <span style="color: #c678dd;">bool</span> = <span style="color: #a9a1e1;">False</span>) -&gt; Path:
    <span style="color: #dcaeea;">date_str</span> = datetime.fromtimestamp(timestamp).strftime(<span style="color: #98be65;">'%Y-%m-%d'</span>)
    <span style="color: #dcaeea;">summary_filename</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"</span>{date_str}<span style="color: #98be65;">-</span>{slugify(title)}<span style="color: #98be65;">.md"</span>
    <span style="color: #51afef;">if</span> year <span style="color: #51afef;">is</span> <span style="color: #a9a1e1;">None</span>:
        <span style="color: #dcaeea;">year</span> = CURRENT_YEAR
    <span style="color: #51afef;">if</span> month <span style="color: #51afef;">is</span> <span style="color: #a9a1e1;">None</span>:
        <span style="color: #dcaeea;">month</span> = CURRENT_MONTH
    <span style="color: #51afef;">if</span> in_readme_md:
        <span style="color: #dcaeea;">root</span>: Path = Path(year, month)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; year/month</span>
    <span style="color: #51afef;">else</span>:
        <span style="color: #dcaeea;">root</span>: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, year, month)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; year/month</span>
    <span style="color: #51afef;">return</span> Path(root, summary_filename)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">get_text_content_path</span>(title: <span style="color: #c678dd;">str</span>, in_summary_md: <span style="color: #c678dd;">bool</span> = <span style="color: #a9a1e1;">False</span>) -&gt; Path:
    <span style="color: #dcaeea;">text_content_filename</span>: <span style="color: #c678dd;">str</span> = f<span style="color: #98be65;">"</span>{CURRENT_DATE}<span style="color: #98be65;">-</span>{slugify(title)}<span style="color: #98be65;">_raw.md"</span>
    <span style="color: #dcaeea;">root</span>: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, CURRENT_YEAR, CURRENT_MONTH)  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032;&#36335;&#24452;&#20026; YEAR/MONTH</span>
    <span style="color: #51afef;">if</span> in_summary_md:
        <span style="color: #dcaeea;">root</span> = Path(<span style="color: #98be65;">"."</span>)
    <span style="color: #51afef;">return</span> Path(root, text_content_filename)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">build_summary_file</span>(title: <span style="color: #c678dd;">str</span>, url: <span style="color: #c678dd;">str</span>, summary: <span style="color: #c678dd;">str</span>, one_sentence: <span style="color: #c678dd;">str</span>) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #51afef;">return</span> f<span style="color: #98be65;">"""# </span>{title}
<span style="color: #98be65;">- URL: </span>{url}
<span style="color: #98be65;">- Added At: </span>{CURRENT_DATE_AND_TIME}
<span style="color: #98be65;">- [[</span>{get_text_content_path(<span style="color: #dcaeea;">title</span>, <span style="color: #dcaeea;">in_summary_md</span>=<span style="color: #a9a1e1;">True</span>][Link To Text]]<span style="color: #98be65;">})</span>

<span style="color: #98be65;">## TL;DR</span>
{one_sentence}

<span style="color: #98be65;">## Summary</span>
{summary}
<span style="color: #98be65;">"""</span>

<span style="color: #51afef;">def</span> <span style="color: #c678dd;">build_summary_readme_md</span>(summarized_bookmarks: List[SummarizedBookmark]) -&gt; <span style="color: #c678dd;">str</span>:
    <span style="color: #dcaeea;">initial_prefix</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">"""# Bookmark Summary</span>
<span style="color: #98be65;">&#35835;&#21462; bookmark-collection &#20013;&#30340;&#20070;&#31614;&#65292;&#20351;&#29992; jina reader &#33719;&#21462;&#25991;&#26412;&#20869;&#23481;&#65292;&#28982;&#21518;&#20351;&#29992; LLM &#24635;&#32467;&#25991;&#26412;&#12290;&#35814;&#32454;&#23454;&#29616;&#35831;&#21442;&#35265; process_changes.py&#12290;&#38656;&#35201;&#21644; bookmark-collection &#20013;&#30340; Github Action &#19968;&#36215;&#20351;&#29992;&#12290;</span>

<span style="color: #98be65;">## Summarized Bookmarks</span>
<span style="color: #98be65;">"""</span>
    <span style="color: #dcaeea;">summary_list</span>: <span style="color: #c678dd;">str</span> = <span style="color: #98be65;">""</span>
    <span style="color: #dcaeea;">sorted_summarized_bookmarks</span> = <span style="color: #c678dd;">sorted</span>(summarized_bookmarks, key=<span style="color: #51afef;">lambda</span> bookmark: bookmark.timestamp, reverse=<span style="color: #a9a1e1;">True</span>)
    <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> sorted_summarized_bookmarks:
        <span style="color: #dcaeea;">summary_file_path</span> = get_summary_file_path(
            title=bookmark.title,
            timestamp=bookmark.timestamp,
            month=bookmark.month,
            in_readme_md=<span style="color: #a9a1e1;">True</span>
        )
        <span style="color: #dcaeea;">summary_list</span> += f<span style="color: #98be65;">"- (</span>{datetime.fromtimestamp(bookmark.timestamp).strftime('%Y-%m-%d')}<span style="color: #98be65;">) [[</span>{summary_file_path}<span style="color: #98be65;">][</span>{bookmark.title}<span style="color: #98be65;">]]</span><span style="color: #a9a1e1;">\n</span><span style="color: #98be65;">"</span>
    <span style="color: #51afef;">return</span> initial_prefix + summary_list

<span style="color: #ECBE7B;">@log_execution_time</span>
<span style="color: #51afef;">def</span> <span style="color: #c678dd;">process_bookmark_file</span>():
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#21019;&#24314;&#36335;&#24452;&#20026; year/month &#30340;&#25991;&#20214;&#22841;</span>
    Path(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/</span>{CURRENT_YEAR}<span style="color: #98be65;">/</span>{CURRENT_MONTH}<span style="color: #98be65;">'</span>).mkdir(parents=<span style="color: #a9a1e1;">True</span>, exist_ok=<span style="color: #a9a1e1;">True</span>)

    <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_COLLECTION_REPO_NAME}<span style="color: #98be65;">/README.md'</span>, <span style="color: #98be65;">'r'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
        <span style="color: #dcaeea;">bookmark_lines</span>: List[<span style="color: #c678dd;">str</span>] = f.readlines()

    <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/data.json'</span>, <span style="color: #98be65;">'r'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
        <span style="color: #dcaeea;">summarized_bookmark_dicts</span> = json.load(f)
        <span style="color: #dcaeea;">summarized_bookmarks</span> = [SummarizedBookmark(**bookmark) <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmark_dicts]

    <span style="color: #dcaeea;">summarized_urls</span> = <span style="color: #c678dd;">set</span>([bookmark.url <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmarks])

    <span style="color: #dcaeea;">title</span>: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>
    <span style="color: #dcaeea;">url</span>: Optional[<span style="color: #c678dd;">str</span>] = <span style="color: #a9a1e1;">None</span>
    <span style="color: #51afef;">for</span> line <span style="color: #51afef;">in</span> bookmark_lines:
        <span style="color: #51afef;">match</span>: re.Match = re.search(r<span style="color: #98be65;">'- \[(.*?)\]\((.*?)\)'</span>, line)
        <span style="color: #51afef;">if</span> <span style="color: #51afef;">match</span> <span style="color: #51afef;">and</span> <span style="color: #51afef;">match</span>.group(<span style="color: #da8548; font-weight: bold;">2</span>) <span style="color: #51afef;">not</span> <span style="color: #51afef;">in</span> summarized_urls:
            <span style="color: #dcaeea;">title</span>, <span style="color: #dcaeea;">url</span> = <span style="color: #51afef;">match</span>.groups()
            <span style="color: #51afef;">break</span>

    <span style="color: #51afef;">if</span> title <span style="color: #51afef;">and</span> url:
        <span style="color: #dcaeea;">text_content</span>: <span style="color: #c678dd;">str</span> = get_text_content(url)
        <span style="color: #dcaeea;">summary</span>: <span style="color: #c678dd;">str</span> = summarize_text(text_content)
        <span style="color: #dcaeea;">one_sentence</span>: <span style="color: #c678dd;">str</span> = one_sentence_summary(summary)
        <span style="color: #dcaeea;">summary_file_content</span>: <span style="color: #c678dd;">str</span> = build_summary_file(title, url, summary, one_sentence)
        <span style="color: #dcaeea;">timestamp</span> = <span style="color: #c678dd;">int</span>(datetime.now().timestamp())

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#20445;&#23384;&#21407;&#22987;&#25991;&#26412;&#20869;&#23481;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(get_text_content_path(title), <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(text_content)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#20445;&#23384;&#24635;&#32467;&#25991;&#20214;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(get_summary_file_path(title, timestamp), <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(summary_file_content)

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#28155;&#21152;&#21040;&#24635;&#32467;&#20070;&#31614;&#21015;&#34920;</span>
        summarized_bookmarks.append(SummarizedBookmark(
            year=CURRENT_YEAR,
            month=CURRENT_MONTH,
            title=title,
            url=url,
            timestamp=timestamp
        ))

<span style="color: #5B6268;"># </span><span style="color: #5B6268;">&#26356;&#26032; README &#21644;&#25968;&#25454;&#25991;&#20214;</span>
        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/README.md'</span>, <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            f.write(build_summary_readme_md(summarized_bookmarks))

        <span style="color: #51afef;">with</span> <span style="color: #c678dd;">open</span>(f<span style="color: #98be65;">'</span>{BOOKMARK_SUMMARY_REPO_NAME}<span style="color: #98be65;">/data.json'</span>, <span style="color: #98be65;">'w'</span>, encoding=<span style="color: #98be65;">'utf-8'</span>) <span style="color: #51afef;">as</span> f:
            json.dump([asdict(bookmark) <span style="color: #51afef;">for</span> bookmark <span style="color: #51afef;">in</span> summarized_bookmarks], f, indent=<span style="color: #da8548; font-weight: bold;">2</span>, ensure_ascii=<span style="color: #a9a1e1;">False</span>)


<span style="color: #51afef;">def</span> <span style="color: #c678dd;">main</span>():
    process_bookmark_file()

<span style="color: #51afef;">if</span> <span style="color: #c678dd;">__name__</span> == <span style="color: #98be65;">"__main__"</span>:
    main()
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf6034d2" class="outline-2">
<h2 id="orgf6034d2">从GitHub书签到页面</h2>
<div class="outline-text-2" id="text-orgf6034d2">
<p>
突然想起来了之前的<a href="https://www.vandee.art/posts/2024-04-29-vandee-clip/">clip</a>，这两个整合到一起正好。于是进一步修改 <code>process_changes.py</code> 代码，更改文件生成的路径以符合clip，将AI总结和原文内容整合到 <code>index.md</code> ，这是现在的保存书签 - AI总结 - clip页面全流程：
</p>


<figure id="orgcbdc4d8">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/clipsummary-min.gif" class="img" width="60%" height="60%">

</figure>

<p>
全部完整代码在 <a href="https://github.com/VandeeFeng/bookmark-summary">bookmark-summary</a>。AI摘要的prompt和md初始页可以再完善一下。
</p>

<p>
再次感谢 <a href="https://github.com/theowenyoung/clip">Owen&rsquo;s Clip</a> , <a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引</a>这两个项目的作者。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-input.html">Input</a> <a href="https://www.vandee.art/tag-github.html">Github</a> <a href="https://www.vandee.art/tag-python.html">Python</a> </div>]]></description>
  <category><![CDATA[Input]]></category>
  <category><![CDATA[Github]]></category>
  <category><![CDATA[Python]]></category>
  <link>https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html</link>
  <guid>https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html</guid>
  <pubDate>Sat, 12 Oct 2024 21:08:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[艺术的模仿游戏]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1d7ebd4">模仿、游戏、亵渎</a></li>
<li><a href="#org0b99570">艺术和模仿</a></li>
<li><a href="#orgdf76978">创造力与记忆力</a></li>
<li><a href="#orgb1a5b5b">模仿游戏</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org1d7ebd4" class="outline-2">
<h2 id="org1d7ebd4">模仿、游戏、亵渎</h2>
<div class="outline-text-2" id="text-org1d7ebd4">
<p>
<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>，RSS推送了这个订阅。如果你也喜欢思考，那么大概率你也会爱上这篇文章里提出的思考。
</p>

<p>
你可能会厌烦我在这类post里列举的大篇幅原文和我的原文，它们占据了页面里的许多篇幅，占用了你的注意力，让你现在就想赶紧滑过去看到下一个醒目的标题。你可能也会同样厌烦我在这些原文里留下的思维痕迹，没有提供给你一个纯净的思考空间。
</p>

<p>
对我而言，在写这些类似读书笔记的post时，它就像是一场无关时间和空间的另一个时间线可能存在的对话。这类post大多也没有具体行文的逻辑，因为这就是思考在最初的样子。我想尽力还原这个纯净的思考空间。
</p>

<blockquote>
<p>
除去用于维生所需，人每天还有大量能量剩余，有些人多到会溢出，必须加以消磨。有人因此思考自身处境，就有了宗教和艺术。有人因此考虑世界和存在，就有了哲学和科学。有人因此觉察到匆匆的时间之流，意识到自己只是一个个连续的此时此刻在不断流逝，因而想要抓住永恒，于是有了形形色色的创造物。一切都是易逝的，唯有回忆留存，创造物可以记录瞬间，可以唤起回忆，因此它是永恒的表征。溢出的能量让人去创造。而创造就是模仿。
</p>
</blockquote>

<p>
在<a href="https://www.vandee.art/posts/2022-11-24-undefined/">都是因为无聊</a>里我从另一个角度也思考到了这个问题：
</p>

<blockquote>
<p>
无聊同样也是想象力的来源，人类进步的来源。
</p>

<p>
阿基米德洗澡的时候无聊，发现了浮力；牛顿在苹果树下面无聊（有争议），发现了万有引力；伽利略对着天空无聊，发明了天文望远镜进一步证实了哥白尼的日心说；达尔文喜欢对着动植物无聊，提出了自然选择；爱因斯坦对着时间无聊，想搞清楚时间到底是什么，提出了相对论；尼古拉・特斯拉对着黑夜无聊，做出了第一个交流电发动机（本人讨厌爱迪生）；
</p>

<p>
人对着木头无聊，点着了火。
</p>
</blockquote>

<p>
最近巴黎奥运开幕式国内外的争议很多。草草的浏览了国内外主流平台的新闻言论和一些关注的RSS推送，还是这篇最炙热，这些文字让我的大脑像火锅里被烫的猪脑一样炙热滚烫：
</p>

<blockquote>
<p>
就像是只要出现一张长条桌，再安排13个人坐在那里，亵渎的潜在可能性就已经产生了。因为13个人加一张长条桌，作为一种对于历史和宗教的模拟，已经被确定为特定的形式。有人借用这个形式重新模拟，构成一个游戏的一部分，那么就会和部分人的特定解读相互冲突。但是占据形式这个想法本身，不就是个很荒谬么？印度教徒或者佛教徒，不会宣布垄断打坐这个形式，不会因此有一只猫或者一个朋克摆出这个姿势就会让他们上火。从游戏的角度来看，感到亵渎或者愤怒本身就是游戏成功的象征。
</p>

<p>
因为一次模拟就是一种重构，就是一次重新解读，就是在回忆之海里投入一个新的锚标。模仿本身就具有一种邀约的姿态，邀请另外一个人来观看，从另外一个角度去观看他认为熟悉的事物。当这个人不愿意从他熟悉的事物上离开自己惯常的理解，碰撞就已经发生，游戏的使命其实已经完成。一个寂然无声，没有任何反馈的游戏才是失败的游戏。
</p>
</blockquote>

<p>
艺术就是对我来说最有趣的模仿游戏了。
</p>
</div>
</div>
<div id="outline-container-org0b99570" class="outline-2">
<h2 id="org0b99570">艺术和模仿</h2>
<div class="outline-text-2" id="text-org0b99570">
<p>
《艺术的故事》和《现代艺术150年》这两本书从历史的角度，阐述了一个让我担忧的结论：艺术本身可能并不存在，存在的只是艺术品。
</p>

<p>
现代艺术更不用说，资本引导着艺术的潮流。与印象派起源的19世纪初期到现代艺术萌芽的20世纪初期相比，艺术的自由早就不复存在了。现在已经看不到在巴提诺格里斯大街11号（现为克里希大街9号）的咖啡馆里曾经热闹的景象。保罗·塞尚、埃德加·德加、莫奈等大佬们，数年来他们都聚在这里，讨论艺术和人生（在这个阶段他们常常被简称为“巴提诺格里斯小组”）。印象派之父马奈的工作室就在附近。印象派小分队的成员都拿各自的生涯作赌注，决定不理会学院的那套系统，最终宣起了印象派革命。
</p>

<p>
正是那个时候革命与机械化就催生了一个被称为资产阶级的新的社会阶层。路易斯·勒罗伊做梦也不会想到，他对莫奈的绘画《日出·印象》的苛刻评论竟然催生出了伟大的印象派。资本的这些规则是与艺术同在的另一个推动力，没有资本的规则艺术品的价值可能永远不会被推到现代艺术的高度。它们固然很可恶但也激发着真正的“艺术家”去完成超越资本规则的艺术品。
</p>

<p>
也更难看到马塞尔·杜尚幽默叛逆的《泉》、保罗·塞尚《圣维克多山》独特的双视角理念对视觉透视的颠覆、达达主义对于现实的嘲讽、梵高向日葵的橙黄的炙热与癫狂的深蓝、毕加索《亚维农的少女》粗狂的立体主义几何色块、萨尔瓦多·达利《记忆的永恒》重构的想象力。
</p>

<p>
我喜欢艺术的根本原因是 <b>我喜欢关于创造的一切</b> 。<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>的作者谈到：
</p>

<blockquote>
<p>
而创造就是模仿，以前我没想明白这个问题，认为存在两分法，90%的模仿和10%的独创。不是这样的，只有模仿。模仿自然界的实际存在，于是有了古代艺术，岩壁上的手绘野牛，或者古埃及墓穴壁画里的花园，乃至古希腊人创作出来的惟妙惟肖石雕，都是模仿。
</p>

<p>
人会睡去，人会遗忘，人会死亡，眼前的一切转眼成空，所以要模仿。通过模仿实际存在，模仿现实世界，一张画，一座雕塑，都可以对抗这种无尽的消逝。很多年前的某个下午早已过去，早已消逝，早已遗忘，但是通过人为创造物，人们又可以回到那个下午，一切如昨。这件事情很重要，人需要不断确定自己处于连续不断的生命之流里，需要确认自己是一种连续的存在，方法就是在回忆中流畅地沿着时间线回溯到任意一点。而每一点都是曾经的此时此刻，所有的此时此刻加在一起，就是自己存在的证据。
</p>
</blockquote>

<p>
我不想去承认创造就是模仿这个事实，就像我不想去承认艺术可能其实并不存在这个事实。语言的表达是非常有限的，所以我更喜欢艺术的表达和逻辑辩证的表达。“而创造就是模仿”这句话，结合全篇的文章你也无法说明作者真正想表达的意思是什么，因为这牵扯到作者一生的经历。
</p>

<p>
我更愿意换句话来表达：创造易是模仿，对大自然的模仿。我喜欢用“易”来指代“亦”，类似于文言文里的通假字。“就是”在逻辑上表示一个或非的判断，在大的论点里我不喜欢用逻辑上的判断来表达观点，这样的表达在缺失逻辑推理过程时，难免会让人质疑，也没有那么绝对的事情。
</p>

<p>
我其实不喜欢深究概念本身，就像我喜欢印象派和抽象派一样。没有绝对的真实，只有每个人不同的印象。这些抽象的印象更加真实，每一个客观事实的实例对于不同个体在不同时空的意义都不会是相同的。水对于原子世界是 H₂O，它也是“上善若水”，它也是农夫山泉，对于地球生命它是生命之源。所以水是什么？回答这个问题，或者这个问题本身不重要，这些概念只是我们思维的重构，只是我们对物质的反馈。这对于水来说是不公平的，你会喜欢别人随便给你起外号么？印象派对于自然就包容太多了，而抽象派、超现实主义则在概念上进一步解构和重构。
</p>

<p>
把话题缩小一些，艺术创造就是模仿么？所有的创造都可以看作是对大自然的模仿，特别是艺术方面的创造。黄金比例是人类从数学角度对自然拙劣的模仿、透视法是从几何角度对自然空间拙劣的模仿、色彩科学是从光谱角度对自然的拙劣模仿。这里的“模仿”更准确的逻辑语义表达可能是“重构”，重构我们人类对于物质的解释与反馈。用计算机语言来说就是，物质给予了一个输入，人类大脑本能的反馈输出，我们不可能避免这个过程，因为这是生命的脉动。
</p>

<p>
这些重构就根据不同的大脑结构分成了许多种：文学家写文学、科学家做研究、艺术家做艺术品。
</p>

<p>
所以我不喜欢深究概念，无常才是常，无序才是秩序。我们仅仅是在做自己生物结构擅长、喜欢做的事而已。基于每个差异化的个体，对于自然、物质世界实时的反馈。所以艺术就是模仿么？我更愿意说，艺术是所有物质世界信息与反馈的一个巨大巧合。
</p>

<p>
我相信量子力学在未来的研究里一定会颠覆现代科学的认知结构。
</p>
</div>
</div>
<div id="outline-container-orgdf76978" class="outline-2">
<h2 id="orgdf76978">创造力与记忆力</h2>
<div class="outline-text-2" id="text-orgdf76978">
<p>
<a href="https://shwin.co/blog/creativity-fundamentally-comes-from-memorization">创造力从根本上来自记忆 &#x2014; Creativity Fundamentally Comes From Memorization</a>，正好看到这篇推送，和前几天的post主题挺契合，几个观点挺有意思：
</p>

<ul class="org-ul">
<li><p>
自治可以激发创造力
</p>

<blockquote>
<p>
Creativity comes to those who have internalized the patterns of their art &#x2013; they can see the connection or novelty because it&rsquo;s all in their head.
</p>

<p>
创造力属于那些已经内化了艺术模式的人——他们可以看到其中的联系或新奇之处，因为这一切都在他们的脑海中。
</p>

<p>
Therefore autonomy enables creativity, and a system helps achieve autonomy quicker.
</p>

<p>
因此，自治可以激发创造力，而系统有助于更快地实现自治。
</p>
</blockquote></li>

<li><p>
系统并不直接产生创造力，而只是激发创造力
</p>

<blockquote>
<p>
The key here is memorization&rsquo;s role in learning. We often tout the difference between memorization and true &ldquo;understanding&rdquo;, which are indeed distinct. Memorizing the different methods of attacking mathematical integrations is different from being able to use the right one in the moment.
</p>

<p>
这里的关键是记忆在学习中的作用。我们经常吹捧记忆和真正的“理解”之间的区别，这确实是截然不同的。记住攻击数学积分的不同方法与能够立即使用正确的方法是不同的。
</p>

<p>
But I maintain that such pattern recognition is just another form of memorization, though often a more subconscious one. This is learned from repeated exposure, and what I&rsquo;m attempting to do when I try to see a &ldquo;breadth&rdquo; of cases after learning the framework and available patterns to use.
</p>

<p>
但我坚持认为，这种模式识别只是记忆的另一种形式，尽管通常是一种更潜意识的形式。这是从反复接触中学到的，也是我在学习框架和可用模式后尝试查看“广泛”案例时尝试做的事情。
</p>

<p>
What this is really doing under the hood, is creating a heuristic and&#x2026; wait for it&#x2026; memorizing it!
</p>

<p>
这实际上在幕后做的事情是创建启发式并且&#x2026;&#x2026;等待它&#x2026;&#x2026;记住它！
</p>

<p>
Once this heuristic is internalized, it becomes a new primitive and we focus our attention to higher-level problems.
</p>

<p>
一旦这种启发式被内化，它就成为一个新的原语，我们将注意力集中在更高层次的问题上。
</p>

<p>
Once a dancer learns the fundamental movements of their specialization, they&rsquo;re able to improvise. So are pianists once they learn scales, and mathematicians (though sadly many of us never experience the joy of mathematical improvisation &#x2013; as Paul Lockhart covers in his <a href="https://worrydream.com/refs/Lockhart_2002_-_A_Mathematician's_Lament.pdf">Mathematician&rsquo;s Lament</a>).
</p>

<p>
一旦舞者学会了其专业的基本动作，他们就能够即兴创作。一旦钢琴家学习了音阶，数学家也是如此（尽管遗憾的是，我们中的许多人从未体验过数学即兴创作的乐趣——正如保罗·洛克哈特在他的《数学家的挽歌》中所提到的那样）。
</p>

<p>
The key is understanding that a system doesn&rsquo;t directly <b>make</b> creativity, it just <b>enables</b> it. Memorization’s role is similar.
</p>

<p>
关键是要理解系统并不直接产生创造力，而只是激发创造力。记忆的作用是类似的。
</p>

<p>
Another strategy that works well in both humor and famous EDM drops is &ldquo;violating the expectation&rdquo;, but you need to know the expectation before you can violate it. Once you learn music theory, you&rsquo;re able to violate it in ways that resonate. Avant-garde art requires knowing what the establishment is to push the boundaries as orthogonally as possible.
</p>

<p>
另一种在幽默和著名 EDM 中都有效的策略是“违反期望”，但在违反期望之前您需要先了解期望。一旦你学习了音乐理论，你就能够以引起共鸣的方式违反它。前卫艺术需要了解其体系是什么，以尽可能正交地突破界限。
</p>
</blockquote></li>
</ul>
</div>
</div>
<div id="outline-container-orgb1a5b5b" class="outline-2">
<h2 id="orgb1a5b5b">模仿游戏</h2>
<div class="outline-text-2" id="text-orgb1a5b5b">
<p>
<a href="https://movie.douban.com/subject/10463953/">模仿游戏</a>是我很喜欢的一部电影，讲的是图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）制作密码破译机的故事。电影的名字和今天讨论的模仿游戏完全是一个巧合。只是在重复敲打模仿、游戏时，这个电影一直在我的脑子里窜来窜去，干脆把你放出来好了。黑客帝国也放出来好了，<a href="https://www.vandee.art/posts/2023-02-23-undefined/">蓝色药丸还是红色药丸？</a>🤣。
</p>

<p>
现在的LLM大语言模型同样是一个模仿游戏。LLM是一个巨大的ZIP文档，它是一个世界的快照，压缩了快照时间点互联网、人类知识的巨大信息，是现实世界最大的模仿游戏，往后更会是人类历史的一部分，它既是记录者也是开创者。
</p>

<p>
在这个游戏里，人类千万别输了。
</p>

<blockquote>
<p>
Being multidimensional means recognizing and nurturing the various aspects that make you who you are. Just like a prism splitting white light into different colors, imagine yourself to be made of those different &ldquo;colors&rdquo;. You have a unique permutation of talents, and experiences. By accepting and practising these aspects of yourself, you can grow beyond the limits set by society&rsquo;s standard expectations.
</p>

<p>
多维意味着认识和培养使你成为你的各个方面。就像三棱镜把白光分成不同的颜色一样，想象一下你自己就是由这些不同的 &ldquo;颜色 &rdquo;组成的。你拥有独特的天赋和经验。接受并实践自己的这些方面，你就能超越社会标准期望所设定的限制，获得成长。
</p>

<p>
The most interesting part is: you get to define your own dimensions.
</p>

<p>
最有趣的是：你可以定义自己的维度。
</p>

<p>
<a href="https://maharshi.bearblog.dev/become-a-multidimensional-person/">Be multidimensional, anon | Maharshi&rsquo;s blog</a>
</p>
</blockquote>

<p>
我更喜欢艺术的模仿游戏。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/2024-07-30-the-imitation-game-of-art.html</link>
  <guid>https://www.vandee.art/2024-07-30-the-imitation-game-of-art.html</guid>
  <pubDate>Tue, 30 Jul 2024 21:15:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[PKM（个人知识管理）构建手册 - Emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6c4e6e2">Intro</a></li>
<li><a href="#org66606c8">Manual</a>
<ul>
<li><a href="#org14100e7">Prerequisites</a></li>
<li><a href="#org4024c63">PKM</a>
<ul>
<li><a href="#orgfa3286d">Principles</a></li>
<li><a href="#org29df245">Methods</a></li>
</ul>
</li>
<li><a href="#org9a94d6a">PKM with LLM</a>
<ul>
<li><a href="#orgaad00ff">工具推荐</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org7b88988">ChangeLog</a></li>
<li><a href="#org004a777">Thanks</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org6c4e6e2" class="outline-2">
<h2 id="org6c4e6e2">Intro</h2>
<div class="outline-text-2" id="text-org6c4e6e2">
<blockquote>
<p>
For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin. <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a>
</p>

<p>
对我来说，做笔记有助于确保我真正认真思考其中的内容。如果我不同意这本书，有时需要花很长时间才能读完这本书，因为我在页边空白处写了太多内容。—比尔·盖茨
</p>
</blockquote>

<p>
这段时间关于PKM（个人知识管理）的构建起起伏伏，究其原因大概是我的思维工具跟不上思维了，工具用起来不顺手了。好在一些关键的问题都解决了，现在总结梳理成册，提供一个我个人觉得还比较靠谱，能有效的组织思维、呈现思维、扩展思维的PKM手册，也是一个模板。
</p>

<p>
从2022年开始用Notion，那个时候还不知道PKM是什么，就随心所欲的乱记一通。历经了Obsidian、Logseq，再到现在的Emacs，org-mode，通过做笔记和折腾这些笔记软件，不断深入了解这些软件的作者、笔记软件的设计理念，我觉得我的思维、认知、学习方法、写作、表达都有了质的提升。工欲善其事，必先利其器，对我而言，一个称手的笔记工具是很必须的。这个PKM方法就是我披荆斩棘的那个柳条，张三丰的太极，有形易于无形。这也就是在说，一个工具能发挥出多大效果，取决于使用者。爱因斯坦不需要记笔记，他的笔记直接就发表了🤣。对于PKM和做笔记，你可以不用，但我喜欢我有。
</p>

<p>
一个科学的，适合自己的PKM对思维的提升就好像，擎天柱组合了扩展装甲。再加上AI越来越易用，形成一些思维的语料通过LLM来拓展思维一定会是未来更有效的学习模式。而这个「PKM-base」库，就是我的扩展装甲。逐渐的，PKM这个工具和我的思维已经又融为一体，对于这个进展我很兴奋，似乎我离我的<a href="https://www.vandee.art/posts/2023-12-06-learn-all-the-time/">太极</a>又近了一步。
</p>

<p>
作为思维的另一个同步的呈现，以一生来度量，这个手册也会一直更新。
</p>

<p>
对于数字笔记来说，Markdown很实用，可读性也很强，兼容性和扩展性更不用说，而Org更有个性，更符合我现在的需求，在Emacs里，想实现的个性化功能，基本上都可以使用Elisp语言自己写函数来搞定，awesome！
</p>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。Notion、Logseq、Obsidian、Roam Research、Heptabase，未来还会有更多的笔记软件，适合自己的才是最好的，选择一个笔记软件、笔记工具就是在选择一个生态、一个系统，下一个笔记软件，何必是笔记软件。
</p>

<p>
现在的PKM（个人知识管理）体系还有许多需要完善的地方，我也肯定还会有我的下一个笔记软件，它也一定不是一个笔记软件。
</p>
</div>
</div>
<div id="outline-container-org66606c8" class="outline-2">
<h2 id="org66606c8">Manual</h2>
<div class="outline-text-2" id="text-org66606c8">
<p>
这是一个以 <a href="https://zh.wikipedia.org/wiki/Emacs">Emacs</a> 为基础编辑器、文件管理的Org-mode本地笔记PKM。
</p>

<p>
至于Emacs是什么，流传着一句话：Emacs是神的编辑器，Vim是编辑器之神。
</p>

<p>
本手册包括：
</p>

<ul class="org-ul">
<li>Prerequisites：开始构建本PKM需要的工具和准备工作</li>
<li>PKM：本PKM的构建原则和具体方法、org-mode的具体使用、org-capture与org-roam、Zotero、网页摘录与after-reading、中英混合输入的输入法配置与RIME</li>
<li>PKM-with-LLM：PKM和大语言模型结合的使用、ollama、RAG(待更新)</li>
</ul>
</div>
<div id="outline-container-org14100e7" class="outline-3">
<h3 id="org14100e7">Prerequisites</h3>
<div class="outline-text-3" id="text-org14100e7">
<p>
Start with：<a href="https://git-scm.com/download">Git</a>，<a href="https://www.gnu.org/software/emacs/">GNU Emacs</a>，<a href="https://github.com/doomemacs/doomemacs">doomemacs</a>，<a href="https://orgmode.org/">Org mode for GNU Emacs</a>，<a href="https://www.orgroam.com/">Org-roam</a>。
</p>

<p>
开始你可能需要对Emacs、Org-mode、Git有一些了解，这些可以帮助到你：
</p>

<ul class="org-ul">
<li><a href="https://github.com/doomemacs/doomemacs/tree/master">GitHub - doomemacs/doomemacs: An Emacs framework for the stubborn martian hacker</a></li>

<li><a href="https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#on-windows">doomemacs/docs/getting<sub>started.org</sub> at master · doomemacs/doomemacs · GitHub</a></li>

<li><a href="https://www.gnu.org/software/emacs/manual/">GNU Emacs Manuals Online</a></li>

<li><a href="https://orgmode.org/manuals.html">Manuals Org mode</a></li>

<li><a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>

<li><a href="https://emacs-china.org/">Emacs China</a></li>

<li><a href="https://emacsdocs.org/">Emacs Docs</a></li>

<li><a href="https://emacs.readthedocs.io/en/latest/index.html">Emacs readthedocs</a></li>
</ul>

<p>
配置参考：
</p>

<ul class="org-ul">
<li><a href="https://github.com/purcell/emacs.d">GitHub - purcell/emacs.d: An Emacs configuration bundle with batteries included</a></li>

<li><a href="https://github.com/redguardtoo/emacs.d">GitHub - redguardtoo/emacs.d: Fast and robust Emacs setup.</a></li>

<li><a href="https://github.com/MatthewZMD/.emacs.d">GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-featured GNU Emacs configuration distribution</a></li>

<li><a href="https://github.com/manateelazycat/lazycat-emacs">manateelazycat/lazycat-emacs: Andy Stewart&rsquo;s emacs</a></li>

<li><a href="https://github.com/xenodium/dotsies">xenodium/dotsies: Dot files, Emacs config, etc</a></li>
</ul>

<p>
如何安装和基本的配置，上面都可以解决。如果你止步在了这里，直接放弃或许是更好的选择，或者使用<a href="https://obsidian.md/">obsidian</a>、<a href="https://logseq.com/">Logseq</a>这样的Markdown笔记工具，更或者使用Logseq的org编辑模式，用Logseq来管理org文档（不推荐长期这么做），适合自己的才是最好的。
</p>

<p>
也可以参考我会一直更新的doomemacs<a href="https://github.com/VandeeFeng/doomemacs">配置</a>。
</p>
</div>
</div>
<div id="outline-container-org4024c63" class="outline-3">
<h3 id="org4024c63">PKM</h3>
<div class="outline-text-3" id="text-org4024c63">
<p>
整体的笔记文件管理结构，还是<a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/ACCESS%E7%AC%94%E8%AE%B0%E6%B3%95">ACCESS</a>，可以选择不用。有文件夹和没有文件夹是两种不同的管理模式，例如ob和Logseq。这个手册里更主要的是分享我在构建PKM的过程中迭代的一些原则和方法，以供参考，形成、巩固自己的方法才是这个手册真正的目的，remember：有形易于无形。具体可以参看：<a href="https://dg.vandee.art/Atlas/MOC/%C2%A7Vandee%E7%9A%84PKM">§Vandee的PKM</a>
</p>

<p>
Januarys用来记录每天的日志，作为简单明了的回顾和展开。如果你不喜欢文件夹管理，我觉得这个是很有必要的。
</p>

<p>
使用org-capture和org-roam-capture来创建，插入新的笔记和条目，在org-roam里也就是node节点。
</p>

<p>
<b>example</b> ：
</p>


<figure id="orgb82425b">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/January.gif" class="img" width="50%" height="50%">

</figure>

<p>
核心：原子笔记 + 双链。
</p>

<p>
你可能需要了解「原子笔记」（或者常青笔记，whatever）：<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a>。
</p>

<p>
双链和反链让笔记之间的关联更加直观，当原子笔记很多的时候，反链可以直观的反应出和当前笔记相关的其他笔记。它应该同步于思维的链条。
</p>

<p>
Zettelkasten 其实并不那么重要。
</p>

<p>
Stay foolish，stay simple。
</p>

<p>
关于同步：
</p>

<p>
本地笔记没有在线笔记软件方便的地方就是多端同步与预览。我的本地笔记已经上传到了GitHub仓库，通过Git同步。临时需要修改的直接在GitHub仓库里就修改了。预览方面，我的笔记输出到了 <a href="https://wiki.vandee.art">Vandee — Wiki</a>
</p>
</div>
<div id="outline-container-orgfa3286d" class="outline-4">
<h4 id="orgfa3286d">Principles</h4>
<div class="outline-text-4" id="text-orgfa3286d">
<ul class="org-ul">
<li><a href="https://dg.vandee.art/Cards/%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E6%A3%80%E7%B4%A2%E9%80%BB%E8%BE%91">一个良好的知识循环系统，应该有优秀的检索逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E6%98%AF%E6%80%9D%E7%BB%B4%E7%9A%84%E5%91%88%E7%8E%B0%EF%BC%8C%E5%AE%83%E5%BA%94%E8%AF%A5%E6%98%AF%E7%9F%A2%E9%87%8F%E7%9A%84">笔记是思维的呈现，它应该是矢量的</a>，当然也是<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子化</a>的</li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%B2%E8%81%94%E5%BA%94%E8%AF%A5%E5%AE%8C%E5%85%A8%E4%BE%9D%E9%9D%A0%E4%B8%8E%E6%80%9D%E7%BB%B4%E7%9A%84%E5%90%8C%E6%AD%A5">笔记之间的串联应该完全依靠与思维的同步</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E8%AE%A9%E7%9F%A5%E8%AF%86%E6%B5%81%E5%8A%A8%E8%B5%B7%E6%9D%A5">笔记应该让知识流动起来</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E5%B1%82%E7%BA%A7%E9%80%BB%E8%BE%91">笔记应该有优秀的层级逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E5%A2%9E%E6%8F%B4%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%87%AA%E5%B7%B1">笔记的核心价值在于增援未来的自己</a></li>
</ul>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。
</p>

<blockquote>
<p>
把人自身的思维看作一个向量，它有自己的方向和属性，在大脑里让它们串联起来的是一个个神经元和突触，在笔记里就是双链和索引。因此，要在PKM里最大程度复现大脑思维的流动，我认为，最自然的方式就是让笔记向量与思维最自然的习惯同步。
</p>

<p>
例如我们的语言系统，我们不会在用母语表达一些简单想法的时候还费力思考，笔记也应该是一样。当我大脑里现在想到一个概念，需要在笔记里找到相应的内容，脱口而出时，就应该只需要按照思维本来的习惯检索到笔记。
</p>

<p>
<a href="https://www.vandee.art/posts/2024-05-13-abandon-note-software-cli-nb/">脱离笔记软件，CLI 笔记工具 —nb</a>
</p>

<p>
对于信息传播者来说，立体化的信息载体无疑可以包含更多信息的元素，对于信息接受者来说，当然理论上就可以接收到更多的信息。问题是出现在信息接收之后，也就是调动认知的这个过程。
简单来说：信息损耗率 + 认知调动率 = 新认知迭代率
</p>

<p>
<a href="https://www.vandee.art/posts/2023-09-18-read-or-listen/">读或听或看？</a>
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org29df245" class="outline-4">
<h4 id="org29df245">Methods</h4>
<div class="outline-text-4" id="text-org29df245">
<p>
在最开始需要构建的关键体系就是检索的逻辑。
</p>

<p>
在双链部分由于原则上已经和思维高度同步，因此不需要做额外的增加思维成本的检索，只要在记录原子笔记的时候，顺其自然，高度提炼出明确、简洁的一句话概念即可。
</p>

<p>
在标签tags部分，我习惯把标签当作是一个object的二、三级属性来看待。例如《黄金时代》这本书，它的基础属性是book，我不会再重复标注它，而是写在property里，记下`Type: book`方便我通过函数来列举所有的书目，tag则记下文学、王小波。我习惯用单数来强调它是个属性，区别与复数的category集合的概念。
</p>

<p>
我看过许多博客和PKM，许多情况下，他们的tags在语义概念上都混用了，我习惯把tags和categories分开，分类就是分类，标签就是标签。category、property、tag还是需要在逻辑里有自然的分类，理清楚一个概念的内涵与外延。混用会导致tags越来越多，成百上千的tags反而会增加检索的成本，过个几年，大多数的tags你已经忘了当时为什么记下了，单独再去整理标签无疑是个巨大的工程，tags也失去了应当有的作用。tags的构建同样应当同步与自身的思维习惯，自身对概念、语义的记忆。
</p>

<p>
当然这也完全取决于每个人自己的习惯。
</p>

<p>
学习、获取信息和知识是在做加法，PKM里更多的应该是减法，<a href="https://dg.vandee.art/Sources/Articles/Stay-learn,-Stay-unlearn%EF%BD%9C%E8%AF%95%E8%A1%8C%E9%94%99%E8%AF%AF102">Learn and unlearn</a>。
</p>

<p>
可以参考我的思路：<a href="https://dg.vandee.art/Spaces/Studys/org/org-mode-pkm">org-mode-pkm</a>
</p>

<p>
example：
Emacs，org-roam，模板创建Daily和note：
</p>


<figure id="orged74ae9">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-roam.gif" class="img" width="50%" height="50%">

</figure>
</div>
<ul class="org-ul">
<li><a id="org6528df9"></a>Org-tag<br>
<div class="outline-text-5" id="text-org6528df9">
<p>
org里的标签功能也很全面，支持多个分组，可以自动补全，还支持自定义标签的快捷键。这很好的保证了之前所说的**标签的统一性**，大小写或者单复数不统一会很麻烦。
</p>

<p>
在org的任意标题之后加上 `:TAG1::TAG2:` 就打上了标签。
</p>

<p>
**进阶用法**如下：
</p>

<p>
在Org Mode中，你可以通过按下快捷键来为项目或任务添加预定义的标签。以下是具体的步骤：
</p>

<ol class="org-ol">
<li>光标定位：将光标移动到你想要添加标签的项目或任务上。</li>
<li><b>添加标签：按下快捷键 `C-c C-q`，org-set-tags-command，这将打开标签过滤器。可以直接在标题的最后输入标签。在输入冒号后，M-TAG</b> 提供了标签的自动补全和选择功能。</li>
<li>使用快捷键：在标签过滤器中，输入你为标签分配的字符常量作为快捷键。例如，如果你为 `@work` 标签分配了字符 `w`，那么在标签过滤器中输入 `w`。</li>
<li>确认添加：按下 `Enter` 键，这将为项目或任务添加相应的标签。</li>
</ol>

<p>
默认情况下，org 模式使用标准的 minibuffer 来输入标签 。然而，emacs 还提供了另外一种叫做 <b>fast tag selection</b> 的快速标签选择方式。在这种方式下可以仅用一个键来完成标签的选择和反选。要想使用这种方式，首先要为常使用的标签分配一个唯一字符。这个字符可以在 &rsquo;.**emacs**&rsquo; 中通过配置 <b><b>org-tag-alist</b></b> 来设置。比如，需要在很多文件中为很多项添加 &rsquo;<b><b>:home:</b></b>&rsquo; 标签。在这种情况下，可以这样设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(setq org-tag-alist '(("@work" . ?w) ("@home" . ? h ) ("@laptop" . ?l)))
</pre>
</div>

<p>
如果标签仅仅和当前使用的文件相关，那么可以像下面这样在文件中添加 <b><b>TAGS</b></b> 选项：
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)
</pre>
</div>

<p>
标签接口会在一个 splash windows 中显示可用的标签。如果想在一个特定的标签后换行，需要在标签列表中插入一个 &rsquo;<b><b>\n</b></b>&rsquo; 。
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) \n laptop(l) pc(p)
</pre>
</div>

<p>
或者将他们写成两行
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t)
#+TAGS: laptop(l) pc(p)
</pre>
</div>

<p>
也可以像下面这样用大(花)括号手动将标签进行分组
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: { @work(w) @home(h) @tennisclub(t) } laptop(l) pc(p)
</pre>
</div>

<p>
在这种情况下， ~@work(w) @home(h) @tennisclub(t) ~ 三个标签最多同时选择一个
</p>

<p>
org 也允许多个分组。当光标在这些行上的时候，不要忘了按 <b><b>C-c C-c</b></b> 来激活其它修改。
</p>

<p>
如果要在 <b><b>org-tags-alist</b></b> 中设置排它的标签组，必需要用 <b><b>:startgroup</b></b> 和 <b><b>:endgroup</b></b> 标签对，而不是用大括号。类似的，可以用 <b><b>:newline</b></b> 来声明一个新行。上面的例子也可以用下面的方式进行设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(setq org-tag-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      ("@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p))
</pre>
</div>



<p>
Ref:
</p>

<ul class="org-ul">
<li><a href="https://orgmode.org/manual/Tags.html#:~:text=Org%20mode%20has%20extensive%20support%20for%20tags.%20Every,by%20a%20single%20colon%2C%20e.g.%2C%20%E2%80%98%20%3Awork%3A%20%E2%80%99.">Tags (The Org Manual)</a></li>
<li><a href="https://www.cnblogs.com/btea/p/4412375.html">emacs org mode 中的标签全参考 - 咖啡加茶 - 博客园</a></li>
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster&rsquo;s Blog</a></li>
</ul>
</div>
</li>
<li><a id="org0b16128"></a>Org-agenda<br>
<div class="outline-text-5" id="text-org0b16128">
<p>
最开始是不打算用org-agenda的，因为没有太多TODO要去管理。用`#TODO`来标注TODO搜索也并不麻烦。但是考虑到时间久了，agenda也可以通过标注时间戳来回顾非TODO项，还是启用了。和org-roam配合，可以很清晰的回顾一个星期内重要的笔记。以后需要清除掉这些时间戳也很方便，一个正则搞定。
</p>

<p>
之前考虑到和其他笔记软件通用的问题，journal全部以单独的文件按照年份生成，现在改为集中在一个`journal.org`文件里。要不然以后org-agenda每次要扫描几年的journal文档会很头疼，现在改为每年一个单独的`20xx-journal.org`文件。
</p>

<p>
需要注意的是：在最开始设置好org-agenda要包括的文件或文件夹
</p>

<div class="org-src-container">
<pre class="src src-nil">;; 单独的文件
(setq org-agenda-files '("~/your/path/to/1.org" "~/your/path/to/2.org"))
;; 文件夹
;; 这样会把目录下包括子文件夹的文件都添加进去 https://emacs-china.org/t/org-txt-agenda/13506/5
(setq org-agenda-files (directory-files-recursively "~/your/directory/" "\\.org$"))
;; 文件夹但不包括子文件夹
(setq org-agenda-directory "~/your/agenda/directory/")

</pre>
</div>



<p>
这是现在的样子：
</p>
</div>
<ul class="org-ul">
<li><a id="org1626760"></a><span class="todo TODO">TODO</span> <br>
<div class="outline-text-6" id="text-org1626760">
<ul class="org-ul">
<li><p>
你可以通过在TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对已经完成的任务有个大致的了解，你可以在标题的任何地方插入`<code>[/]</code>`或者`<code>[%]</code>`。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。
</p>

<div class="org-src-container">
<pre class="src src-nil">  * TODO Organize party [1/3]
    - [-] call people [1/2]
      - [ ] Peter
      - [X] Sarah
    - [X] order food
    - [ ] think about what music to play
</pre>
</div>

<p>
Org mode 允许定义进入状态和离开状态时的额外动作，可用的动作包含两个:
</p>

<ul class="org-ul">
<li>添加笔记和状态变更信息(包括时间信息)，用&ldquo;@&rdquo;表示</li>
<li>只添加状态变更信息，用&ldquo;!&rdquo;表示</li>
</ul>

<p>
这个通过定义带快速选择键的关键词时，在快速选择键后用&ldquo;X/Y&rdquo;来表示，X表示进入该状态时的动作，Y表示离开该状态时的动作。对于一个状态(以&ldquo;DONE&rdquo;为例)，以下形式都是合法的:
</p>

<div class="org-src-container">
<pre class="src src-nil">  DONE(d@)       ; 进入时添加笔记
  DONE(d/!)      ; 离开时添加变更信息
  DONE(d@/!)     ; 进入时添加笔记，离开时添加变更信息
</pre>
</div>

<ul class="org-ul">
<li><p>
除了基于 headline 的任务管理外，Org mode 还提供基于列表的任务管理，即将每个列表项作为任务，方法是在列表标记与列表项内容之间添加一个 &ldquo;[ ]&rdquo; 标记(注意中间包含一个字符的预留位置)，这个标记在 Org mode 中被称为 <b><b>checkbox</b></b> 。这种任务只有三种状态(待办、进行中和完成)，分别用 `[ ]`, `[-]` 和 `[X]` 表示。
</p>

<p>
若要将用 checkbox 标记的任务标记为完成，将光标移动到对应的行，然后使用快捷键 &ldquo;C-c C-c&rdquo;  即可。对于包含子任务的任务，如果其子任务未全部完成，用此快捷键更改其子任务状态时，该任务的状态会自动设置为  &ldquo;进行中([-])&rdquo;，表示子任务未全部完成；当用快捷键将所有子任务标记为完成时，它会自动更新为完成状态。
</p>

<p>
用&ldquo;TODO&rdquo;等关键词标记为headline为任务时，使用的快捷键同样适用于checkbox，不过略有不同:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">功能</th>
<th scope="col" class="org-left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-S-return</td>
<td class="org-left">在当前列表项的内容后面建立一个同级列表项，标记为 &ldquo;[ ]&rdquo;</td>
<td class="org-left">无列表项时不创建</td>
</tr>

<tr>
<td class="org-left">M-S-return</td>
<td class="org-left">在当前列表项后建立一个同级列表项，标记为 &ldquo;[ ]&rdquo;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
使用`shift+← →方向键`也可以快速更改TODO的状态。
</p></li>

<li><p>
TODO sequence
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"> <span style="color: #51afef;">(</span><span style="color: #51afef;">setq</span> <span style="color: #dcaeea;">org-todo-keywords</span>
          <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #98be65;">(</span>sequence <span style="color: #98be65;">"</span><span style="color: #ECBE7B; font-weight: bold;">TODO</span><span style="color: #98be65;">(t)"</span> <span style="color: #98be65;">"DOING(i)"</span> <span style="color: #98be65;">"|"</span> <span style="color: #98be65;">"DONE(d@)"</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
    <span style="color: #51afef;">(</span><span style="color: #51afef;">setq</span> <span style="color: #dcaeea;">org-log-done</span> <span style="color: #51afef;">'</span><span style="color: #ECBE7B;">time</span><span style="color: #51afef;">)</span> <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">&#27599;&#27425;&#24403;&#20320;&#23558;&#19968;&#20010;&#39033;&#20174; </span><span style="color: #ECBE7B; font-weight: bold;">TODO</span><span style="color: #5B6268;"> (not-done) &#29366;&#24577;&#21464;&#25104;&#20219;&#24847;&#30340; DONE &#29366;&#24577;&#26102;&#65292;&#37027;&#20040;&#65292;&#23427;&#23601;&#20250;&#33258;&#21160;&#22312;&#26631;&#39064;&#30340;&#19979;&#38754;&#25554;&#20837;&#19968;&#34892;&#19979;&#38754;&#30340;&#20869;&#23481;&#65306;CLOSED: [timestamp]</span>
</pre>
</div></li>
</ul></li>
</ul>


<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-agenda/26755">新人提问，org格式中，重复任务在某一天完成后，却不能在agenda正确显示。。。 - Emacs-general - Emacs China</a></li>
<li><a href="https://github.com/AbstProcDo/Master-Emacs-From-Scratch-with-Solid-Procedures/blob/master/06.Emacs-as-Agenda-by-Org.org">Master-Emacs-From-Scratch-with-Solid-Procedures/06.Emacs-as-Agenda-by-Org</a></li>
<li><a href="https://orgmode.org/manual/Agenda-Views.html">Agenda Views (The Org Manual)</a></li>
<li><a href="https://emacsist.github.io/emacsist/orgmode/orgmode%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html#org6796967">emacsist.github.io/emacsist/orgmode/orgmode手册学习笔记.html</a></li>
<li><a href="https://www.zmonster.me/2015/07/15/org-mode-planning.html">强大的 Org mode(2): 任务管理 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html#sec-5">Org-mode 简明手册 - open source - 博客园</a></li>
</ul>
</div>
</li>
</ul>
</li>
<li><a id="orgbf49dda"></a>Org-capture<br>
<div class="outline-text-5" id="text-orgbf49dda">
<p>
<a href="https://orgmode.org/manual/Capture.html">Org-capture</a> 是org-mode做笔记比较核心的功能，结合capture-templates可以在不离开当前buffer的情况下，快速记录、捕捉特定的内容到特定的文件和位置。加上时间戳还可以在agenda里以时间线回顾。
</p>

<p>
目前PKM里的Journal-日志、clip-剪藏、task-TODO等都是用org-capture处理的。
</p>

<p>
一定要在最开始先设置好org的默认笔记目录：`(setq org-directory &ldquo;~/your/path/org/&rdquo;)`
</p>

<p>
需要注意的是：对于Doom-Emacs，需要在`(after！org)`里写上关于org的配置来覆盖Doom-Emacs的默认配置。
</p>

<p>
如果常规的org-capture参数不足以满足你的需求，这个函数可能对你有帮助：
</p>

<div class="org-src-container">
<pre class="src src-nil">  ;; org-capture支持自定义函数，通过function来执行
  (defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
  (add-to-list 'org-capture-templates
               '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                 my-org-goto-last-todo-headline)
</pre>
</div>



<p>
下面是org-capture的模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(after! org
  ;; (server-start)
  ;; (require 'org-protocol)
  (org-link-set-parameters "zotero" :follow
                           (lambda (zpath)
                             (browse-url
                              ;; we get the "zotero:"-less url, so we put it back.
                              (format "zotero:%s" zpath))))
  (setq org-agenda-files '("~/Vandee/pkm/org/Journal.org" "~/Vandee/pkm/org/clip.org"))
  ;; (setq org-agenda-include-diary t)
  ;; (setq org-agenda-diary-file "~/Vandee/pkm/org/Journal.org")
  (setq org-directory "~/Vandee/pkm/org/")
  (global-set-key (kbd "C-c c") 'org-capture)
  ;;(setq org-default-notes-file "~/Vandee/pkm/inbox.org")
  (setq org-capture-templates nil)

  ;; (add-to-list 'org-capture-templates
  ;;              '("j" "Journal" entry (file+datetree  "~/Vandee/pkm/Journals/Journal.org")
  ;;                "* [[file:%&lt;%Y&gt;/%&lt;%Y-%m-%d&gt;.org][%&lt;%Y-%m-%d&gt;]] - %^{heading} %^g\n %?\n"))
  (add-to-list 'org-capture-templates
               '("j" "Journal" entry (file+datetree "~/Vandee/pkm/org/Journal.org")
                 "* TODOs\n* Inbox\n- %?"))
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file+datetree "~/Vandee/pkm/org/Inbox.org")
                 "* %U - %^{heading} %^g\n %?\n"))

  (defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
  (add-to-list 'org-capture-templates
               '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                 my-org-goto-last-todo-headline)
                 "* TODO %i%? \n%T"))

  (add-to-list 'org-capture-templates '("c" "Collections"))
  (add-to-list 'org-capture-templates
               '("cw" "Web Collections" item
                 (file+headline "~/Vandee/pkm/org/websites.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("ct" "Tool Collections" item
                 (file+headline "~/Vandee/pkm/org/tools.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("cc" "Clip Collections" entry
                 (file+headline "~/Vandee/pkm/org/clip.org" "Clip")
                 "* %^{heading} %^g\n%T\nSource: %^{source}\n%?"))

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://orgmode.org/manual/Capture.html">Capture (The Org Manual)</a></li>
</ul>
</div>
</li>
<li><a id="orga21a72d"></a>Org-roam<br>
<div class="outline-text-5" id="text-orga21a72d">
<p>
<a href="https://www.orgroam.com/">Org-roam</a> 是Emacs的一个包，也是org-mode 的扩展，可以简单的实现双链，通过org-roam-ui直观的预览。
</p>

<p>
也不是必须，只需要解决双链的查看就可以了。
</p>

<p>
org-roam也有它的capture，可以直接生成org笔记。而org-roam的「 node-insert 」可以快速在文档里直接插入新的笔记。与常规的org-mode`.org`文件不同的是，它可以通过带id的node「 节点 」链接来实现org-mode里的双链功能。每一个org-roam笔记都有唯一的id。
</p>

<p>
其他属性和使用基本与org-mode一致，也是生成`.org`文件。同样也需要配置org-roam的capture-templates。原来用org-roam创建Journal日志文件，现在已经用org-capture替代。
</p>

<p>
org-roam-ui也有和Logseq一样的网点图谱「 Graph View 」，也提供大纲结构视图，对于我来说用起来很亲切。如果你觉得org-mode可读性不强，那么org-roam-ui一定会让你喜欢。org-roam-ui是在浏览器里通过`org-roam-protocol`访问，需要在配置加上`(require &rsquo;org-roam-protocol)`。
</p>

<p>
同样也需要在最开始设置好org-roam笔记的文件夹：`(setq org-roam-directory &ldquo;~/your/roam/directory/&rdquo;)`
</p>

<p>
有一个坑，org-roam会自动生成一个`.orgids`文件来记录生成的每个org-roam笔记的id，如果不设置会在系统根目录下自动生成。加上`(org-id-locations-file &ldquo;~/your/path/to/.orgids&rdquo;)`即可。在一开始我一度认为我的电脑是不是哪里出了问题🤣，这个文件冷不丁的就冒出来了，删了重启又有了。官方文档和各大论坛里都没有这个设置，困扰了我很久，还是GPT帮我解决了。
</p>

<p>
下面是模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-nil">;; (setq org-roam-dailies-directory "~/Vandee/pkm/Journals/")
(setq org-export-with-toc nil) ;;禁止生成toc
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; (org-roam-dailies-capture-templates
  ;;  '(("d" "daily" plain "* %&lt;%Y-%m-%d&gt;\n** TODO\n- \n** Inbox\n- %?"
  ;;     :if-new (file+head "%&lt;%Y&gt;/%&lt;%Y-%m-%d&gt;.org" "#+TITLE: %&lt;%Y-%m-%d&gt;\n"))))
  (org-roam-directory "~/Vandee/pkm/roam/")
  (org-id-locations-file "~/Vandee/pkm/roam/.orgids")
  (org-roam-capture-templates
   `(("n" "note" plain "%?"
      :if-new (file+head "${title}.org"
                         "#+TITLE: ${title}\n#+UID: %&lt;%Y%m%d%H%M%S&gt;\n#+FILETAGS: \n#+TYPE: \n#+SOURCE: \n#+DATE: %&lt;%Y-%m-%d&gt;\n")
      :unnarrowed t))
   )
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n c" . org-roam-capture)
         ;; ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         ;; :map org-roam-dailies-map
         ;; ("Y" . org-roam-dailies-capture-yesterday)
         ;; ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)
  )

</pre>
</div>

<p>
<b><b>org-roam-capture模板分组</b></b>
</p>

<div class="org-src-container">
<pre class="src src-nil">;; org-roam-capture模板分组
(setq org-roam-capture-templates
      '(
        ("d" "default" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("g" "group")
        ("ga" "Group A" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("gb" "Group B" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%&lt;%Y%m%d%H%M%S&gt;-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")))

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-roam-v2-backlinks-buffer-headlines/23368/3">org-roam v2 的 backlinks buffer 能否显示指向当前文件的所有 headlines 的反链 - Org-mode - Emacs China</a></li>
<li>org-roam的官方论坛：<a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>
<li><a href="https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/">https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/</a></li>
<li><a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">使用 org-roam 构建自己的知识网络 · ZMonster&rsquo;s Blog</a></li>
<li><a href="https://d12frosted.io/tags/org-roam.html">Boris Buliga - org-roam</a></li>
<li><a href="https://emacs-china.org/t/org-roam-v2-org-roam-ui-emacs-29-sqlite/17806">Org-roam(v2) 以及 org-roam-ui 的使用姿势（已支持Emacs 29 内置的 sqlite) - Org-mode - Emacs China</a></li>
</ul>
</div>
</li>
<li><a id="org0c07ece"></a>Org-export<br>
<div class="outline-text-5" id="text-org0c07ece">
<p>
单独导出成MD、HTML或其他格式，Org-mode里就可以，也可以使用这些<a href="https://orgmode.org/zh-CN/tools.html">工具</a> 。批量导出，由于每个人的排版和格式习惯不同，还是自己用自己熟悉的语言，写几个正则，搞个脚本。
</p>

<div class="org-src-container">
<pre class="src src-nil">;; 当前buffer下，替换markdown的链接和标题格式到org-mode的格式，排除图片的转换、替换代码块格式。
(defun my-markdown-to-org ()
  (interactive)
  (save-excursion
    ;; 转换Markdown标题为Org-mode标题
    (goto-char (point-min))
    (while (re-search-forward "^\s*\\(#+\\) \\(.*\\)" nil t)
      (let ((level (length (match-string 1)))
            (title1 (match-string 2)))
        (replace-match (concat (make-string level ?*) " " title1)))))
  ;; 转换Markdown链接为Org-mode链接,但是跳过图片链接
  (goto-char (point-min))
  (while (re-search-forward "\\[[\(.*?\][\(.*?\)\]])" nil t)
    (let ((title (match-string 1))
          (url (match-string 2)))
      (unless (and (string-match "\\(jpeg\\|png\\|svg\\)" url)
                   (string-match "https" url))
        (replace-match (format "[[%s][%s]]" url title)))))
  ;; 转换Markdown代码块为Org-mode代码块
  (goto-char (point-min))
  (while (re-search-forward "^```" nil t)
    (if (looking-back "^```")
        (progn
          (replace-match "#+begin_src")
          (re-search-forward "^```" nil t)
          (if (looking-back "^```")
              (replace-match "#+end_src"))))))
</pre>
</div>



<ul class="org-ul">
<li><p>
<b><b>Markdown to org-mode</b></b>:
</p>

<p>
Pandoc转换md到org会有小问题，批量转换还是悠着点。
</p>

<p>
<a href="https://emacs-china.org/t/markdown-to-org-pandoc-filter/26424">一个改善 Markdown to Org 转换的 Pandoc Filter 脚本 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format">How to migrate Markdown files to Emacs org mode format - Emacs Stack Exchange</a>
</p></li>
</ul>

<p>
Ref：<a href="https://orgmode.org/manual/Exporting.html">Exporting (The Org Manual)</a>、<a href="https://orgmode.org/zh-CN/tools.html">工具 | Org mode</a>
</p>
</div>
</li>
<li><a id="org92f80a0"></a>Org with Zotero<br>
<div class="outline-text-5" id="text-org92f80a0">
<p>
书和论文的PDF文件，我现在全部放在<a href="https://www.zotero.org/">Zotero</a>。快速复制单个笔记到org-mode也挺简单：
</p>

<p>
通过下载这个<a href="https://raw.githubusercontent.com/Zotero-ODF-Scan/zotero-odf-scan/master/attic/Zotero%20Select%20Item.js">文件</a>到 zotero 资料目录下的 translators 文件下，将其命名为 `Zotero Select Item.js` ，重启 Zotero 后在编辑-&gt; 首选项中配置便捷复制的 Item Format 为 Zotero Select Item:
</p>

<p>
这样就可以自定义复制粘贴过去的格式了。
</p>


<div class="org-src-container">
<pre class="src src-js">{
<span style="color: #98be65;">"translatorID"</span>:<span style="color: #98be65;">"76a79119-3a32-453a-a0a9-c92640e3c93b"</span>,
<span style="color: #98be65;">"translatorType"</span>:<span style="color: #da8548; font-weight: bold;">2</span>,
<span style="color: #98be65;">"label"</span>:<span style="color: #98be65;">"Zotero Select Item"</span>,
<span style="color: #98be65;">"creator"</span>:<span style="color: #98be65;">"Scott Campbell, Avram Lyon"</span>,
<span style="color: #98be65;">"target"</span>:<span style="color: #98be65;">"html"</span>,
<span style="color: #98be65;">"minVersion"</span>:<span style="color: #98be65;">"2.0"</span>,
<span style="color: #98be65;">"maxVersion"</span>:<span style="color: #98be65;">""</span>,
<span style="color: #98be65;">"priority"</span>:<span style="color: #da8548; font-weight: bold;">200</span>,
<span style="color: #98be65;">"inRepository"</span>:<span style="color: #a9a1e1;">false</span>,
<span style="color: #98be65;">"lastUpdated"</span>:<span style="color: #98be65;">"2012-07-17 22:27:00"</span>
}

<span style="color: #51afef;">function</span> <span style="color: #c678dd;">doExport</span>() {
    <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">item</span>;
    <span style="color: #51afef;">while</span>(item = Zotero.nextItem()) {
        Zotero.write(<span style="color: #98be65;">"zotero://select/items/"</span>);
        <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">library_id</span> = item.libraryID ? item.libraryID : <span style="color: #da8548; font-weight: bold;">0</span>;
        Zotero.write(library_id+<span style="color: #98be65;">"_"</span>+item.key);
    }
}
</pre>
</div>

<p>
然后在Emacs的配置文件里加上：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #51afef;">(</span><span style="color: #a9a1e1;">org-link-set-parameters</span> <span style="color: #98be65;">"zotero"</span> <span style="color: #c678dd;">:follow</span>
                         <span style="color: #c678dd;">(</span><span style="color: #51afef;">lambda</span> <span style="color: #98be65;">(</span>zpath<span style="color: #98be65;">)</span>
                           <span style="color: #98be65;">(</span><span style="color: #a9a1e1;">browse-url</span>
                            <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">we get the "zotero:"-less url, so we put it back.</span>
                            <span style="color: #a9a1e1;">(</span><span style="color: #a9a1e1;">format</span> <span style="color: #98be65;">"zotero:%s"</span> zpath<span style="color: #a9a1e1;">)</span><span style="color: #98be65;">)</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>
</pre>
</div>

<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/">https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/</a></li>
<li><a href="https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/">https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/</a></li>
</ul>
</div>
</li>
<li><a id="org85026d8"></a>Org-mode美化<br>
<div class="outline-text-5" id="text-org85026d8">
<p>
我觉得原生的就挺好看，可读性也还好。
</p>

<ul class="org-ul">
<li><a href="https://github.com/minad/org-modern">minad/org-modern: :unicorn: Modern Org Style</a></li>
<li><a href="https://emacs-china.org/t/org/19458/3?page=3">想向各位道友收集一下美化 org 的配置 - Org-mode - Emacs China</a></li>
<li><a href="https://github.com/coldnew/pangu-spacing">coldnew/pangu-spacing：emacs minor-mode用于在中文/日文/韩文和英文字符之间添加空格</a></li>
<li><a href="https://remacs.fun/posts/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E6%88%91%E4%BB%AC%E6%80%8E%E4%B9%88%E7%8E%A9emacs1.-%E4%B8%AD%E8%8B%B1%E6%96%87%E8%BE%93%E5%85%A5%E6%97%B6%E7%9A%84%E7%A9%BA%E6%A0%BC/">大模型时代我们怎么玩Emacs：1. 中英文输入时的空格 | remacs的世界</a> 比pangu实用。</li>
</ul>

<div class="org-src-container">
<pre class="src src-nil">;; 设置标题大小
(after! org
  (custom-set-faces!
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold))

  (custom-set-faces!
    '(org-document-title :height 1.2)))

;;字体，设置正文大小
(setq doom-font (font-spec :family "霞鹜文楷等宽" :weight 'regular :size 14))

;; 设置行内make up，直接显示*粗体*，/斜体/，=高亮=，~代码~
(setq org-hide-emphasis-markers t)

;; 盘古，中英文混合排版美化
;;https://github.com/coldnew/pangu-spacing
(use-package pangu-spacing)
(add-hook 'org-mode-hook
          '(lambda ()
             (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))


</pre>
</div>
</div>
</li>
<li><a id="org21fb341"></a>Org-protocol<br>
<div class="outline-text-5" id="text-org21fb341">
<p>
Org-protocol可以在Emacs里更方便的剪藏网页内容，做after reading。也不是必须，多切换一次窗口也还好。
</p>

<ul class="org-ul">
<li><p>
protocol
</p>

<p>
<a href="https://emacs-china.org/t/org-capture/14190">求助: 在网页剪藏时用org-capture模板生成独立文件名 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-mode/8189/7">用org-mode做网页书签的可以进来看一下 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-protocol/8684">什么样才是正确的org-protocol姿势 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://www.orgroam.com/manual.html#Mac-OS">Org-roam User Manual-org-protocol</a>
</p></li>

<li><p>
插入网页连接：
</p>

<p>
<a href="https://emacs-china.org/t/emacs-firefox-org-link/23661">技巧分享：在 emacs 中获取 firefox 当前标签页并生成 org link</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-protocol-capture-html">org-protocol-capture-html </a>
</p>

<p>
或利用org-roam-capture-ref： <a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">https://www.zmonster.me/2020/06/27/org-roam-introduction.html</a>
</p>

<p>
或者使用浏览器插件：<a href="https://github.com/k08045kk/CopyTabTitleUrl">k08045kk/CopyTabTitleUrl</a>
</p>

<p>
Firefox这个反骨仔，经常不适配各种系统。比如不支持mac的applescript。
</p></li>
</ul>
</div>
</li>
<li><a id="org787f6cc"></a>网页摘录和after-reading<br>
<div class="outline-text-5" id="text-org787f6cc">
<p>
利用org-capture，做剪藏和摘录很方便。现在保存在`clip.org`文件里，可以在agenda里按时间线回顾，由于agenda里只有标题，也起到了类似Anki卡片回顾的作用：
</p>

<p>
有一个JavaScript我一直在用，可以选定一个网页的特定内容，在翻译和剪藏的时候挺有用，同时也微微提升了一点阅读体验。我用 <a href="https://github.com/OwO-Network/DeepLX">DeepLX</a>  通过沉浸式翻译如果单次翻译内容太多会报错和限制，Deepl的中文翻译还是吊打其他的。
</p>

<p>
下面的代码保存到书签，单击书签就可以了：
</p>

<div class="org-src-container">
<pre class="src src-nil">javascript:(function(){var e=document.body;const n=document.head.appendChild(document.createElement("style"));n.textContent=".mainonly { outline: 2px solid red; }";const t=CSS.supports("selector(:has(*))");function o(n){n instanceof HTMLElement&amp;&amp;(e.classList.remove("mainonly"),(e=n).classList.add("mainonly"))}function s(e){o(e.target)}function a(o){if(o.preventDefault(),t)n.textContent=":not(:has(.mainonly), .mainonly, .mainonly *) { display: none; }";else{n.textContent=":not(.mainonly *, .mainonly-ancestor) { display: none; }";var s=e;do{s.classList.add("mainonly-ancestor")}while(s=s.parentElement)}l()}function i(n){n.preventDefault(),n.deltaY&lt;0?o(e.parentElement):o(e.firstElementChild)}function l(){document.removeEventListener("mouseover",s),document.removeEventListener("click",a),document.removeEventListener("wheel",i)}document.addEventListener("mouseover",s),document.addEventListener("click",a),document.addEventListener("wheel",i,{passive:!1}),document.addEventListener("keydown",(function o(s){if("Escape"===s.key&amp;&amp;(n.remove(),document.removeEventListener("keydown",o),l(),e?.classList.remove("mainonly"),!t))for(const e of document.getElementsByClassName("mainonly-ancestor"))e.classList.remove("mainonly-ancestor")}))}())
</pre>
</div>

<p>
after-reading我一直用的 <a href="https://docs.omnivore.app/zh/">Omnivore</a>，开源免费，支持RSS和Newsletter，可以自动同步高亮标注、摘录到Obsidian和Logseq。这部分用来做 <a href="https://www.vandee.art/posts/2024-06-18-%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BF%9D%E9%B2%9C%E6%9C%9F-%E6%B5%81%E5%8A%A8%E7%9F%A5%E8%AF%86%E7%9A%84%E6%A3%80%E7%B4%A2/">流动知识的检索</a>，文档+RAG现在的项目也越来越多了。用AI来过滤、总结这些信息流很巴适。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee&rsquo;s Blog</a>
</p>

<p>
有条件直接上 <a href="https://readwise.io/">Readwise</a>，配合Notion、Obsidian、Logseq都挺好用。<a href="https://getpocket.com/home?src=navbar">Pocket</a>、<a href="https://github.com/usememos/memos">memos</a> 也挺不错，可以把阅读整合到PKM里。
</p>

<p>
<a href="https://n8n.akashio.com/welcome">欢迎来到 n8n 中文教程 | 简单易懂的现代魔法</a>这里给出了一个 omnivore 到 notion 的 workflow。
</p>

<p>
最近<a href="https://www.vandee.art/posts/2024-07-24-start-to-get-readwies/">还是入坑了 Readwise</a>。
</p>
</div>
<ul class="org-ul">
<li><a id="org1a37bb4"></a>tools<br>
<div class="outline-text-6" id="text-org1a37bb4">
<ul class="org-ul">
<li><p>
网站：<a href="https://jina.ai/reader/">https://jina.ai/reader/</a>
</p>

<p>
Github：<a href="https://github.com/jina-ai/reader">https://github.com/jina-ai/reader</a>
</p>

<p>
它可以提取网页内容并转换为markdown格式，还支持直接搜索，支持API。
</p>

<p>
Reader does two things:
</p>

<ul class="org-ul">
<li><b><b>Read</b></b>: It converts any URL to an <b><b>LLM-friendly</b></b> input with `<a href="https://r.jina.ai/https://your.url">https://r.jina.ai/https://your.url</a>`. Get improved output for your agent and RAG systems at no cost.</li>
<li><b><b>Search</b></b>: It searches the web for a given query with `<a href="https://s.jina.ai/your+query">https://s.jina.ai/your+query</a>`. This allows your LLMs to access the latest world knowledge from the web.</li>
</ul>

<p>
添加下面代码到书签保存，点击书签就可以提取网页内容到markdown格式了。
</p>

<div class="org-src-container">
<pre class="src src-javascript">  javascript: <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">currentUrl</span> = window.location.href;<span style="color: #51afef;">var</span> <span style="color: #dcaeea;">newUrl</span> = <span style="color: #98be65;">"https://r.jina.ai/"</span> + currentUrl;window.open(newUrl, <span style="color: #98be65;">'_blank'</span>);window.history.pushState({}, <span style="color: #98be65;">''</span>, currentUrl);
</pre>
</div></li>
</ul>


<p>
以这个工具为跳板，就可以干许多有意思的事情了。
</p>

<ul class="org-ul">
<li><a href="https://github.com/JimmyLv/BibiGPT-v1">JimmyLv/BibiGPT-v1</a> 这个项目可以自己部署，总结B站、YouTube、抖音等等的视频内容，挺好用。</li>

<li><a href="https://sspai.com/post/89828">u-Sir/drag-to-preview</a>，最近发现一个Firefox浏览器插件，可以选中网页链接拖拽弹出单独的窗口预览网页，在窗口外区域鼠标点击即可关闭，很符合我的胃口。</li>
</ul>
</div>
</li>
</ul>
</li>
<li><a id="org435e425"></a>输入法设置<br>
<div class="outline-text-5" id="text-org435e425">
<p>
由于使用了evil，如果使用系统的输入法，每次在`:w`保存的时候，需要来回切换中英。推荐两种解决方案：SIS和pyim。
</p>
</div>
<ul class="org-ul">
<li><a id="orgf3d4a3e"></a>SIS<br>
<div class="outline-text-6" id="text-orgf3d4a3e">
<p>
<a href="https://github.com/laishulu/emacs-smart-input-source">emacs-smart-input-source</a> 是一个可以自动切换输入法的Emacs包。
</p>

<p>
之前在配置SIS的时候，可能是mac系统的问题，安装macism之后，Emacs一直弹窗辅助功能设置，最近突然好了。SIS比pyim方便，不需要再内置输入法，可以直接用系统的输入法。
</p>

<div class="org-src-container">
<pre class="src src-nil">(use-package sis
  ;; :hook
  ;; enable the /context/ and /inline region/ mode for specific buffers
  ;; (((text-mode prog-mode) . sis-context-mode)
  ;;  ((text-mode prog-mode) . sis-inline-mode))

  :config
  ;; For MacOS
  (sis-ism-lazyman-config

   ;; English input source may be: "ABC", "US" or another one.
   ;; "com.apple.keylayout.ABC"
   "com.apple.keylayout.ABC"

   ;; Other language input source: "rime", "sogou" or another one.
   ;; "im.rime.inputmethod.Squirrel.Rime"
   "im.rime.inputmethod.Squirrel.Hans")

  ;; enable the /cursor color/ mode
  ;; (sis-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  (sis-global-respect-mode t)
  ;; enable the /context/ mode for all buffers
  (sis-global-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  (sis-global-inline-mode t)
  )

</pre>
</div>
</div>
</li>
<li><a id="org58e5702"></a>pyim<br>
<div class="outline-text-6" id="text-org58e5702">
<p>
<a href="https://github.com/tumashu/pyim">pyim</a> 也可以达到相同的效果。只是这个输入法是Emacs内置的。
</p>

<p>
可能是由于我用Homebrew安装的Emacs-plus，再加上使用的doomemacs，emacs报错：编译时无法找到 `emacs-module.h` ，一直无法在Emacs里加载 <a href="https://github.com/DogLooksGood/emacs-rime">emacs-rime</a> 。Emacs-rime的<a href="https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org#%E7%BC%96%E8%AF%91%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0-emacs-moduleh-">文档</a>里写加上`(rime-emacs-module-header-root &ldquo;~/emacs/include&rdquo;)`，我试了所有的Emacs可能的路径都不行。我在Linux-Ubuntu虚拟机里，没有任何问题。
</p>

<p>
这个输入法是Emacs里内置的，如果没有指定内置的输入法，会使用系统自带的。把内置的输入法设置好，同时也解决了中英混合输入的问题，在写代码的时候，来回切换输入法太磨叽了。
</p>

<p>
不知道是什么没设置好，每次新打开一个buffer都需要重新激活pyim，暂时先加了一个org-mode的hook，在org-mode里自动激活pyim。
</p>

<div class="org-src-container">
<pre class="src src-nil">(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))
</pre>
</div>



<p>
**pyim 设置**：
</p>

<div class="org-src-container">
<pre class="src src-nil">;;输入法 https://github.com/tumashu/pyim
(global-set-key (kbd "C-\\") 'toggle-input-method)
(use-package pyim
  :init
  :config
  (pyim-default-scheme 'xiaohe-shuangpin)
  (setq default-input-method "pyim")
  )

(use-package pyim-basedict
  :config
  (pyim-basedict-enable))

(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))

;; 设置 pyim 探针
;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
;; 我自己使用的中英文动态切换规则是：
;; 1. 光标只有在注释里面时，才可以输入中文。
;; 2. 光标前是汉字字符时，才能输入中文。
;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
(setq-default pyim-english-input-switch-functions
              '(;; pyim-probe-dynamic-english
                pyim-probe-isearch-mode
                ;; pyim-probe-program-mode
                pyim-probe-org-structure-template
                pyim-probe-evil-normal-mode
                ))

(setq-default pyim-punctuation-half-width-functions
              '(pyim-probe-punctuation-line-beginning
                pyim-probe-punctuation-after-punctuation))

;; 键位绑定，解绑，转换
;; 修改默认键位映射，取消command键位
(setq mac-option-modifier 'meta)

</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/os-smart-input-source/13436">（重新设计）中英文混打：OS输入法管理包 smart-input-source - Emacs-general - Emacs China</a></li>
</ul>
</div>
</li>
<li><a id="org9f94a0f"></a>RIME<br>
<div class="outline-text-6" id="text-org9f94a0f">
<p>
如果说PKM是纸，那么输入法就是笔。
</p>

<p>
再次强烈推荐 <a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p>

<p>
一个巨坑，最近的RIME更新在<a href="https://github.com/rime/squirrel/releases/tag/1.0.0">Release 1.0.0 · rime/squirrel</a>版本里改变了候选词横向和竖向的设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">style/horizontal 將徹底移除，雖然本版程序仍支持，但會被新控件的默認值覆蓋
請使用 candidate_list_layout: stacked/linear 和 text_orientation: horizontal/vertical
</pre>
</div>

<p>
而且最好直接在输入法外观的配置文件里，修改输入法外观的配置，而不是通用配置，反正我在通用设置里不起作用。
</p>

<p>
**下面是简单的安装步骤**：
</p>

<div class="org-src-container">
<pre class="src src-bash">;; mac:
;; mac rime: https://rime.im/download/
Homebrew: brew install --cask squirrel
&#25110;&#32773;&#30452;&#25509;&#19979;&#36733;
;; mac rime-ice
&#20351;&#29992;&#19996;&#39118;&#30772; plum &#23433;&#35013;: https://github.com/rime/plum
<span style="color: #ECBE7B;">curl</span> -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash

&#23433;&#35013; rime-ice:
&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#20840;&#37096;&#25991;&#20214;
bash rime-install iDvel/rime-ice:others/recipes/full

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#25152;&#26377;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span>&#21253;&#21547;&#19979;&#38754;&#19977;&#20010;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/all_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#25340;&#38899;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span> cn_dicts/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/cn_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032;&#33521;&#25991;&#35789;&#24211;&#25991;&#20214;<span style="color: #51afef;">&#65288;</span> en_dicts/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/en_dicts

&#8478; &#23433;&#35013;&#25110;&#26356;&#26032; opencc <span style="color: #51afef;">&#65288;</span> opencc/ &#30446;&#24405;&#20869;&#25152;&#26377;&#25991;&#20214;<span style="color: #51afef;">&#65289;</span>
bash rime-install iDvel/rime-ice:others/recipes/opencc

;;&#25110;&#20351;&#29992; rime-auto-deploy&#65306;https://github.com/Mark24Code/rime-auto-deploy&#65292;&#36825;&#20010;&#21644;plum&#21482;&#29992;&#36873;&#19968;&#20010;&#12290;

=======================================================
;;Linux
ibus:
https://github.com/rime/home/wiki/RimeWithIBus
<span style="color: #ECBE7B;">sudo</span> apt-get install ibus-rime                   <span style="color: #5B6268;">#</span><span style="color: #5B6268;">ibus</span>

fcitx5:
<span style="color: #ECBE7B;">sudo</span> pacman -Sy fcitx5-rime                      <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Arch Linux</span>
<span style="color: #ECBE7B;">sudo</span> apt update &amp;&amp; <span style="color: #ECBE7B;">sudo</span> apt install fcitx5-rime  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Ubuntu / Debian / Deepin</span>
<span style="color: #ECBE7B;">sudo</span> zypper install fcitx5-rime                  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">OpenSUSE</span>
<span style="color: #ECBE7B;">sudo</span> dnf install fcitx5-rime                     <span style="color: #5B6268;"># </span><span style="color: #5B6268;">Fedora</span>

plum and rime-ice&#65306;
<span style="color: #ECBE7B;">git</span> clone --depth <span style="color: #da8548; font-weight: bold;">1</span> https://github.com/rime/plum ~/plum

;; &#20999;&#25442;&#21040;&#19996;&#39118;&#30772;&#30340;&#30446;&#24405;
<span style="color: #ECBE7B;">cd</span> ~/plum

;; &#22914;&#26524;&#20320;&#20351;&#29992;Fcitx5&#65292;&#20320;&#38656;&#35201;&#21152;&#20837;&#21442;&#25968;&#65292;&#35753;&#19996;&#39118;&#30772;&#25226;&#37197;&#32622;&#25991;&#20214;&#20889;&#21040;&#27491;&#30830;&#30340;&#20301;&#32622;
<span style="color: #dcaeea;">rime_frontend</span>=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full

;; &#22914;&#26524;&#20320;&#26159;&#29992;IBus&#65292;&#21017;&#19981;&#38656;&#21152;&#21442;&#25968;&#65292;&#22240;&#20026;&#19996;&#39118;&#30772;&#40664;&#35748;&#26159;&#20026;IBus&#29256;&#30340;RIME&#25171;&#36896;&#12290;
bash rime-install iDvel/rime-ice:others/recipes/full

</pre>
</div>


<p>
其他可以参考下面的文章:
</p>

<ul class="org-ul">
<li><a href="https://sspai.com/post/84373#!">自由输入法 RIME 简明配置指南 - 少数派</a></li>

<li><a href="https://sspai.com/post/89281">RIME + 雾凇拼音，打造绝佳的开源文字输入体验 - 少数派</a></li>

<li><a href="https://sspai.com/post/90068">让 RIME 体验更上一层楼：如何用 MediaWiki 扩展词库 - 少数派</a>  导入wiki</li>

<li><a href="https://github.com/gshang2017/rime-dict">gshang2017/rime-dict: RIME输入法(拼音)自用词库(包含英语，基础，维基，搜狗等词库)，词频基于腾讯AI向量词库逆序生成。</a>  自建词库，导入专业领域词汇</li>
</ul>
</div>
</li>
</ul>
</li>
<li><a id="org681b3a1"></a>Others<br>
<div class="outline-text-5" id="text-org681b3a1">
<ul class="org-ul">
<li><a href="https://github.com/lijigang/100-questions-about-orgmode">lijigang/100-questions-about-orgmode: It&rsquo;s all about <b>orgmode</b> !</a></li>

<li><a href="https://emacs-china.org/t/emacs-immersive-translate-emacs/24990">emacs-immersive-translate: Emacs 版本的沉浸式翻译（支持多个翻译后端） - Emacs-general - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/org-ql-columnview-org-roam-org-capture-org-super-links/21599">混用 org-ql、columnview、org-roam、org-capture、org-super-links 塑造我的笔记流程 - Org-mode - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/emacs-package/19922">我想分享一下我的emacs配置和学习思路，并向大家介绍一些我觉得有用的package - Emacs-general - Emacs China</a></li>

<li><p>
<a href="https://emacs-china.org/t/ekg-flomo/27505/12">https://emacs-china.org/t/ekg-flomo/27505/12</a>
</p>

<p>
<a href="https://github.com/ahyatt/ekg">https://github.com/ahyatt/ekg</a>
</p>

<p>
ekg：提供一个类似obsidian里dataview的查询汇总功能
</p></li>

<li><p>
<a href="https://github.com/protesilaos/denote">https://github.com/protesilaos/denote</a>
</p>

<p>
denote：提供类似org-roam的双链，快速插入等功能
</p></li>

<li><p>
Emacs里的其他笔记相关使用包
</p>

<p>
<a href="https://github.com/jrblevin/deft">jrblevin/deft: Deft for Emacs</a>
</p>

<p>
<a href="https://github.com/caiorss/org-wiki">caiorss/org-wiki: Wiki for Emacs org-mode built on top of Emacs org-mode.</a>
</p>

<p>
<a href="https://github.com/Kungsgeten/org-brain">Kungsgeten/org-brain: Org-mode wiki + concept-mapping</a>
</p>

<p>
<a href="https://github.com/weirdNox/org-noter">weirdNox/org-noter: Emacs document annotator, using Org-mode</a>
</p>

<p>
<a href="https://github.com/toshism/org-super-links">toshism/org-super-links: Package to create links with auto backlinks</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-ql">alphapapa/org-ql: A searching tool for Org-mode.</a>
</p>

<p>
<a href="https://www.armindarvish.com/post/web_omni_search_in_emacs_with_consult-web/">Web/Omni Search In Emacs with consult-web or Ditching the Browser&rsquo;s Default Search Engine</a>
</p></li>

<li><a href="https://mischavandenburg.com/zet/neovim-zettelkasten/">我的 Neovim Zettelkasten：我如何使用 Vim 和 Bash 在 Markdown 中做笔记 |米沙·范登伯格</a> 很强，之前用bash来生成md笔记的思路一下子扩展了。使用CLI来做笔记是一个很终极的方案。</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-org9a94d6a" class="outline-3">
<h3 id="org9a94d6a">PKM with LLM</h3>
<div class="outline-text-3" id="text-org9a94d6a">
<p>
本地笔记的优势除了隐私性，再就是，数据在自己手上，就可以干很多事。把本地的笔记文档结合LLM做思维拓展，基于个人思维习惯更精确的问答。如果说有时候双链不足以串联整个思维链条，下面这些工具如虎添翼。
</p>

<p>
看到一个大佬已经用Ollama、RAG在MacBook Pro M3 Max上实现了基于obsidian的个人AI知识助手：<a href="https://lopespm.com/machine_learning/2024/06/24/personal-llm.html">个人本地 (Llama3 8B) LLM 使用 WhatsApp + Obsidian 数据扩展 - Byte Tank</a>，和我的思路基本一致。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee&rsquo;s Blog</a>
</p>

<p>
很久之前，看到一篇文章提出了一个观点：随着和LLM互动的增多，特别是现在各种LLM平台，ChatGPT、Claude、perplexity等等，查询、回顾、汇总这些问答是一个值得注意的点。
</p>

<p>
现在我的日常问答都在本地使用Open WebUI，可以导出聊天还有数据库可以直接备份，甚至还可以给对话打tag，当然也可以搜索。
</p>
</div>
<div id="outline-container-orgaad00ff" class="outline-4">
<h4 id="orgaad00ff">工具推荐</h4>
<div class="outline-text-4" id="text-orgaad00ff">
</div>
<ul class="org-ul">
<li><a id="org8545b9d"></a>Ollama<br>
<div class="outline-text-5" id="text-org8545b9d">
<p>
<a href="https://ollama.com/">Ollama</a> 可以本地部署大语言模型，目前GitHub 69.1k star，一直在用。obsidian，Emacs，Logseq都支持。如果说Cloudflare是赛博活菩萨，那ollama就是LLM筋斗云。
</p>

<p>
ollama支持主流的开源模型如llama3，所有支持模型可查看：
</p>

<p>
**Model library**：Ollama supports a list of models available on <a href="https://ollama.com/library">ollama.com/library</a>
</p>

<p>
相关文章：
</p>

<ul class="org-ul">
<li><a href="https://blog.inoki.cc/2024/04/16/Ollama-cn/">Ollama 架构解析 | Inoki in the world</a></li>
</ul>
</div>
</li>
<li><a id="org54080d0"></a>Open WebUI<br>
<div class="outline-text-5" id="text-org54080d0">
<p>
<a href="https://github.com/open-webui/open-webui">Open WebUI</a> 提供一个WebUI运行本地LLM，目前GitHub 31k star。良好的兼容ollama，聊天数据本地保存，可本地导入文档做RAG查询。
</p>

<p>
<a href="https://openwebui.com/#open-webui-community">社区</a>提供了插件和功能，质变的是：可以让本地LLM搜索web的内容。
</p>

<p>
Open WebUI 在2024-10-06的版本中<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes，不过只支持原生的HTML和CSS。还更新了Overview，可以在白板里展示对话的内容，太实用了，史诗级更新！
</p>

<p>
**其他主要功能**：
</p>

<ul class="org-ul">
<li>📚 本地 RAG 集成：通过突破性的检索增强生成 (RAG) 支持深入探索聊天交互的未来。此功能将文档交互无缝集成到您的聊天体验中。您可以将文档直接加载到聊天中或将文件添加到文档库中，在查询之前使用 `#` 命令轻松访问它们。</li>

<li>🔍 RAG 的网络搜索：使用 `SearXNG` 、 `Google PSE` 、 `Brave Search` 、 `serpstack` 、 `serper` 、 `Serply` 、 `DuckDuckGo` 和 `TavilySearch` 并将结果直接注入您的聊天体验中。</li>

<li>🌐 网页浏览功能：使用 `#` 命令后跟 URL，将网站无缝集成到您的聊天体验中。此功能允许您将网络内容直接合并到您的对话中，从而增强交互的丰富性和深度。</li>
</ul>

<p>
**docker部署相当简单**：
</p>

<ul class="org-ul">
<li>CLI: `docker run -d -p 3000:8080 &#x2013;add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data &#x2013;name open-webui &#x2013;restart always ghcr.io/open-webui/open-webui:main`</li>

<li><p>
Docker compose: <a href="https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml">https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml</a>
</p>

<div class="org-src-container">
<pre class="src src-docker">services:
    ollama:
      volumes:
        - ollama:/root/.ollama
      container_name: ollama
      pull_policy: always
      tty: true
      restart: unless-stopped
      image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}

    open-webui:
      build:
        context: .
        args:
          OLLAMA_BASE_URL: '/ollama'
        dockerfile: Dockerfile
      image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
      container_name: open-webui
      volumes:
        - open-webui:/app/backend/data
      depends_on:
        - ollama
      ports:
        - ${OPEN_WEBUI_PORT-3000}:8080
      environment:
        - 'OLLAMA_BASE_URL=http://ollama:11434'
        - 'WEBUI_SECRET_KEY='
      extra_hosts:
        - host.docker.internal:host-gateway
      restart: unless-stopped

  volumes:
    ollama: {}
    open-webui: {}
</pre>
</div></li>

<li><a href="https://docs.openwebui.com/getting-started/updating"> Updating | Open WebUI</a></li>
</ul>

<p>
Ref：<a href="https://docs.openwebui.com/">Open WebUI 官方手册</a>
</p>
</div>
</li>
<li><a id="org65a5ec7"></a>Aider<br>
<div class="outline-text-5" id="text-org65a5ec7">
<p>
<a href="https://github.com/Aider-AI/aider">Aider</a> 最近挺火的一个CLI AI助手，开源，GitHub 20.3K Star，基本可以支持市面上的所有模型。当然也支持ollama，在Emacs里有个大佬做了个<a href="https://github.com/tninja/aider.el">aider.el</a>。
</p>

<p>
可以像cursor一样有diff，修改代码，比之前看到的许多CLI AI助手（例如 <a href="https://github.com/ErikBjare/gptme">gtpme</a>、<a href="https://github.com/BuilderIO/ai-shell">ai-shell</a> 、<a href="https://github.com/cline/cline">cline</a> 、<a href="https://github.com/Doriandarko/claude-engineer">claude-enginner</a>）全面许多。
</p>

<p>
先在本机的Python环境里<a href="https://aider.chat/docs/install.html">Install aider</a>，我用的conda，在terminal里：
</p>

<div class="org-src-container">
<pre class="src src-bash">conda activate yourenv
python -m pip install -U aider-chat
</pre>
</div>

<p>
实测在doomEmacs里要使用ollama的本地模型需要这样写：
</p>

<div class="org-src-container">
<pre class="src src-lisp">(use-package aider
  <span style="color: #c678dd;">:config</span>
  (setq aider-args '(<span style="color: #98be65;">"--model"</span> <span style="color: #98be65;">"ollama/llama3.1"</span>))
  (setenv <span style="color: #98be65;">"OLLAMA_API_BASE"</span> <span style="color: #98be65;">"http://127.0.0.1:11434"</span>)
  (global-set-key (kbd <span style="color: #98be65;">"C-c a"</span>) 'aider-transient-menu)
  )
</pre>
</div>

<p>
另外在package.el里的安装：
</p>

<div class="org-src-container">
<pre class="src src-nil">(package! aider
  :recipe (:host github :repo "tninja/aider.el" :files ("aider.el")))
</pre>
</div>

<p>
在Emacs里激活conda环境正常运行Aider.el。
</p>

<p>
Ref：<a href="https://emacs-china.org/t/ai-aider-emacs-aider-el/28064/15">抛砖引玉: 介绍命令行AI编程工具aider以及emacs集成aider.el - Emacs-general - Emacs China</a>
</p>
</div>
</li>
<li><a id="orgf356fce"></a>gptel<br>
<div class="outline-text-5" id="text-orgf356fce">
<p>
<a href="https://github.com/karthink/gptel">gptel: A simple LLM client for Emacs</a> 是Emacs的一个包，可以在Emacs里直接和LLM对话，目前在用。
</p>


<p>
**最近更新了**，可以支持直接添加文件、文本到上下文，awesome！居然还支持转换MD格式到Org？
</p>


<p>
您可以使用 gptel 的查询包含其他文本区域、缓冲区或文件。这个附加上下文是“实时”的，而不是快照。添加后，将在每次查询时扫描并包含区域、缓冲区或文件。
</p>

<p>
您可以从菜单中将选定的区域、缓冲区或文件添加到 gptel 的上下文中，或调用 `gptel-add` 。 （要添加文件，请在 Dired 中使用 `gptel-add` 或使用专用的 `gptel-add-file` 命令。）
</p>

<p>
Ref: <a href="https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests">https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests</a>
</p>


<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">To add context 添加上下文</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">gptel-add</td>
<td class="org-left">Add/remove a region or buffer to gptel’s context.  Add/remove marked files in Dired. 在 gptel 上下文中添加/删除区域或缓冲区。在 Dired 中添加/删除标记的文件。</td>
</tr>

<tr>
<td class="org-left">gptel-add-file</td>
<td class="org-left">Add a (text-readable) file to gptel’s context.  Also available from the transient menu. 将（文本可读）文件添加到 gptel 的上下文中。也可以从瞬态菜单中获得。</td>
</tr>
</tbody>
</table>



<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #5B6268;">;;</span><span style="color: #5B6268;">&#22522;&#26412;&#37197;&#32622;</span>
<span style="color: #51afef;">(</span><span style="color: #51afef;">use-package!</span> gptel
 <span style="color: #c678dd;">:config</span>
 <span style="color: #c678dd;">(</span><span style="color: #51afef;">setq!</span> gptel-api-key <span style="color: #98be65;">"your key"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>


<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">:key can be a function that returns the API key.</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-gemini</span> <span style="color: #98be65;">"Gemini"</span> <span style="color: #c678dd;">:key</span> <span style="color: #98be65;">"YOUR_GEMINI_API_KEY"</span> <span style="color: #c678dd;">:stream</span> t<span style="color: #51afef;">)</span>

<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">Perplexity offers an OpenAI compatible API</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-openai</span> <span style="color: #98be65;">"Perplexity"</span>         <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Any name you want</span>
  <span style="color: #c678dd;">:host</span> <span style="color: #98be65;">"api.perplexity.ai"</span>
  <span style="color: #c678dd;">:key</span> <span style="color: #98be65;">"your-api-key"</span>                   <span style="color: #5B6268;">;</span><span style="color: #5B6268;">can be a function that returns the key</span>
  <span style="color: #c678dd;">:endpoint</span> <span style="color: #98be65;">"/chat/completions"</span>
  <span style="color: #c678dd;">:stream</span> t
  <span style="color: #c678dd;">:models</span> <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #5B6268;">;; </span><span style="color: #5B6268;">has many more, check perplexity.ai</span>
            <span style="color: #98be65;">"pplx-7b-chat"</span>
            <span style="color: #98be65;">"pplx-70b-chat"</span>
            <span style="color: #98be65;">"pplx-7b-online"</span>
            <span style="color: #98be65;">"pplx-70b-online"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>

<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">or</span>
<span style="color: #5B6268;">;; </span><span style="color: #5B6268;">Ollama</span>
<span style="color: #51afef;">(</span><span style="color: #c678dd;">gptel-make-ollama</span> <span style="color: #98be65;">"Ollama"</span>             <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Any name of your choosing</span>
  <span style="color: #c678dd;">:host</span> <span style="color: #98be65;">"localhost:11434"</span>               <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Where it's running</span>
  <span style="color: #c678dd;">:stream</span> t                             <span style="color: #5B6268;">;</span><span style="color: #5B6268;">Stream responses</span>
  <span style="color: #c678dd;">:models</span> <span style="color: #51afef;">'</span><span style="color: #c678dd;">(</span><span style="color: #98be65;">"mistral:latest"</span><span style="color: #c678dd;">)</span><span style="color: #51afef;">)</span>          <span style="color: #5B6268;">;</span><span style="color: #5B6268;">List of models</span>
</pre>
</div>
</div>
</li>
<li><a id="org754fe80"></a><b>Kotaemon</b><br>
<div class="outline-text-5" id="text-org754fe80">
<p>
从发现到现在差不多就一个多星期，GitHub直接飙升到10.9K star，win、mac、Linux都支持。边用边学习它的RAG构建框架，支持ollama，支持docker。
</p>

<p>
GitHub: <a href="https://github.com/Cinnamon/kotaemon">https://github.com/Cinnamon/kotaemon</a>
</p>

<p>
Hugging Face 在线体验: <a href="https://huggingface.co/spaces/cin-model/kotaemon-demo">https://huggingface.co/spaces/cin-model/kotaemon-demo</a>
</p>

<p>
官方介绍：
</p>

<p>
This project serves as a functional RAG UI for both end users who want to do QA on their documents and developers who want to build their own RAG pipeline.
</p>

<ul class="org-ul">
<li>For end users:
<ul class="org-ul">
<li>A clean &amp; minimalistic UI for RAG-based QA.</li>
<li>Supports LLM API providers (OpenAI, AzureOpenAI, Cohere, etc) and local LLMs (via `ollama` and `llama-cpp-python`).</li>
<li>Easy installation scripts.</li>
</ul></li>
<li>For developers:
<ul class="org-ul">
<li>A framework for building your own RAG-based document QA pipeline.</li>
<li>Customize and see your RAG pipeline in action with the provided UI (built with <a href="https://github.com/gradio-app/gradio">Gradio</a>).</li>
<li>If you use Gradio for development, check out our theme here: <a href="https://github.com/lone17/kotaemon-gradio-theme">kotaemon-gradio-theme</a>.</li>
</ul></li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org7b88988" class="outline-2">
<h2 id="org7b88988">ChangeLog</h2>
<div class="outline-text-2" id="text-org7b88988">
<ul class="org-ul">
<li><p>
2024-09-13: 校对文档。在使用了Nvim做MD笔记一个月之后，还是割舍不了org-mode的编辑体验，还有agenda。lisp的可玩性比lua还是高一些，比如<a href="https://github.com/jwiegley/dot-emacs/blob/master/lisp/org-roam-logseq.el">dot-emacs/lisp/org-roam-logseq.el at master · jwiegley/dot-emacs</a>这是一个把org-roam和Logseq联用的el。
</p>

<p>
<a href="https://nicholas.carlini.com/writing/2024/how-i-use-ai.html">How I Use &ldquo;AI&rdquo;</a> 许多远古大佬还是在用Emacs，这点就足够我继续探索lisp的语言哲学了。<a href="https://x.com/oran_ge/status/1834253705149133225">orange.ai on X: "采访《汉语新解》作者李继刚：为什么会用 Lisp？ </a>,最近大火的汉语新解的prompt就是lisp语法写的。
</p></li>

<li><p>
2024-10-09：更新了输入法设置，加入sis的配置方案。Open WebUI最近<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了，支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes.
</p>

<p>
还有一大堆新更新。
</p></li>

<li>2024-10-13: 增加了 Aider (一个CLI AI编程助手)在Emacs里的安装。最近开源的从代码到部署的 <a href="https://github.com/stackblitz/bolt.new">bolt.new</a>  也很强，还有Pythagora的 <a href="https://github.com/Pythagora-io/gpt-pilot">gpt-pilot</a>，AI辅助编程的项目越来越多了，感谢cursor带来了这么多的竞争者。</li>
<li>2024-10-24: 将 MD 文档转换成 org 文档的校对，删除了部分不必要的介绍。</li>
</ul>
</div>
</div>
<div id="outline-container-org004a777" class="outline-2">
<h2 id="org004a777">Thanks</h2>
<div class="outline-text-2" id="text-org004a777">
<p>
这个手册会持续更新，如果对你有所帮助，我会很开心。
</p>

<p>
另见：<a href="https://www.vandee.art/posts/2024-08-02-nvim-pkm-manual/">PKM（个人知识管理）构建手册 - Nvim</a>
</p>

<p>
这里是我日常使用的实用小工具： <a href="https://www.vandee.art/posts/2024-07-26-useful-tools-recommended/">实用小玩意收集</a>
</p>

<p>
Imagining and creating！
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-emacs.html">Emacs</a> <a href="https://www.vandee.art/tag-org.html">Org</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[Org]]></category>
  <link>https://www.vandee.art/2024-05-22-org-pkm-manual.html</link>
  <guid>https://www.vandee.art/2024-05-22-org-pkm-manual.html</guid>
  <pubDate>Wed, 22 May 2024 19:47:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[也说说艺术的价值]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge7d9950">《现代艺术150年》</a></li>
<li><a href="#orgfc8a8f5">艺术简史</a></li>
<li><a href="#org361ad27">艺术的价值</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orge7d9950" class="outline-2">
<h2 id="orge7d9950">《现代艺术150年》</h2>
<div class="outline-text-2" id="text-orge7d9950">
<p>
<a href="https://www.bilibili.com/video/BV1ax4y1z7Tr/">拍卖网站上盲买了一幅毕加索，只为告诉你什么叫做艺术之殇</a> ，刷到了这个视频。
</p>

<p>
先闲聊几句养号。这个概念是一年前在一个帖子里看到，大概意思是：大数据和AI分析用户数据是不可避免的，既然这样就利用这个机制，让它来养号，一个号专门学习，只搜索哪些内容。抖音已经很久没用了，并不是内容的问题，根本原因是不方便我RSS订阅，再加上开屏自动播放突然出现的声音和画面让我比较反感。在Twitter建了几个分类的关注列表，B站上面因为长年搜索艺术、哲学、音乐相关的内容，主动获取信息的时候基本上大数据推的也是这些，再加上被动的RSS订阅定期推送关注的大佬的博客和newsletter，目前信息源就养成了这样。
</p>

<p>
回到这个视频，作者在视频里提到：
</p>
<blockquote>
<p>
毕加索远不是我个人喜欢的那一类艺术家，因为他太不纯粹了，虽然毕加索对于现代艺术的贡献是毋庸置疑的，但是他的创作真的太多太杂也太乱了，并且我可以说他那些作品里面95%以上都是没有任何艺术价值的商品。
</p>

<p>
威尔贡培兹的现代艺术150年，我感觉挺有意思的，就也买来看了看，里面提到了一个很有趣的观点，他说销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。贡培兹的意思很明确，那就是在现代社会的语境下，在资本主义的运作下，一栋房子好不好，一件艺术品美不美其实并没有那么重要，所谓的价值只不过是纯纯的附加值罢了。
</p>

<p>
但我只想说，时代造就艺术，所以艺术的问题就是时代的问题，我不愿意过多地去妄断这些艺术，现代艺术也好，当代艺术也好，是因为不管他们有什么千奇百怪的问题，最终都会反噬到我们这个社会，反射到我们每一个个体上面。
</p>
</blockquote>

<p>
<a href="https://book.douban.com/subject/26854318/">《现代艺术150年》</a>已经加入书单，再顺便提一嘴<a href="https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram">https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram</a> bot，会更新最新的可用域名，网上查到的许多都是钓鱼网站。这也是没法，他们天天要和FBI躲猫猫。（支持正版！）
</p>

<p>
现代艺术商业性远大于艺术性，时代造就艺术，所以说，艺术的问题就是时代的问题。很赞同作者的看法，另外我也不太喜欢毕加索过于商业化的一面，但这并不妨碍我对毕加索是个天才的定论。不吹不黑，相比之下，梵高、高更、塞尚这些差不多同世纪的艺术画家，确实纯粹一些。窦唯现在好像只倾心于北京的京酱面，彻底修仙了。
</p>

<p>
今天思考的问题是，艺术价值与纯粹的问题。
</p>
</div>
</div>
<div id="outline-container-orgfc8a8f5" class="outline-2">
<h2 id="orgfc8a8f5">艺术简史</h2>
<div class="outline-text-2" id="text-orgfc8a8f5">
<p>
我不是什么艺术科班学生，也没有特别出众的艺术特长，更没有什么实际的艺术运作经历，只是一个艺术爱好者，平常拍拍照、唱唱歌、录录音（写谱还在学，AI赶紧出个自动写谱的！），纯粹是瞎聊。有一个概念是<a href="https://wangyurui.com/posts/si-wei-mo-xing-04-si-xiang-shi-yan-5744df28">思想实验</a>，我就勉强把自己的瞎想往上面靠了。在想象力方面，我还是对自己有信心的。
</p>

<p>
现阶段我对于价值的思考的底层逻辑，很大一部分来源于马克思的《资本论》，勉强看懂了开头。再加上一点点曼昆的《经济学原理》、亚当·斯密的《国富论》柏拉图的《理想国》。而对于艺术的理论认知也仅仅来源于《艺术与视知觉》、《艺术的故事》、原研哉的《设计中的设计》（强烈推荐）。
</p>

<p>
在比较认真的谈论一个具体事情的时候，摆出自己观点之前，阐明自己的理论和来源，我认为是很有必要的，观点都是有倾向性和局限性的。
</p>

<p>
下面正式开始，先简单过一遍艺术的发展史（主要是绘画史，比较可考，音乐能固定下来那是太近代的事了，许多艺术风格概念的来源也是绘画）。
</p>

<p>
从艺术的诞生开始说起的话，史前时期的原始部落会做一些人偶和泥巴雕塑，到了古埃及时期，法老陵墓里的壁画，艺术风格或者说艺术形式开始出现雏形。当时艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描 绘成从偶然碰上的角度看到的样子。他们是**根据记忆作画**，所遵循的一些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。
</p>

<blockquote>
<p>
这大概跟他们的绘画必须为另一种目的服务有关系。当时最关紧要的不是好看不好看，而是完整不完整。艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描绘成从偶然碰上的角度看到的样子。他们是根据记忆作画，所遵循的一 些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。事实上，他们的做法很像画地图，不像作画。埃及人处理这个问题时内心没有任何不安。他们会径直把池塘画成 从上面看、把树木画成从侧面看的样子。然而池塘里的鱼禽若从上面看则很难辨认，所以就把它们画成侧面图。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
古埃及时期，艺术创作更多的服务于目的，到了希腊和罗马时期，艺术家开始更多的表达自己想表达的内容，肖像画和雕塑中人的肖像体现的很明显，古埃及时期和希腊时期的肖像都没有具体的表情和神态，因为那个时期艺术服务于具体的目的，肖像更像是一种象征，象征神和君王，但到了罗马，艺术家开始注重这些细节，并敢于在作品里呈现。而在希腊时期，画家们有一项压倒一切的伟大发现，即发现了短缩法 （foreshortening），希腊艺术家使用衣饰去标出人体的主要分界，这类手法仍然表明他们是多么注重关于形式的知识，并且希腊时期的艺术家开始研究肌肉、骨骼进一步运用知识来创作，这正是严格地循规蹈矩和寓变化于规矩之中二者所达到的平衡。许多现代的艺术手法依然能在其中找到影子。
</p>

<p>
简单来说，随着人类认知的提升，艺术创作的目的、过程、技术、手法，都在发生着微妙的变化。以古埃及到古罗马时期为例，艺术家从根据记忆作画，尽可能的保留记忆中重要的画面，目的更多的是记录，到后来逐渐开始运用知识来重新定义表现的形式与重点。
</p>

<p>
中间经历了伟大的文艺复兴和宗教改革，经过19世纪晚期的印象派（主要是想提一提梵高），来到了20世纪前半叶，表现主义（蒙克-尖叫，石版画）、抽象派和立体主义（蒙德里安-红，黑，蓝，黄和灰的构图、毕加索Pablo Picasso-小提琴和葡萄），再到超现实主义（萨尔瓦多·达利Salvador Dali-永恒的记忆）。其实纵观艺术的历史，和思想史差不多，艺术风格的演变基本围绕着：现实和虚拟这两个对立面。
</p>

<p>
古埃及时期，其实也是为了写实才画出埃及壁画上的侧身人面像，到了中世纪开始涌现大量宗教题材的作品，巴洛克和宗教改革之后，18世纪中晚期画家基本就是皇家御用的肖像画照相机了，到了19世纪工业革命时期，因为出现了大量的没有灵魂的流程化工业艺术加工品，在加上对学院派过于循规蹈矩和各个学院派系之间的争斗（就好像我哈佛的就是瞧不起剑桥的），艺术家们逐渐在以巴黎蒙马特区（Montmartre）的咖啡馆中开始讨论新的艺术概念。居斯塔夫·库尔贝（Gustave Courbet, 1819-1877）1855年，在巴黎的一座棚屋里开个人画展的时候，给画展取名为（现实主义——G·库尔贝画展》（Le Realisme, G·Courbet），“现实主义”革命开始，这个现实主义主要的意思是要展现自然真实的光影，而不是学院派过于追求技法的那种在画室内纯写实却忽略了自然里的各种不可用公式固定下来的自然变化，学院期望艺术家们以神话、宗教形象、历史或者古典 风俗习惯为基础，用一种把主题理想化的风格来创作他们的作品，印象派艺术家从室内走向室外，通过拆除工作室与实际生活之间的壁垒而改变了游戏规则。之后以爱德华·马奈（Édouard Manet, 1832—1883）、克劳德·莫奈（Claude Monet, 1840-1926）为代表，印象派开始萌芽。
</p>

<p>
从现实主义革命开始，现代艺术的风格就一直在争斗，这个时期的市场经济也发达许多，资本主义也逐渐成熟，艺术家们自己也比较迷茫，参照传统的艺术风格吧，印象派已经说明太传统的技法反而不能反映出时时都在变化的大自然环境，不符合人眼最直观的“印象”，创新一些吧，大佬就那么几个可以迎合市场需求的。到了现代的超现实主义之后，我个人感觉，艺术风格已经是一个非常宽泛的概念了，主流的传统艺术风格已经在各派的争斗当中演变成许多叫不出名的分支。引用《艺术的故事》里作者感叹：
</p>

<blockquote>
<p>
在这里，我们终于回到我们的出发点。实际上根本没有艺术其物。 只有艺术家，他们是男男女女，具有绝佳的天资，善于平衡形状和色彩 以达到“合适”的效果；更难得的是，他们是具有正直性格的人，绝不肯在半途止步，时刻准备放弃所有省事的效果，放弃所有表面上的成 功，去经历诚实的工作中的辛劳和痛苦。我们相信永远都会有艺术家诞生。但是会不会也有艺术？这在同样大的程度上也有赖于我们自己，亦即艺术家的公众。通过我们的冷漠或我们的关心，通过我们的成见或们的理解，我们还是可以决定事情的结局。恰恰是我们自己，必须保证传统的命脉不致中断，保证艺术家仍然有机会去丰富那串宝贵的珍珠， 那是往昔留给我们的传家之宝。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
艺术好像其实从来就不存在，我们日常所说的艺术、艺术的价值，演变为了，艺术品的商品价格、公众和时代对于艺术家、艺术品的风评与潮流。被时代认可的风格，才能成为历史中叫得出名字的艺术，存在的是艺术品，而不是艺术。
</p>
</div>
</div>
<div id="outline-container-org361ad27" class="outline-2">
<h2 id="org361ad27">艺术的价值</h2>
<div class="outline-text-2" id="text-org361ad27">
<p>
确实，到了现在，如同开始提到的那个视频里所说，销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。资本也在很大程度上影响着艺术。
</p>

<p>
到这里，悖论就显而易见了：如果说艺术家是追求纯粹的表达，但艺术作品的价值体现从来就不是一个可以纯粹的过程，那现实里存在纯粹的艺术么？如果说艺术家不是追求纯粹的表达，那艺术作品的价值是从什么而抽象出来的？随意一个有一定劳动价值的作品就可以称作为艺术品，并附加上艺术品的价值么？（严格区分艺术、艺术家、艺术作品这三个概念）
</p>

<p>
我现在的想法是：艺术创作肯定是劳动的一种，既然是劳动的一种，按照马克思《资本论》里关于价值的理论，这种自由的、自发的劳动的价值，一定会对象化到一个对象上（暂时称作 <b>art object</b> ），对于商品，劳动者的劳动价值就对象化到了商品的价值也就是货币。无论在那个时代，art object是一直都存在的，从远古时代到现代，它提供的美的欣赏的价值一直没有变化，创造这个过程本身的价值也没有发生变化。人类创造这个art object是自然自发的行为，来源于生存需求之上的审美需求以及想象力、想象的表达，一部分也来自于无聊。无聊的时候，人就会找事情做，让自己不无聊。人类如果没有艺术创作，没有艺术真的会无聊死的。我无法想象，没有音乐、没有绘画、没有艺术设计的世界，就好像一切突然都失去了色彩，只剩下空洞和死板。
</p>

<p>
但艺术家也要生存，所以，art object 的一部分对象化到商品与货币上是天经地义的。更何况最开始，艺术家根本不存在，做雕塑和画像也没有特定的艺术创作目的，只是在工作和劳动。人类不同时代的认知决定了不同的艺术形式与概念，艺术品的商业价值、商品价值更是如此。艺术品的art object 和艺术品的拍卖价格这两个价值也其实并不冲突，拍卖价格是社会共同价值规律形成的，这同样是艺术的一部分。无法流通到社会的艺术品，独有自己的art object也就无法被社会共同价值衡量。
</p>

<p>
因此，简单来说：art object是对个人的美的价值，而艺术品的商品价值是对外的社会共同价值。说人话就是，我喜欢什么是我的事，它之多钱是它的事，这也正是艺术自由的地方，人人都可以保有自己的art object。
</p>

<p>
写到这里突然让我想到了电影《私人定制》里，王宝强那个弹棉花的章节。李成儒扮演的大导演为了摆脱俗，追求极致的雅，和王宝强换血，最后去弹棉花去了。无法被人欣赏的艺术品，也就是失去了社会共同价值，可能也就不能称作为一个艺术品了，因为艺术品是需要欣赏对象的，艺术家和欣赏对象共同加起来才是艺术品。我一个人天天在街上拿着一幅画喊，我邻居画的这幅画可好看了！喊到喉咙破了，也涨不了几毛钱。
</p>

<p>
最后，
</p>

<p>
我认为，这些壁画、雕塑、工艺品、摄影、音乐等等劳动品能够在人类认知的发展中逐渐统一起来有了一个共同的称呼：艺术，是因为它们都有一个共同的object： <b>填补真实与虚拟之间的空隙</b> 。这个art object从来独立于它可以卖多少钱，也与这个附加价值并不冲突，也不会让它变得不纯粹，美一直是纯粹的，不纯粹的是社会共同价值规律。
</p>

<p>
这也是我现阶段对于艺术的定义。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-art.html">Art</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Art]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/2024-05-05-the-value-of-art.html</link>
  <guid>https://www.vandee.art/2024-05-05-the-value-of-art.html</guid>
  <pubDate>Sun, 05 May 2024 21:29:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Learn All The Time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc4fccd8">尝试维持两种相反的想法</a>
<ul>
<li><a href="#orgcb9089d">太极张三丰</a></li>
<li><a href="#org8196659">从事物之间的联系出发</a></li>
</ul>
</li>
<li><a href="#orgc13a461">认知盈余</a></li>
<li><a href="#org91d7d21">Learn，learn，and learn</a></li>
<li><a href="#org6508d75">Reference</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgc4fccd8" class="outline-2">
<h2 id="orgc4fccd8">尝试维持两种相反的想法</h2>
<div class="outline-text-2" id="text-orgc4fccd8">
<p>
作家<a href="https://en.wikipedia.org/wiki/F._Scott_Fitzgerald">F·斯科特·菲茨杰拉德</a>（F. Scott Fitzgerald,小说《了不起的盖茨比》作者）谈什么是聪明的头脑：
</p>
<blockquote>
<p>
&ldquo;The test of a first-rate intellect is the ability to hold two opposing ideas in your head at the same time, and still retain the ability to function.&rdquo;
</p>

<p>
“对一流智力的考验是能够同时在脑海中持有两个相反的想法，并且仍然保持运作的能力。”
</p>

<p>
Source: <a href="https://click.convertkit-mail4.com/k0u7xn6xqnf6hdz6pdeu9h8w8p577/vqh3hrhpn63plxug/aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9DcmFjay1VcC1GLVNjb3R0LUZpdHpnZXJhbGQvZHAvMDgxMTIxODIwMQ==">The Crack-Up</a>
</p>
</blockquote>

<p>
如同<a href="https://zh.wikipedia.org/wiki/%E4%BC%8F%E7%88%BE%E6%B3%B0">伏尔泰</a>可能所说：我并不同意你的观点，但是我誓死捍卫你说话的权利。虽然<a href="https://www.douban.com/note/616832515/?_i=1838282i5YSKNh">不是伏尔泰原话</a>但不妨碍引用，借谁的口无妨。一位伟大的农夫和伟大的哲学家没有区别。
</p>
</div>
<div id="outline-container-orgcb9089d" class="outline-3">
<h3 id="orgcb9089d">太极张三丰</h3>
<div class="outline-text-3" id="text-orgcb9089d">
<p>
这既是一种包容的人生态度，更是让思维保持活跃和客观的修行的一种实际方法。这当然不是说，要精神分裂，每时每刻都和相反的想法做斗争，而是共存。**让事物的本质从不同角度，同时呈现在思维当中，这绝对可以说是一种修行**。就像张三丰悟出的太极，它无形又包容万千变化，这是自我与万物的变化保持的微妙平衡，是自我与外界对话，信息交换的微妙平衡。这真是人类与自然最完美的关系的一种了。
</p>

<p>
在最近看完的卡洛·罗韦利 <a href="https://book.douban.com/subject/33424487/">时间的秩序</a> 一书中，按照圈量子理论他提出了一个观点：世界由事件而非物体构成，“物体”本身仅仅是暂时没有变化的事件，是事件表现的形式。
</p>

<blockquote>
<p>
很久以来，我们都试图从基本物质的角度来理解世界，物理学也许比任何其他学科都更需要追寻这种基本物质。但我们研究得越多，越难以从“存在的东西”这个角度去理解世界，而从事件之间的关系来理解世界却容易得多。
</p>

<p>
“我们可以把世界看作由物体、物质、实体这一类东西构成。或者我 们可以把它看作由事件、发生、过程、出现组成。它不能持久，会不断 转化，无法在时间中永恒。基础物理学中，时间概念的毁灭导致了以上 两种观点中前者的崩塌，而非后者。 <b>这是一种领悟，认识到无常的普遍性，而不是一切在静止的时间里停滞</b> 。通过把世界看作事件、过程的集合，我们得以更好地理解与描述世 界。这是与相对论兼容的唯一方式。世界并不是物体的集合，而是事件 的集合。 <b>物体与事件的区别在于，物体在时间中持续存在，而事件的持续时间有限</b> 。石头是典型的“物体”，我们可以问它明天在哪里。与此相反， 亲吻是一个“事件”，问这个吻明天在哪儿是没有意义的。世界由亲吻的 网络构成，而非石头。
</p>

<p>
因此，我们按照出现的方式而非存在的方式来描述世界。牛顿力 学、麦克斯韦方程组、量子力学等，都告诉我们事件怎样发生，而非事 物是什么样的。通过研究生物的演化与生存，我们理解了生物学。通过 研究人与人交往、思考的方式，我们才理解心理学（只有一点点，并不 多）&#x2026;&#x2026; <b>通过形成过程而非存在，我们理解世界</b> 。“物体”本身仅仅是暂时没有变化的事件。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a> -卡洛·罗韦利
</p>
</blockquote>


<p>
他同样写到：
</p>
<blockquote>
<p>
我认为不需要比这理解得更多了。我们可以问更多问题，但我们要 小心那些无法被准确表述的问题。**当我们发现了时间能被谈论的所有方面，我们就发现了时间。**我们也许表达不出对时间的直接感知，但还是 对它笨拙地示意（好吧，但它为何会“流逝”呢？），但我相信，我们现 在只是在把事情搞混，执意要把近似的语言转化为事物。当我们无法精 准地表述问题时，通常不是由于这个问题十分深奥，而是因为这是一个 假问题。
</p>
</blockquote>

<p>
还是拿张三丰的太极来说。可能在太极被“创造”出来之前，其实太极这种形式就已经存在了。要回答“太极”这个语言概念什么，按照一直以来哲学的思维方式是这样：从现象出发，提出问题，探究本质，归纳总结真理。
</p>

<p>
但就像时间这种概念一样，这个概念是人类思维、体验提出的，我们把这个未知的概念用”时间“来指代，但其实很可能时间从来就不是一个可以具体描述的概念，可以说是我们自己给了自己一个无法回答的问题，人类思维的一个很大的限制就是：我们一贯用已知的东西来描述未知，来获得一种确定性，可描述性，因为我们要开口说话，我们要和物质进行信息交换，这一切的源头就是这个、那个，this、that。因此我们想描述昨天发生的一个事的时候，我们自动在思维中想出一个概念去表达，没有语言的时候我们用肢体、图案 <b>。所以我们自动得出一个“时间”的概念，这个概念很大程度来源于我们大脑结构对于记忆的处理，我们的记忆中存在这种对发生过的事情留下的痕迹</b> ，于是我们说昨天发生了什么，刚刚发生了什么。
</p>
</div>
</div>
<div id="outline-container-org8196659" class="outline-3">
<h3 id="org8196659">从事物之间的联系出发</h3>
<div class="outline-text-3" id="text-org8196659">
<p>
扯远了一点，回到开头说的太极的修行。
</p>

<p>
在探求一个未知的概念的过程中，我们往往不可避免的被问题本身所限制了。因为仿佛要获得打开一扇门的钥匙就必须先看看这个钥匙孔张什么样。但这个未知问题很可能本身就没有可以被人类现有思维理解的表现形式，它也从来不是一扇门，也就没钥匙和钥匙孔这一说了，正如同刚刚说到的时间这个概念。因此，从事物之间的联系出发，是一个非常有效的思维方式。
</p>

<p>
举个书中的苹果酒的例子：
</p>

<blockquote>
<p>
如果宇宙的一个子集在这种意义上很特殊，那么对这个子集而言， 宇宙的熵在过去就很低，热力学第二定律就成立；记忆会存在，痕迹会 留下，也会有进化、生命与思想。
</p>

<p>
换句话说，如果宇宙中有这样的东西——对我来说肯定会有——那 么我们就刚好属于它。此处，“我们”指的是我们经常接触并且用来描述 世界的物理量的集合。因此，也许，时间的流动不是宇宙的特征，就像 天空的旋转，来自我们在自己角落中的独特视角。
</p>

<p>
但为什么我们会属于这些特殊的系统呢？苹果长在喝苹果酒的北 欧，葡萄长在喝葡萄酒的南方，和这个是同样的原因。或是在我出生的 地方，人们居然刚好说的是我的母语；或是温暖我们的太阳与我们的距 离刚好合适——不近也不远。**这些例子里，“奇特”的巧合都源于把因果 关系搞反了：不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。这样说的话，就没什么奇怪的了**。
</p>

<p>
在进化的历程中，面对我们无法直接感知的事物（“我不懂为什么 我这样忧郁。”安东尼奥在《威尼斯商人》一开头咕哝道），**大脑的庞大机制已经经过设计，以便对可能的未来做出计算。这就是我们所说 的“决定”。**因为大脑可以根据现在详细描述出未来可能的样子（除了细节稍有出入），这样我们就会自然倾向于按照“原因”先于“结果”的逻辑 来思考：过去的事件是未来事件的原因，如果没有这个原因，未来的事 件就不会以完全相同的样子出现在我们的世界里。”
</p>

<p>
在我们的经验里，原因的概念在时间中是不对称的，原因先于结 果。当我们发现两个事件“具有相同的原因”时，我们发现这个共同原因 [25]在过去，而非未来。如果一场海啸的两股波浪同时到达邻近的岛屿， 我们会认为在过去有一个事件引起了这两股波浪，我们不会去未来寻 找。但那不是因为有一种从过去到未来的神奇的“因果”力量，而是因为 两个事件之间关联的不可能性需要一些不可能之事，而只有过去的低熵 才能提供这种不可能性。不然还有什么能提供这种不可能性呢？换句话 说，那些存在于过去的原因只不过是过去低熵的显现。在热平衡态，或 是在纯粹的力学系统中，由因果关系确定的时间方向并不存在。
</p>
</blockquote>

<p>
因为我们大脑神经结构的限制，我们的记忆习惯于把已经发生过的事情归纳为原因，把思维加工过的记忆、逻辑思考的结果称作那个原因的结果。但其实，不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。从事物之间的联系出发才是关键，也就是事件。如果把每一个孤立的物体都看作一个发生的事件，这些事件共同支起一个网络，每一个物体不是静止不动的孤立的个体，树在那里的高楼也一样在随着地球旋转，它们每时每刻都在与外界的一切信息发生着交换，影响着每一个其他物体未来要发生的事件的概率。通过形成过程而非存在，我们理解世界。“物体”本身仅仅是暂时没有变化的事件。就如同一个智者所说，没有绝对的沉默。
</p>

<p>
每一种学科、理论，经济学、哲学、物理学、化学、生物学，都是对于这些事物之间的联系—也就是各种事件的不同视角。我们不应该孤立的去看待这些问题，思考这些现象。因为每时每刻，我们都必然位于一个绝对的环境内部，**不识庐山真面目，只缘身在此山中。**我们现在被限制在太阳系这个物理环境中，当然看不到太阳系之外的视角。因此，需要同时保持内部环境的思维和外部环境的思维，对于环境内部和外部的事情，思维的方式就应该是不同的，用内部现象的结论去看待外部现象，必然会出现矛盾。两种不同的体系，当然不存在统一的真理，这并不是说完全否定存在着不同系统中统一的东西。
</p>

<p>
到这里，我好像终于把要说的说清楚了。总结一下：
</p>

<ul class="org-ul">
<li>我想说的尝试维持两种相反的想法，第一个层面就是针对外部环境与内部环境而言。</li>

<li>第二个层面，如果可以的话，我甚至愿意把两种扩展到X种。具体到实际的问题的时候，比如今天看到的一个讲拿破仑的文章 <a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a>。孤立的看这个问题，只会得到片面的结论，也不存在一个完美视角能覆盖到一个事物的全貌。保持自己的视角、态度，才是更应该着手事情。</li>
</ul>

<p>
如此多的视角和想法，如何找到自己的，这也就是我想说的太极与修行了。
</p>

<p>
对于 <a href="https://vandeefeng.github.io/posts/2022-08-07-undefined/">读万卷书还是行万里路</a>  这个我一直会思考下去的问题，重要的不是答案，而是过程，每一个在这个问题上的选择，就是我对这个问题的答案了。也没必要给自己徒增矛盾与烦恼，因为它本身就是矛盾，或者说它就是矛盾本身。（这并不是在辩证，因为它们本来就区别很大。）
</p>

<blockquote>
<ul class="org-ul">
<li><p>
从来就存在着两条路，一条路是向外探索，探索物质世界，从原子结构到股票涨落，从中研究控制现实世界的方法。一条路是向内探索，探索心灵世界，探究“我”的构成，“我”的特性，“我”的能力，建构起对自己的认知。遗憾的是，在前一条路上人山人海，在后一条路上却行者寥寥，而前一条路上遇见的诸多难解的问题，往往在后一条道路上才能找到答案。
</p>

<p>
来源： <a href="https://mp.weixin.qq.com/s?__biz=MjM5MjAzODU2MA%3D%3D&amp;chksm=bd46be028a313714a282554c31cb967d3a9710eddcb0fe9ca826ae044e4d788231a38cc1519e&amp;idx=1&amp;mid=2652796365&amp;sn=39b4d46467b7df6472ae469d2f6cffbe">和自己相处</a>
</p></li>
<li><p>
我们每个人都曾经有这样经历：多年之后，才明白当年的某个人说的某句话原来是这个意思。我们的头脑就像一个斜坡。当我们没有任何阅历与经验时，那个斜坡的表面是光滑的。而我们在书本上读到的，在书斋里听到的，在前辈那里似懂非懂学来的东西，就像是从斜坡上方流下来的水。光滑的斜坡留不住任何水。读书一箩筐竟似什么都记不住。而我们的每一次刻骨铭心的经历，都像是一把把锤子，将这个光滑的斜坡砸出一个个大大小小的坑。
</p>

<p>
来源： <a href="https://shixingcuowu.zhubai.love/posts/2320790958667300864?push_source_id=2314749384392835072&amp;push_source_type=email">🥫阅读碎片罐头（202309月刊） 试行错误竹白</a>
</p></li>
<li><p>
不知来，视诸往 。其实当我们读了很多的历史的时候，我们或许可以明白《徐霞客游记》中那句：“初四日，兀坐听雪溜竟日。”为何意，而《德道经》的“执今之道，以御今之有”的“道”意的真正含义或许就暗合于此吧。那一天，山下的你我，正奔忙着追逐“虚幻”，但徐霞客却坐在黄山绝顶，细声闻簌簌，远势望濛濛，不知过了多久，起身，抖掉蓑衣残雪，朝着光的方向，继续行走在路上。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/dai-bei-bai-tou-weng-f08b8fdf">行走在路上 - 太隐</a>
</p></li>
<li><p>
去的地方越多，你就觉得去的地方太少，看的风景越多，就觉得还有太多的风景没有看过。苏格拉底：我只知道一件事，就是我一无所知。似乎有的尽头就是无，宇宙也好像就是这样。时间的箭头，总是只会指向一个方向，阴晴圆缺，周而复始，易得易失。
</p>

<p>
来源：<a href="https://vandeefeng.github.io/posts/2023-06-02-undefined/">渴望着下一段旅行 梵低&rsquo;s Blog</a>
</p></li>
</ul>
</blockquote>
</div>
</div>
</div>
<div id="outline-container-orgc13a461" class="outline-2">
<h2 id="orgc13a461">认知盈余</h2>
<div class="outline-text-2" id="text-orgc13a461">
<p>
在<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>这篇推送里，看到了“认知盈余”这个概念，挺有意思。
</p>

<blockquote>
<p>
Clay Shirky （克莱·舍基）是一位美国作家、顾问和教师，他主要研究互联网技术对社会和经济的影响。他在纽约大学的互动电信项目（ITP）担任客座讲师，教授新媒体课程。Shirky还是一位 TED 演讲者，他在演讲中探讨了现代世界的变革与媒体的演变，以及这些变化对社会和政治的深远影响。TED链接：<a href="https://www.ted.com/speakers/clay_shirky">Clay Shirky  Speaker  TED</a>
</p>

<p>
Shirky的代表著作有《认知盈余》（Cognitive Surplus）、《未来是湿的》（Here Comes Everybody）等，这些书籍分析了互联网现象，并探讨了这些现象对未来的影响。
</p>

<p>
认知盈余指的是就是**受过教育，并拥有自由支配时间的人，他们有丰富的知识背景，同时有强烈的分享欲望，这些人的时间汇聚在一起，产生巨大的社会效应。**比如Meta、X以及维基百科的成功，都是“认知盈余”的功劳。在中国，微博、小红书、知乎的兴起，同样有赖于它。**参与分享的网民数量越来越多，力量越来越强大，互联网产业也随之迎来“核聚变”，原来我们所熟知的商业模式，随时可能成为泡影。**
人类是社会性动物，但自由时间的激增和某种社会资产的稳步减少趋于一致，这种社会资产便是人与人之间的信任与依靠。
</p>

<p>
自己创造的事物就算很普通，和消费别人创造的质量上乘的事物相比，它仍然有一种与众不同的吸引力。并不是我们的工具塑造了我们的行为，但是工具赋予了我们行为发生的可能。
要从一个工具中创造出最大的价值，靠的并不是总体规划或者跨越式发展，而是连续不断的尝试与错误。对于任何一个社会来说，在这样一种转变中要面对的关键问题是，如何充分利用这个过程。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>
</p>
</blockquote>

<p>
第一时间想到的就是在看马克思《资本论》的时候想回答的什么是真正的价值，这个问题。
</p>

<p>
一直以来，我都抱有一个想法：
</p>

<p>
如同水的价值一样，它的价值不因为它一定生成、产出什么而存在，而是因为它固有的性质。知识也是一样，它有着自身固有的永恒的价值。
</p>

<p>
在之前的<a href="https://vandeefeng.github.io/posts/2023-11-20-Get-rich-slow/">富有的概率</a>里，我想到：
</p>
<blockquote>
<p>
富有从来不是真正富有的人本来的目的，它是伴随的一个概率。该有的都有了的时候，你想不富有其实也挺难的，名利会追逐你，甩都甩不掉，甚至反过来吞噬你。当所有的导向富有的概率事件都发生了的时候，最后那一点别人没有的” 运气 “，才是 fortune 真正到来的时候。当然这个运气，也可以说成是你的实力、命运，或者缺少这个运气的人的抱怨和忌妒。
</p>

<p>
提升自己就是最大的人生储蓄，最大的财富。当然富有了之后，它是真理，富有之前，它是一坨 shit。
</p>
</blockquote>

<p>
认知盈余这个概念扩展了这个想法。
</p>

<p>
在1844手稿中，马克思就提出 <b>人的本质就是自由而自觉的活动</b> ，我们的生产、劳动在当今资本化的社会运作中，剩余价值被剥削，这些自由而自觉的活动产生不了它原本应该对应的社会价值与个人价值，它们被抽象成一般的无差别的人类劳动，进而劳动和劳动品的价值和使用价值发生变化。我们的个人价值在现在的社会交换中，大部分只能存在与商品之中了。在价值和价格、货币、资本的转化过程中，现在的经济运行法则必然会导致财富向少数人流动。
</p>

<p>
马克思还说到，就算没有货币这种体现价值交换的形式出现，也必然会导致相似的社会运行规律。我们的自由而自觉的活动就算没有被抽象化成商品，也得对象化到其他形式之中，人类是社会性动物，交换是绝对而且必须的。
</p>

<p>
因此知识的交换，互联网信息的共享，认知盈余这种价值的形成是一定的。
</p>

<p>
我相信那些固有价值一直都是还是存在的。也就是马克思所说的劳动、劳动品价值或者商品的使用价值。 <b>它们不应该在现在习以为常的资本和货币华丽耀眼的盛装舞蹈中被渐渐淡忘</b> 。知识和认知更是这样。并不是所有价值都能在货币里的得到应有的体现，也并不是所有价值都能够或应该参与货币的这场变装游戏，并不是所有的价值最后都会被披上货币的外衣。固有的价值，在其他对象化的形式之中，也一样会展现出它自身的价值。
</p>

<p>
艺术发展到现在，一个个天价拍卖，买的人都是人傻钱多？为什么一个只能挂墙上的东西指这么多钱？当然不是，这就是它固有价值的表现方式之一。就如同货币本身的职能一样，价值的体现。天价的艺术品，在今天是天价，可能一晚上之后，就是废品。但它固有的价值并没有变化，变化的是它的表现形式。
</p>

<p>
所以，那句废话还是得说：知识就是财富。
</p>

<p>
但前提是，知识的价值形式可以转化。
</p>

<blockquote>
<p>
As one resource becomes abundant, other resources become bottlenecks. When wealth and power become abundant, anything wealth and power cannot buy become bottlenecks - including knowledge and expertise.
</p>

<p>
当一种资源变得丰富时，其他资源就会成为瓶颈。当财富和权力变得丰富时，任何财富和权力买不到的东西都会成为瓶颈——包括知识和专业知识。
</p>

<p>
After a certain point, wealth and power cease to be the taut  constraints on one’s action space. They just don’t matter that much.  Sure, giant yachts are great for social status, and our lizard-brains  love politics. The modern economy is happy to provide outlets for  disposing of large amounts of wealth and power. But personally, I don’t  care that much about giant yachts. I want a cure for aging. I want  weekend trips to the moon. I want flying cars and an indestructible body and tiny genetically-engineered dragons. Money and power can’t  efficiently buy that; the bottleneck is knowledge.
</p>

<p>
到了一定程度之后，财富和权力就不再是对一个人行动空间的严格限制。他们只是没那么重要。当然，巨型游艇非常有利于社会地位，而我们的蜥蜴脑热爱政治。现代经济很乐意为处置大量财富和权力提供渠道。但就我个人而言，我不太关心巨型游艇。我想要治愈衰老的方法。我想要周末去月球旅行。我想要飞行汽车、坚不可摧的身体和基因工程的小龙。金钱和权力无法有效地买到这一点；瓶颈是知识。
</p>

<p>
<a href="https://wiki.vandee.art/#%E5%BD%93%E9%87%91%E9%92%B1%E5%85%85%E8%A3%95%E6%97%B6%EF%BC%8C%E7%9F%A5%E8%AF%86%E6%89%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%B4%A2%E5%AF%8C%20%E2%80%94%20LessWrong">当金钱充裕时，知识才是真正的财富 — LessWrong - Vandee Wiki</a>
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org91d7d21" class="outline-2">
<h2 id="org91d7d21">Learn，learn，and learn</h2>
<div class="outline-text-2" id="text-org91d7d21">
<p>
最近都在说查理·芒格的格言和它的故事。与其说芒格爱读书，不如说是爱学习和思考。
</p>

<p>
我只想记住下面这一条，因为芒格的格言都是“废话”。芒格自己也说过：钓鱼的两个原则：一是在有鱼的地方钓鱼，二是不要忘记第一条原则。
</p>
<blockquote>
<p>
&ldquo;I think a life properly lived is just learn, learn, learn all the time.&rdquo;
</p>

<p>
正确的过完这一生，就是不断学习、学习、学习。
</p>
</blockquote>

<p>
万物之始，大道至简，衍化至繁。这自然也是一句“废话”。
</p>

<p>
和开头我想说的一样，这些话谁说出来都一样。因为，知识，Knowledge、智慧，philosophia有它固有的价值。它不因为它是“农夫”而褪色，也不因为它是“芒格”而耀眼。它就是知识与智慧本身。
</p>

<p>
<a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a>，最近<a href="https://www.notboring.co/p/openai-and-grand-strategy">奥尔特曼被罢免</a>的事情，让<a href="https://zh.wikipedia.org/zh-cn/%E6%9C%89%E6%95%88%E5%88%A9%E4%BB%96%E4%B8%BB%E7%BE%A9">有效利他主义 - 维基百科</a>这个词又频繁出现，过多的争论的这些各方观点，没什么意义。没有孤立的物体，有的是互相联系的事件。即使这些事情都没有发生，也会有另一个OpenAI，另一个Chatgpt，另一个山姆·奥尔特曼。因为按照我们人类对于历史的总结：历史总是惊人的相似。
</p>

<p>
现在我其实越来越倾向于奥尔特曼和马斯克，虽然他们的想法好像是相反的。量子力学的出现质疑了牛顿经典力学的“决定论”体系（注：这里的“决定”指的是相对于概率模糊性的可计算的确定性），而越来越多的物理学家和哲学家倾向于自由意志是不存在的（注：量子力学并不完全否定自由意志，这里的自由意志概念不同于法律、心理学中的自由意志）。
</p>

<p>
就如同基因最本来的目的一样—自私的无限复制自己，也如同宇宙本来的目的一样—从低熵到高熵的状态，熵增加。我们无法阻止未来“既定”的事情，因为并没有过多的原因去导向这个结果。
</p>
<blockquote>
<p>
热振动就像在不停地洗一副牌：如果牌是按顺序排列的，洗牌的过 程就会把顺序打乱。这样，通过洗牌——借助万物自发的无序化，热量 就从高温物体传向了低温物体，而非反之。熵的增加只不过是普遍又常见的无序的自然增长。 这就是玻尔兹曼领悟到的内容。过去与未来的区别不在运动的基本 规律里，也不在自然的深层法则中。是自然的无序化导致了越来越非特 定、不特殊的情形。
</p>

<p>
如此看来，只有当我把目光聚焦于牌的特定方面时（在这个例子中 是颜色），“某些排列比另一些更特殊”的概念才有意义**（比如二十六张 红色的牌，然后是二十六张黑色的牌）。如果我们从各个方面对牌进行 区分，那所有排列就都是等价的：没有哪个比其他的更特殊。[11]只有当 我们以一种模糊与近似的方式看待宇宙的时候，“特殊性”的概念才会出现。玻尔兹曼说明了熵之所以会存在，是因为我们以一种模糊的方式描述世界。他证明了熵就是我们模糊的视野无法区分的不同排列的数量。 热量、熵、过去的低熵都是近似地、统计性地对自然进行描述的概念。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a>
</p>
</blockquote>

<p>
我们现在自以为的秩序，可能真只是一个随机洗牌的结果，我们在这个巧合中，认为我们是特殊的。我们因为在寻求逻辑自洽，寻求一个确定性的答案，归纳总结出这些符合我们大脑逻辑规律的真理。就像恐龙爸爸怎么也想不到有一天自己突然就没了，人类突然某一天就从猩猩进化了，并没有一定的原因和结果。
</p>

<p>
AI就是一个随机洗牌的特定结果，我们在这个洗牌中，没必要一直争论这些原因和结果。崇尚革命的激进派像宗教一样的布道，保守派一味的设定限制和强调伦理，这些唾沫贩卖了太多的焦虑，让吃瓜的我们在<a href="https://en.wikipedia.org/wiki/Overton_window">Overton window 奥弗顿之窗</a>之中一并贩卖了自己的注意力。
</p>

<blockquote>
<ul class="org-ul">
<li><p>
There’s this concept called the Overton Window: the range of policies or ideas that are politically acceptable at any given time.
</p>

<p>
有一个概念叫做“奥弗顿之窗”（Overton Window）：在任何特定时间在政治上可以接受的一系列政策或想法。
</p></li>
<li><p>
Since Joseph Overton came up with the idea in the mid-1990s, the concept has expanded beyond government policy. Now, it’s used to describe how ideas enter the mainstream conversation where they influence public opinion, societal norms, and institutional practices.
</p>

<p>
自从约瑟夫·奥弗顿（Joseph Overton）在1990年代中期提出这个想法以来，这个概念已经扩展到政府政策之外。现在，它被用来描述思想如何进入主流对话，影响公众舆论、社会规范和制度实践。
</p></li>
<li><p>
The Overton Window is the knot in the narrative tug-of-war. The teams pulling on either side don’t actually expect that everyone will agree with and adopt their ideas; they just need to pull hard enough that the Overton Window shifts in their direction.
</p>

<p>
奥弗顿之窗是叙事拉锯战中的结。任何一方的团队实际上并不期望每个人都会同意并采纳他们的想法;他们只需要用力拉，让奥弗顿窗朝他们的方向移动。
</p>

<p>
来源：<a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a>
</p></li>
</ul>
</blockquote>

<p>
就像<a href="https://movie.douban.com/subject/3025375/">奇异博士一</a>，Doctor Strange最后看了无数种结局也没有逆转的答案。最后自己进入那个结局，进入那个无限失败的结局的循环，结果拯救了世界。如果结局注定就是没有自由意志，这很重要么？就随它去吧。这正是我们一直在选择的自由。
</p>

<p>
一切，自有答案。Just learn, learn, learn all the time。
</p>

<p>
和这句话一样，其实今天写的都是“废话”。文章的标题更是“废话”到我自己都不会怎么点开，
</p>

<p>
但也许这才是《穷查理宝典》，查理·芒格真正牛逼的地方，他一生都在学习，一生都真正的践行了他的这些“废话”而不是和他们插肩而过，一直坚持的做到了许多人坚持不到的程度，以至于当他顺理成章随口说出这些的时候，那么的让许多人“不以为然”。
</p>
</div>
</div>
<div id="outline-container-org6508d75" class="outline-2">
<h2 id="org6508d75">Reference</h2>
<div class="outline-text-2" id="text-org6508d75">
<ul class="org-ul">
<li><a href="https://book.douban.com/subject/33424487/">时间的秩序</a></li>
<li><a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a></li>
<li><a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a></li>
<li><a href="https://www.notboring.co/p/openai-and-grand-strategy">OpenAI &amp; Grand Strategy-notboring.co</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a></li>
<li><a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a></li>
</ul>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://www.vandee.art/2023-12-06-learn-all-the-time.html</link>
  <guid>https://www.vandee.art/2023-12-06-learn-all-the-time.html</guid>
  <pubDate>Wed, 06 Dec 2023 21:33:00 +0800</pubDate>
</item>
</channel>
</rss>
