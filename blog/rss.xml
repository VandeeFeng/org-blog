<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Vandee's Blog]]></title>
<description><![CDATA[Vandee's Blog]]></description>
<link>https://www.vandee.art/blog/</link>
<lastBuildDate>Wed, 25 Jun 2025 13:26:31 +0800</lastBuildDate>
<item>
  <title><![CDATA[从有形到无形 - NoNotes，知识库自动补全]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org2c89f4a">TL;DR</a></li>
<li><a href="#orgaf43c69">知识的流动性</a></li>
<li><a href="#org599837c">自动补全 VS RAG</a></li>
<li><a href="#org33cdeb2">NoNotes</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org2c89f4a" class="outline-2">
<h2 id="org2c89f4a">TL;DR</h2>
<div class="outline-text-2" id="text-org2c89f4a">
<p>
NoNotes 的意思就是字面上的意思，没有笔记。NoNotes 提供一个接口，通过向量相似性检索，根据当前输入自动补全相关的笔记。
</p>

<p>
自动联想补全，回归知识、思考最自然的样子。
</p>
</div>
</div>


<div id="outline-container-orgaf43c69" class="outline-2">
<h2 id="orgaf43c69">知识的流动性</h2>
<div class="outline-text-2" id="text-orgaf43c69">
<p>
在最开始，我设定 PKM（个人知识管理）系统的几个底层原则之一就是：知识一定要能够自然的流动起来。如果一个笔记，它不能和其他笔记通过自然的逻辑有机的联系起来，不能流动起来，时间久了它就会被遗忘，这种笔记是无效的。
</p>

<p>
举个例子，在生活里我们经常会遇到这种情况，一个常用物，有时候就是会不记得它被放在了哪里，突然就找不到了，它的下一次出现可能就得是搬家的时候了。
</p>

<p>
知识和笔记也是一样。正是因为它太常用了，以至于我们不会刻意的去记忆它在哪里，它已经成为了一种习惯。
</p>

<p>
我理想中的笔记载体形态应该想水一样，它的形态可以自由变化，可以很好的和其他事物兼容。它应该可以像水的固态、液态、气态一样，根据实际的情况变幻自己的状态。它应该也是一种习惯，不需要刻意的怎么样。
</p>

<p>
知识管理和学习是从无到有，现在我需要实现从有到无，PKM 最终要实现的是思维、能力的提升。做笔记的目的从来也不是做笔记，学习的目的也从来不是学习，正如巴菲特所说 <a href="https://wiki.vandee.art/#%E6%9C%80%E5%A5%BD%E7%9A%84%E6%8A%95%E8%B5%84%E6%B0%B8%E8%BF%9C%E6%98%AF%E4%BD%A0%E8%87%AA%E5%B7%B1">最好的投资永远是你自己</a> 。它是为了能够更好的和物质世界的信息交互，不断提升自己成长的效率，让自己在每一个选择的实践当中，提升最优决策实现的可能性。
</p>

<p>
做笔记和学习如果只是停留在笔记，那么它顶多只是一些对自己很有用的资料而已，创造不了太多价值。
</p>

<blockquote>
<p>
Steve Jobs on why thinking without doing is incomplete:
</p>

<p>
史蒂夫·乔布斯谈到为什么不行动的思考是不完整的：
</p>

<p>
“My observation is that the doers are the major thinkers. The people that really create the things that change this industry are both the thinker and doer in one person. And if we really go back and we examine, you know, did Leonardo have a guy off to the side that was thinking five years out in the future what he would paint or the technology he would use to paint it? Of course not. Leonardo was the artist, but he also mixed all his own paints. He also was a fairly good chemist. He knew about pigments, knew about human anatomy. And combining all of those skills together, the art and the science, the thinking and the doing, was what resulted in the exceptional result. And there is no difference in our industry. The people that have really made the contributions have been the thinkers and the doers.”
</p>

<p>
“我的观察是，行动者是主要的思想者。真正创造出改变这个行业的事物的人，既是思想者也是行动者。如果我们真的回过头来审视，你知道，达芬奇是否有一个人在旁边思考他五年后会画什么，或者他会使用什么技术来绘画？当然没有。达芬奇是艺术家，但他也自己调配所有的颜料。他也是一个相当不错的化学家。他了解颜料，了解人体解剖。将所有这些技能结合在一起，艺术与科学，思考与行动，才产生了卓越的结果。在我们的行业中没有区别。真正做出贡献的人是思想者和行动者。”
</p>
</blockquote>
</div>
</div>


<div id="outline-container-org599837c" class="outline-2">
<h2 id="org599837c">自动补全 VS RAG</h2>
<div class="outline-text-2" id="text-org599837c">
<p>
大语言模型的相关概念给了我一些启发，如果说 LLM 本身就是一个通过知识库联想输出最大可能性结果的系统，那么做笔记也可以是这样。再结合 LSP、IDE 的自动补全，NoNotes 的雏形逐渐清晰起来：根据知识库的内容，根据当前的输入自动补全最相关的内容。
</p>

<p>
NoNotes 想达到的实现和 RAG（Retrieval-Augmented Generation）最大的不同是，它的重点不在 generation，而是联想和检索。
</p>

<p>
RAG 已经很好的实现了 LLM 和外部数据交互的问题，MCP (Model Context Protocol) 也是一样，它们都是通过给 LLM 提供额外的数据接口来增加 LLM 的能力，让它能够更准确的生成内容。
</p>

<p>
我一直不太想过多的依赖一种工具来管理知识，即使 LLM 再强大，这点也不会变。Google 的 NotebookLM 已经做到了知识库形态很完整的实现，可以直接和大量的数据对话，类似的大小型知识库 RAG 项目也非常多非常成熟，但是这种层面的知识交互，并不能很好的实现我想把知识流动起来的根本原则。
</p>

<p>
它们的重点都是在生成，这也就意味着，很难通过这种和知识的交互直接返还我想查找到的原文内容（特定的 prompt 还是可以实现，但这又增加了学习和使用的成本）。而 NoNotes 通过检索自动补全的是我相关的笔记原文，这就可以在一定程度上保证，我的思考和学习是原汁原味的。再一个 RAG 的生成的速度是很难保证实时补全的。
</p>

<p>
我也不太想通过 LLM 的生成来管理、生成笔记，这样总感觉不是自己的，也很难在学习的过程里进入心流和深度思考。还是一个字一个字的敲，更自在。
</p>

<p>
自动补全可能是我现在能想到的，最简洁，最自然的实现流动知识的实现。未来能集成到输入法里也说不定呢。
</p>
</div>
</div>

<div id="outline-container-org33cdeb2" class="outline-2">
<h2 id="org33cdeb2">NoNotes</h2>
<div class="outline-text-2" id="text-org33cdeb2">
<p>
无论 LLM 技术怎么迭代，最核心的还是数据，没有输入，LLM 就没有输出。NoNotes 只想提供一个数据接口，技术栈也非常简单，数据库，向量相似性检索，embedding 嵌入。把知识库的文档分块，向量化储存在数据库就完事了。
</p>

<p>
难点在数据的处理和联想的算法，这部分我还在学习。
</p>

<p>
源码就不放出来了，因为整个实现还只是雏形，而且也很好实现，可以选择的框架和编程语言也很多。
</p>

<p>
NoNotes 现在支持 CLI 导入单个文件、单个句子、文件夹，暂时只能处理 Markdown、PDF、txt 文本。
</p>


<figure id="org92fefcb">
<img src="https://pic.vandee.art/images/nonotes-cli.gif" class="img" width="50%" height="50%">

</figure>

<p>
现在做了两个 API，一个是向量相似性检索的，一个是 RAG 的。效果如下：
</p>


<figure id="org46b2f1d">
<img src="https://pic.vandee.art/images/nonotes.gif" class="img" width="50%" height="50%">

</figure>

<p>
目前只实现了在 Emacs 里的自动补全，我补全用的是 corfu。
</p>

<p>
现在已经在数据库里导入了很多知识库里的笔记，搞了几个表，memory，knowledge。memory 就相当于备忘录了,现在可以自动补全最近干了什么了。
</p>

<p>
我觉得面对 LLM 和以后 AI 技术的发展，把非结构化数据向量化，是一个很好的实践，提供一个属于自己的可用的知识接口。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-emacs.html">Emacs</a> <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-06-10-nonotes-auto-completion.html</link>
  <guid>https://www.vandee.art/blog/2025-06-10-nonotes-auto-completion.html</guid>
  <pubDate>Tue, 10 Jun 2025 10:25:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[AI 驱使下的信息向量化]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb11af65">从检索到生成</a></li>
<li><a href="#orgb9b0392">RSS 订阅</a></li>
<li><a href="#orge26e624">数据向量化</a></li>
<li><a href="#org2bcd9b8">小结</a></li>
</ul>
</div>
</nav>
<p>
前两天的 <a href="https://io.google/2025/">Google I/O</a> 有点炸裂，Google 这是掀桌子了，一下子放出了基于 Gemini 的整个生态的布局。这个网站整理了主要内容：<a href="https://google-io-2025.kcores.com/">https://google-io-2025.kcores.com/</a>。
</p>

<p>
可以感觉到 Google 的战略和 OpenAI 是完全不一样的。基于 Google 庞大的生态应用，Google 正在逐步用 AI 接管这些，这次的 Google I／O 把蓝图完整的呈现了。
</p>

<p>
从这次的 Google I／O 结合最近在看的 <a href="https://book.douban.com/subject/35440637/">互联网口述历史第1辑·英雄创世记</a> ，AI 对互联网内容和信息将带来的变革是颠覆性的。
</p>

<div id="outline-container-orgb11af65" class="outline-2">
<h2 id="orgb11af65">从检索到生成</h2>
<div class="outline-text-2" id="text-orgb11af65">
<p>
传统互联网上的搜索正在逐步从检索转变为生成。
</p>

<p>
作为长期处于传统搜索垄断地位的 Google，已经正式接入 AI 搜索了。这意味着以后的搜索可能就会变成今天的百度了。
</p>

<p>
互联网从诞生到现在积累了这么多年的信息和内容，可能真的马上要画上句号了。信息的价值只在它能够被检索到的时候才真正存在，再好的内容，不能被检索到，在互联网里它就相当于不存在了。
</p>

<p>
算法、流量这些现象同样也会慢慢发生在 AI 搜索。为了能够更好的让 AI 检索到，本来就越来越少的优质信息创作内容会更少。全自动 AI 生成，或半自动 AI 生成的信息一定会越来越多，传统的 SEO 也一定会向 AI 算法倾斜。
</p>

<p>
从内容到检索全部都被 AI 接管之后，不就变成百度了。
</p>

<p>
由于大语言模型本身的特性，不同于传统搜索引擎的关键字检索，如果不能在 prompt 里准确的描述出想搜索的内容，它一定会大话连篇的生成一大堆不太相关的东西。
</p>

<p>
从检索到生成，这就是我从 Google I/O 里感受最大的一点。以后在互联网上的搜索会逐步被 LLM 的生成所替代。
</p>

<p>
十年之后，各种 deep search 可能就真的替代现在的传统搜索了。
</p>

<p>
互联网上的信息正在逐步被向量化（embedded），从有血有肉的内容变成一个个 token。
</p>
</div>
</div>

<div id="outline-container-orgb9b0392" class="outline-2">
<h2 id="orgb9b0392">RSS 订阅</h2>
<div class="outline-text-2" id="text-orgb9b0392">
<p>
<a href="https://github.com/glidea/zenfeed/">https://github.com/glidea/zenfeed/</a> ,最近看到的这个 GitHub 项目解决了我的大问题。它直接把 RSS 源内容的向量化，而不是像我之前用完整的 RSS 内容做 RAG。
</p>

<p>
在原项目的基础上，根据我自己的需求改了一下 <a href="https://github.com/vandeefeng/zenfeed/">https://github.com/vandeefeng/zenfeed/</a> ，现在用的相当舒服。现在可以直接用自然语言检索每天新闻里我感兴趣的内容了。
</p>

<p>
RSS 是我面对算法、信息茧房等问题坚持下来的信息获取习惯。从人出发，到信息，是我觉得面对现在 AI 技术带来的信息困境比较好的路径。这几年的 RSS 订阅，从 blog（点）穿起了这些 blog 的人（线），再到现在的他们辐射出的领域（面），积累了许多我觉得还算高质量的信息源。
</p>

<p>
算法、流量决定着我们现在能看到的大部分信息流，如果以后搜索真的也被 AI 全面接管了，检索也不行了，就只能从感兴趣的人出发了。
</p>

<p>
之前 <a href="https://www.vandee.art/2024-11-10-database-of-flowing-knowledge.html">数据库的搭建 - 流动知识检索</a> 现在可以在这个项目的基础上继续发展了。这就是我以后的新闻信息检索入口。
</p>

<p>
从各大模型厂商推出 deep search 到现在，我也还是不想深入使用。数据源的质量自己不能控制，再怎么 deep 也不会是我想要的信息。当然，prompt 设计的好，还是可以筛选出很多高质量内容的。用多了就感觉有点厌烦了，直接 Google 一下反而神清气爽。
</p>

<p>
现在 deep search 一下，再用几个流行的 prompt 生成卡片网页、播客、甚至短视频，再发布到小红书、抖音、B 站、公众号等社交平台，整个工作流成本很低，也很容易复刻，也就导致大量的AI 生成的同质化内容。它们的质量参差不齐，我也实在不想浪费时间在这些信息上面。很多这些信息，啪啪啪一大堆，看起来也很美观，很有逻辑，但大多看完之后就像没看一样，数据的真实性就更不能保证了。
</p>

<p>
<a href="https://wiki.vandee.art/#%E6%99%BA%E5%8A%9B%E8%82%A5%E8%83%96%E5%8D%B1%E6%9C%BA">信息肥胖</a>、信息健康这个概念很早就有了，只不过我感觉重视的人不太多。
</p>
</div>
</div>

<div id="outline-container-orge26e624" class="outline-2">
<h2 id="orge26e624">数据向量化</h2>
<div class="outline-text-2" id="text-orge26e624">
<p>
虽然 AI 技术带来的很多变化我都不喜欢，但再不情愿也没用。拒绝 AI 的这次技术浪潮在将来会带来的变革，就好像在说我今天就是不用互联网。当更多的基础设施和服务都像 Google 这次接入 AI 之后，就算不直接使用也会间接使用到。
</p>

<p>
既然信息和数据在未来只有被向量化才能发挥更大的价值，那就先做好准备吧。
</p>

<p>
从我开始折腾 PKMS（个人知识管理）开始，就有这方面的考虑了。
</p>

<p>
数据始终是最核心的。再好的模型，没有优质的数据输入，也是白搭。
</p>

<p>
计划陆续要把 PKM 数据库里的内容全部向量化。大量数据的向量化优化，最近还在学习。
</p>
</div>
</div>


<div id="outline-container-org2bcd9b8" class="outline-2">
<h2 id="org2bcd9b8">小结</h2>
<div class="outline-text-2" id="text-org2bcd9b8">
<p>
未来的互联网正在逐步变成一个个 token，GitHub 已经被 <a href="https://deepwiki.com/">DeepWiki</a> 变成 token 了，其他的还会远么？
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-05-23-information-vectorization.html</link>
  <guid>https://www.vandee.art/blog/2025-05-23-information-vectorization.html</guid>
  <pubDate>Fri, 23 May 2025 19:51:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Prompt: Another Key to the Compressed World]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org44b189c">Intro</a></li>
<li><a href="#org08c29f1">Keyword 关键字</a></li>
<li><a href="#orga83a35b">小结</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org44b189c" class="outline-2">
<h2 id="org44b189c">Intro</h2>
<div class="outline-text-2" id="text-org44b189c">
<blockquote>
<p>
未来能第一个说出来这些「Magic Words」的人，就率先打开了一个新的参数空间。
</p>

<p>
via: <a href="https://x.com/lijigang_com/status/1921103439813283862">https://x.com/lijigang_com/status/1921103439813283862</a>
</p>
</blockquote>

<p>
如果说在互联网时代，能够打开浏览器，在搜索框里进行搜索已经是一个必备的技能，那么 AI 时代，会用 prompt 获取到自己需要的内容也是一样。
</p>

<p>
LLM 迭代很快，但不管技术怎么迭代，prompt 作为输入的窗口是不会消失的。
</p>

<p>
对于普通人来说，我觉得 prompt 是最直接，也最容易上手的了。
</p>

<p>
Prompt <a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B">提示工程</a> ,简单来说就是我们和 LLM 交互的时候输入的 input，LLM 的回答就是 output。
</p>

<p>
LLM 是一个概率计算器，它需要通过输入来计算出可能性最大的输出。对不同模型的底层原理越是了解，就越能通过 prompt 发挥出模型的效果。但对于普通人来说，这个学习成本太大了。
</p>

<p>
而且随着 LLM 的迭代，大模型的能力会越来越强，它对于自然语言的理解会更好，prompt 也可以写的越来越简洁，不必须非要掌握那些特定的格式和技巧。
</p>

<p>
Chain of Thought (CoT) (思维链提示)，Tree of Thoughts (ToT) (思维树提示)，ReAct (Reason &amp; Act) (推理与行动提示)等等这些在推理模型出现之后，都不是那么必须了。现在 Role prompting (角色提示) 是我用的最多，效果最好的，也最简单。如果不是特定需求下，prompt 写的太复杂，反而会影响 LLM 的输出。
</p>

<p>
因此，我觉得未来 prompt 的重心会随着 LLM 能力的提升进一步向思维和表达偏移。
</p>
</div>
</div>

<div id="outline-container-org08c29f1" class="outline-2">
<h2 id="org08c29f1">Keyword 关键字</h2>
<div class="outline-text-2" id="text-org08c29f1">
<p>
AI 善于回答问题，但不善于提出问题。如何提出更好的问题，才使用 AI 工具的关键。
</p>

<p>
拿李继刚的这个 prompt 举例：
</p>

<blockquote>
<p>

</p>

<p>
P(x,t) | W(x) ^ L(x)
</p>

<ul class="org-ul">
<li>W(x): 这个世界是「网状」的，要观察 x 事件，是否陷入了单点思考或线性思考，有没有考虑周边关联结点的影响</li>

<li>L(x): 这个世界是「立体」的，要观察 x 事件，当前的描述是在哪个层次上，再上一层（更抽象）是什么，再下一层（更具体）是什么？</li>

<li>P(x): 这个世界是「概率」的，量子世界的测不准原理一直存在着，x 事件成立的概率是多少？对言之凿凿要抱有极大的警惕心，量子不同意。</li>

<li>P(t): 这个世界是「动态」的。x 事件的描述，过去成立，现在还成立吗？未来还成立吗？充分条件发生变化了吗？这个世界一直在变，x 事件为什么会不变？</li>
</ul>

<p>
vai: <a href="https://x.com/lijigang_com/status/1923407635245854964">https://x.com/lijigang_com/status/1923407635245854964</a>
</p>
</blockquote>


<p>
LLM 就是一个概率计算器，我一直以来的用法也就是：让 LLM 放大我的思维。
</p>

<p>
当我们在思考过程中那个小灯泡亮起来的时候，也就是大脑的神经突触连接了，LLM 的底层原理也是模拟大脑。
</p>

<p>
当我在想一系列的概念、问题的时候，LLM 可以帮助我快速的计算出各种概率，找到它们直接的联系，发散，增加我的想象力。
</p>

<p>
这意味着我不再需要在我的记忆里储存那些大量的信息，只需要建立目录和索引，LLM 会帮助我通过这些索引找到它们之间的联系。当然前提是需要对这些概念有理解，也需要自己甄别 LLM 的幻觉。
</p>

<p>
这也是近两年我一直在做的事情，把信息、知识压缩成一系列的关键字和索引。各种 PKM 就是我想接入 LLM 的数据。
</p>

<p>
LLM 是数据的压缩，它就是一个巨大的 ZIP，prompt 就是解压的钥匙了。
</p>

<p>
在一个模型的基础上根据自己的数据和语料训练出一个自己的大语言模型，我觉得在未来会像每个人有电脑一样普遍。每个人都会有自己的去中心化知识库。
</p>

<p>
我最近在折腾树莓派，闲鱼上一个也就 500。接入我的 PKM 数据库，连上 LLM，一个简易的个人小助手 JARVIS 就搞定了。视觉识别，语音对话都很好实现。
</p>
</div>
</div>

<div id="outline-container-orga83a35b" class="outline-2">
<h2 id="orga83a35b">小结</h2>
<div class="outline-text-2" id="text-orga83a35b">
<p>
每一次新的技术出现一定会让我们变懒，这也是技术的初衷，让生活变得便利。
</p>

<p>
变懒可以，但变笨不行。
</p>

<p>
LLM 只是一个工具，指望它能让自己干出什么原本就不可能的事情是不现实的，它能做的只是在原有的基础上放大这个概率。
</p>

<p>
当这些概率都发生变化的时候，或许就会有神奇的事情发生呢？
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-05-17-prompt:-another-key-to-the-compressed-world.html</link>
  <guid>https://www.vandee.art/blog/2025-05-17-prompt:-another-key-to-the-compressed-world.html</guid>
  <pubDate>Sat, 17 May 2025 11:28:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[The Real Way to Engage with AI Agent]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org818ff44">Intro</a></li>
<li><a href="#org4ffc80a">Emacs</a></li>
<li><a href="#org7588237">Nvim</a></li>
<li><a href="#orgdf7d988">小结</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org818ff44" class="outline-2">
<h2 id="org818ff44">Intro</h2>
<div class="outline-text-2" id="text-org818ff44">
<p>
OpenAI 最近计划花 30 亿美元<a href="https://www.bloomberg.com/news/articles/2025-04-16/openai-said-to-be-in-talks-to-buy-windsurf-for-about-3-billion">收购 windsurf</a> ，字节也在今年终于发布了 <a href="https://www.trae.ai/">Trae</a> ，这两个都是和 <a href="https://www.cursor.com">Cursor</a> 一样的 AI IDE（集成开发环境Integrated Development Environment）。也是今年模型即产品开始这个概念开始推行，Google 和 OpenAI 从年初到现在陆续放出了很多新的模型。但大模型这玩意太烧钱了，通过推出新模型已经调动不起消费者的热情了，IDE 成了新的赛道。
</p>

<p>
OpenAI 的这个 30 亿的收购最起码证明了 AI IDE 的重要性。如果说各种 chat app 是定位普通用户的简单易用的产品，那么 IDE 就是面向开发者的产品。开发者才是使用 API 的大头，那么多模型的 API，怎么让开发者更愿意用自己的呢，最直接的思路就是和 IDE 绑定了吧，就像 Cursor 从推出就默认使用 Claude 一样。
</p>

<p>
那么，对于普通用户和开发者之间的群体呢，比如说我，就是想更深入的玩玩，IDE 也是一个很好的入口。
</p>

<p>
Cursor 让 <a href="https://en.wikipedia.org/wiki/Vibe_coding">vibe coding</a> 这个概念流行起来，这个概念又推动了 IDE 的竞争和发展。在以前 IDE 就是给开发者写代码用的，但是现在有了大语言模型，IDE 可以直接和 LLM 交互，再加上 RAG、MCP，IDE 其实就是一个 “agent” 的操作台了，也就是 agent 的 agent。通过 <a href="https://modelcontextprotocol.io/introduction">MCP</a>(Model Context Protocol) ，IDE 的功能被无限放大。我虽然一直不喜欢 MCP，但它确实又推动了 AI 行业。
</p>

<p>
现在有很多 AI 套壳产品，比较流行的有 <a href="https://chatwise.app/">ChatWise</a> , <a href="https://cherry-ai.com/">Cherry Studio</a> ，<a href="https://refly.ai/">Refly</a> ，但我还是更喜欢 Emacs 和 Nvim。我一直不太喜欢用过渡态的产品，两头都顾不上。它们也没有提供多少可以进一步提升我效率的功能。
</p>

<p>
AI 迭代的太快了，后面还会出现更多未完成的中间态概念，少数完全由这些概念堆砌起来的热度产品除了会浪费金钱，更主要的是会浪费时间。
</p>

<p>
现在推出的很多 agent 概念产品，我认为都还在过渡期。不如直接上手 Emacs 和 Nvim，它们是可以更直接触及底层的 IDE，也是开始接触 agent 更合适的入口。
</p>
</div>
</div>

<div id="outline-container-org4ffc80a" class="outline-2">
<h2 id="org4ffc80a">Emacs</h2>
<div class="outline-text-2" id="text-org4ffc80a">
<p>
我现在日常用的比较多的就是：<a href="https://github.com/MatthewZMD/aidermacs">aidermacs</a> , <a href="https://github.com/karthink/gptel">gptel</a> , <a href="https://github.com/milanglacier/minuet-ai.el">minuet-ai.el</a> 。
</p>

<p>
它们基本覆盖了我 90% 的使用需求了。代码补全，项目架构分析，片段问答，都和 Emacs 结合的很舒服。
</p>

<p>
具体的使用情况在之前的博客里有，就不重复了。
</p>


<figure id="org6de8921">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/llmchat.gif" class="img" width="50%" height="50%">

</figure>
</div>
</div>

<div id="outline-container-org7588237" class="outline-2">
<h2 id="org7588237">Nvim</h2>
<div class="outline-text-2" id="text-org7588237">
<p>
<a href="https://github.com/yetone/avante.nvim/">yetone/avante.nvim</a> 是一个 Nvim 插件，可以在 Nvim 里获得类似 cursor 的体验。
</p>


<figure id="orgb26aff5">
<img src="https://pic.vandee.art/images/nvim.gif" class="img" width="50%" height="50%">

</figure>


<figure id="orgd114f2d">
<img src="https://pic.vandee.art/images/nvim-code.gif" class="img" width="50%" height="50%">

</figure>
</div>
</div>


<div id="outline-container-orgdf7d988" class="outline-2">
<h2 id="orgdf7d988">小结</h2>
<div class="outline-text-2" id="text-orgdf7d988">
<p>
我的体验下来，极致的 vibe coding 首选还是 cursor。其他同类产品替代不了 cursor 的还是它的 tab 补全和模型调教。它的 tab 就真的像有读心术一样，很准确的知道我下一步想做什么。当然还有它的各种免费破解（支持正版！）
</p>

<p>
AI 套壳产品里的功能，在 IDE 里 90% 都可以实现。如果只把 IDE 当作 IDE，那也太看不起 OpenAI 的 30 亿了。
</p>

<p>
未来学家托夫勒的《未来的冲击》里提出了一个观点：人类社会将变快。我们生活的根本特征，不再是持久，<a href="https://www.ruanyifeng.com/blog/2025/04/weekly-issue-346.html">而是短暂</a>。
</p>

<p>
vibe coding 是趋势，我们以后会用上越来越多品质不那么高，甚至是一次性的即抛产品，但我觉得品质反而会更成为核心的竞争力。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-04-26-the-real-way-to-engage-with-ai-agent.html</link>
  <guid>https://www.vandee.art/blog/2025-04-26-the-real-way-to-engage-with-ai-agent.html</guid>
  <pubDate>Sat, 26 Apr 2025 11:59:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[The Passing Future]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org27df348">AI 举着喇叭</a></li>
<li><a href="#org3ff610a">The Passing Future</a></li>
<li><a href="#org4aece6b">2025-04-20 added</a></li>
</ul>
</div>
</nav>
<p>
最近博客更新的频次少了不少，原因之一是部分不成文的思考记录在了 <a href="https://x404.xyz/memo">GitMemo</a> 。
</p>

<p>
更深层次的原因我自认为是：上个阶段我需要深度思考的问题已经解决的七七八八了，现在处在过渡到下个阶段的过渡期。
</p>

<p>
佐证就是这些记录本身：
</p>


<figure id="orgf4f2223">
<img src="https://pic.vandee.art/images/task.png" class="img" width="50%" height="50%">

</figure>

<p>
现在每周 AI 都会自动根据我记录的这些思考帮我提出几个需要接着深入思考的问题，这些良性的多巴胺就像一根根柴火，让我思考的大脑一直烧的旺旺的。
</p>

<div id="outline-container-org27df348" class="outline-2">
<h2 id="org27df348">AI 举着喇叭</h2>
<div class="outline-text-2" id="text-org27df348">
<p>
一个事物价值的大小，受到系统识别的影响。许多很好的事物，由于我没有相关的识别，它们对我来说就不会那么重要。
</p>

<p>
现在的 AI 就像互联网刚开始萌芽的时候，它已经不算是悄无声息地在改变我们的生活了，甚至是举着喇叭了，但是仍然会有许多群体没有相关的识别。
</p>

<p>
我不是一个 AI 的布道者，也没有相关的利益，也从来不想写 AI 怎么怎么好之类的东西。只是记录记录它带来的变化，记录记录它本身，之前的博客里也已经记录了不少。
</p>

<p>
香菜有多好吃，吃了就自然会知道，喜欢吃的爱的不得了，不喜欢的碰也不会碰。但是，当所有的菜里都放香菜的时候，就是另外一回事了。
</p>

<p>
说人话就是：AI 是未来一定会写进课本的东西。
</p>
</div>
</div>

<div id="outline-container-org3ff610a" class="outline-2">
<h2 id="org3ff610a">The Passing Future</h2>
<div class="outline-text-2" id="text-org3ff610a">
<p>
这两年我一直在做各种记录，PKM 是对知识的记录，摄影是对感受的记录，博客是对思考的记录。
</p>

<p>
对我这些决策影响比较大的是 <a href="https://wiki.vandee.art/#%E3%80%8A%E6%97%B6%E9%97%B4%E7%9A%84%E7%A7%A9%E5%BA%8F%E3%80%8B">卡洛• 罗韦利的《时间的秩序》</a> ，过去、现在、未来对我来说是一个范畴的事。
</p>

<p>
这些记录，一部分是给过去的，一部分是给未来的。
</p>

<p>
凯文凯利在一个<a href="https://wiki.vandee.art/#%E7%9C%8B%E8%A7%812033%20%E7%AC%AC%E5%8D%81%E4%B8%80%E6%9C%9F%EF%BD%9C%E5%86%AF%E5%A4%A7%E5%88%9A%C3%97%E5%87%AF%E6%96%87%C2%B7%E5%87%AF%E5%88%A9">访谈</a>里谈到：思考未来最难的事情正是理解现在，而更关键的问题是什么是现在。
</p>

<p>
“现在”或者说“当下”，在我这里就是 The Passing Future。
</p>

<p>
我一直在想象，如果真的可以超越光速，到达时间的维度，应该怎么看待现在的物质世界。
</p>

<p>
因此我正在着手创造一个不会被现在的时间度量所限制的东西，它可以承载巨量信息，可以具象化思维，可以根据环境做出适应性的变化，它既不实际存在又无处不在，其他的现在还不能剧透。
</p>

<p>
在人工智能技术的帮助下，我觉得它一定是可以实现的。
</p>

<p>
随手拿起一张黑胶，指尖触碰唱片的封套，细细摩挲封面上岁月的痕迹。泛黄的边角，褪色的色彩，都是时间无声无息留下的讯息。唱针缓缓落下，与唱片纹路触碰，那些细微的、带着时光颗粒感的 “嘶嘶” 声，就像是一个时光隧道，一下子把我拉回到相隔的世纪。
</p>

<p>
无数这些相似时刻，都是永恒的缩影，是我们可以用心感受到的超越光速的时间旅行，就是我们的 The Passing Future。
</p>
</div>
</div>

<div id="outline-container-org4aece6b" class="outline-2">
<h2 id="org4aece6b">2025-04-20 added</h2>
<div class="outline-text-2" id="text-org4aece6b">
<p>
几天之后看到这个：<a href="https://mp.weixin.qq.com/s/i5FFQTWbcp7zCMf8EUTUzQ">分享一个对我帮助很大的思维方式</a>
</p>

<blockquote>
<p>
同样，我现在的每一个思考和行动，又在塑造着未来的自己。那么，当未来的我回顾过去，是会感谢今天的自己，还是会后悔？
</p>

<p>
这是一种十分有趣的视角。
</p>

<p>
你会发现，把时间拉长，你看待许多事物的眼光会全然不同。你不再拘泥于它在当下会如何，而是能够跨越更宽广的生命长度去看待它，思考它会对你在将来带来什么、造成什么影响。
</p>

<p>
这也就是我今天想跟你分享的思维方式：把「过去的我」和「未来的我」联系起来，从整个生命长度去看待问题，而不是孤立的当下。
</p>
</blockquote>

<p>
李睿秋 Lachel 是我很喜欢的一个作者，我的许多思维方向和习惯都和他很相似。
</p>

<p>
这已经是好几次了，偶然发现我们在差不多的时间段里思考者这些相似的问题。
</p>

<p>
这也算是一种没有时间、空间限制的交流吧，等我们互相看到对方的文字的时候。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-04-14-the-passing-future.html</link>
  <guid>https://www.vandee.art/blog/2025-04-14-the-passing-future.html</guid>
  <pubDate>Mon, 14 Apr 2025 10:41:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[或许可以这样看待大语言模型]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org531b6a8">大语言模型是什么</a></li>
<li><a href="#orgd56a658">或许可以这样看待大语言模型</a>
<ul>
<li><a href="#orgdfcf67c">知识库 ZIP</a></li>
<li><a href="#org09e6548">自然语言编程</a></li>
</ul>
</li>
<li><a href="#org30671cf">小结</a></li>
</ul>
</div>
</nav>
<p>
最近被 DeepSeek 刷屏了，我其实是有点烦的。这种过度的宣传，不可避免的会蒙蔽少部分看热闹的人，但这就是热度本身。
</p>

<p>
本来是不太想写今天的内容的，但想着或许我这两年自学 AI 的经验可以帮助到哪些和我开始一样对 AI 感兴趣的人。正是因为我是一个 AI 行业的局外人，所以才能有不一样的视角。前几天的 <a href="https://www.vandee.art/2025-02-03-emacs-is-all-you-need.html">Emacs is all you need</a> ，也完全是因为看到咸鱼上有人在炒作 DeepSeek 才写的。今天的也是类似，或许可以分享一些真正有用的东西。
</p>

<p>
我没有 AI 方面的专业背景，因此也不会涉及到专业的术语，只是一些学习的路径和思路，仅供参考。如果这些内容帮助到了你，我会很开心。
</p>

<div id="outline-container-org531b6a8" class="outline-2">
<h2 id="org531b6a8">大语言模型是什么</h2>
<div class="outline-text-2" id="text-org531b6a8">
<p>
看完 Andrej Karpathy 大佬的这两个视频：
</p>

<p>
<a href="https://www.youtube.com/watch?v=zjkBMFhNj_g&amp;t=1218s">{1hr Talk} Intro to Large Language Models - YouTube</a> , <a href="https://www.youtube.com/watch?v=7xTGNNLPyMI&amp;t=7959s">Deep Dive into LLMs like ChatGPT - YouTube</a>
</p>

<p>
基本上就对大语言模型 LLM 有了宏观上的概念了。
</p>

<p>
Transformer Neural Net 3D visualizer: <a href="https://bbycroft.net/llm">https://bbycroft.net/llm</a> ,这个网站用 3D 模型详细的展示了 transformer 架构的原理和过程。
</p>

<p>
用 AK 大佬的话来说，LLM 就是一个巨大的 ZIP，它汇聚了特定时间点互联网上海量的相对优质的知识和资源。这来源于在 pre-training 预训练过程中的数据集。之后的 post-training 不会改变 LLM 的基础知识（RAG 算是额外知识）。
</p>

<p>
本质上，LLM 就是在特定数据集的基础上，通过 transformer 架构神经网络来通过输入预测下一个词（现阶段流行的的大语言模型基本是基于 transformer 架构）。至于 transformer 架构是什么，可以简单理解为一个编码器和一个解码器。所有输入 LLM 的内容，最终会被 LLM 理解为一个个的 token, <a href="https://tiktokenizer.vercel.app/">https://tiktokenizer.vercel.app/</a> 这个网站可以详细的看到输入的内容对于 LLM 来说是什么。
</p>

<p>
简单来说就是，一个个的 token 组成 sequence ，LLM 根据输入的内容，预测最可能的输出。平常计费的时候，消耗了多少多少 token ,也就是它。这就是发生在 LLM 对话框后面的简单过程。
</p>

<p>
上面的概念都来自与 AK 的视频，不是我自己的理解。
</p>

<p>
当然 LLM 背后的技术肯定比上面说的复杂，但实现的逻辑其实没那么难理解。
</p>

<p>
更多的关于 LLM 的基础知识，在 GitHub 上随便搜搜就有大量的合集。
</p>

<p>
推荐几个：
</p>
<ul class="org-ul">
<li><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型图解-知乎</a>，这篇文章很通俗详细的介绍了，transormer架构的原理。</li>
<li>3Blue1Brown 讲解 LLM 原理的视频，很优秀： <a href="https://www.bilibili.com/video/BV1TZ421j7Ke">【官方双语】直观解释注意力机制，Transformer的核心</a> , <a href="https://www.bilibili.com/video/BV13z421U7cs/">【官方双语】GPT是什么？直观解释Transformer</a> ， <a href="https://www.bilibili.com/video/BV1xmA2eMEFF/">【官方双语】大语言模型的简要解释</a> ，<a href="https://www.youtube.com/watch?v=9-Jl0dxWQs8">How might LLMs store facts | Chapter 7, Deep Learning - YouTube</a></li>
<li>李沐深度学习经典、新论文逐段精读 ：<a href="https://github.com/mli/paper-reading">https://github.com/mli/paper-reading</a></li>
<li><a href="https://llmbook-zh.github.io/">大语言模型 | LLMBook-zh</a></li>
<li><a href="https://github.com/HandsOnLLM/Hands-On-Large-Language-Models">Hands-On-Large-Language-Models</a></li>
<li><a href="https://github.com/rasbt/LLMs-from-scratch">GitHub - rasbt/LLMs-from-scratch</a></li>
<li><p>
这是一个简单的技术科普教程项目，主要聚焦于解释一些有趣的，前沿的技术概念和原理。每篇文章都力求在 5 分钟内阅读完成。
</p>

<p>
<a href="https://github.com/karminski/one-small-step">https://github.com/karminski/one-small-step</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orgd56a658" class="outline-2">
<h2 id="orgd56a658">或许可以这样看待大语言模型</h2>
<div class="outline-text-2" id="text-orgd56a658">
<p>
这部分是我自己的理解，仅仅仅供参考。
</p>
</div>

<div id="outline-container-orgdfcf67c" class="outline-3">
<h3 id="orgdfcf67c">知识库 ZIP</h3>
<div class="outline-text-3" id="text-orgdfcf67c">
<p>
我一直是这么看待大语言模型的，它就是一个巨大的知识库，通过特定的 prompt，就可以拟人化的和这个知识库互动。
</p>

<p>
因此抛开 LLM 背后复杂的实现，在实际应用上，完全可以把它当作是自己的一个朋友、老师、私人助手。
</p>

<p>
我们不必再去搜索许多专业的知识，因为在预训练的时候，LLM 这个 ZIP 里已经记录了，在预测的时候，它会优先从“记忆” 中回答，这也是容易产生幻觉的原因。当 LLM 在回答自己知识库之外的问题时，因为是预测的最可能的回答，它就会开始胡编乱造，也就是 hallucination。
</p>

<p>
针对知识库之外的回答，现在的 LLM 基于 Agent，可以调用 tool 来实现联网的搜索，让回答更加准确。还有 RAG（Retrieval-Augmented Generation 检索增强生成）来 embed（嵌入）特定的文档和知识库。
</p>

<p>
因此，在学习方面应用 LLM 就变成了，用特定的语句（prompt），去检索 LLM 的知识库，用特定的方式和这个朋友来互动。也难怪 OpenAI 会下那么大的力气在 AI 教育上，有了这个知识库，某种程度上，就有了一个 24 小时在线的老师。
</p>

<p>
这和看书其实没太大差别，只是从用手去翻书变成了用 prompt 检索问答。
</p>
</div>
</div>
<div id="outline-container-org09e6548" class="outline-3">
<h3 id="org09e6548">自然语言编程</h3>
<div class="outline-text-3" id="text-org09e6548">
<p>
要说 LLM 在最开始对那个行业的冲击最大，那一定是程序员。简单来说，现在不必要必须掌握编程语言，在 LLM 的帮助下，就可以用自然语言进行编程。
</p>

<p>
因此，我也一直把 LLM 看作是一个新的编程语言。
</p>

<p>
对于普通人来说，编程可以解决什么问题呢？
</p>

<p>
如果说,编程的本质是将人类解决问题的思维（算法）转化为计算机可以执行的指令,赋予机器理解并执行复杂任务的能力,那么，LLM 极大的降低了这个过程的门槛。
</p>

<p>
我们现在的生活已经离不开互联网，更加离不开依附在互联网上的各种软件和服务，而这些都离不开计算机编程。
</p>

<p>
在 iPhone 上通过快捷指令截图识别内容、四象限日程提醒、新闻聚合筛选自己感兴趣的内容等等这些自定义的功能，在 LLM 的帮助下，普通人一个星期就可以开发出一个简单的 MVP( Minimum Viable Product 最小可行产品 ) 了。对于没有编程经验的人来说，LLM 大大降低了 MVP 开发的技术门槛和时间成本。
</p>

<p>
简单说就是，原本需要付费才能有的服务，现在自己动动手就可以平替了。
</p>
</div>
</div>
</div>

<div id="outline-container-org30671cf" class="outline-2">
<h2 id="org30671cf">小结</h2>
<div class="outline-text-2" id="text-org30671cf">
<p>
LLM 拓宽了想象力的边界，这是我对 LLM 最简单的理解。
</p>

<p>
纵观人类历史的推动和发展，最离不开的就是想象力：从哥白尼的日心说，到爱因斯坦的相对论；从莱特兄弟的飞机到 spaceX；从图灵的图灵机，再到现在的大语言模型。
</p>

<p>
是人类的想象能力让我们点燃了第一个知识的火把，在大自然严酷的生存法则里进化生存了下来，也是想象让我们不断走出柏拉图之穴探求知识和真理，也是想象让我们在苦难和痛苦中保持着乐观和希望。正是想象，让人类能够创造出属于我们自己的历史，把一个个幻想变成现实。
</p>

<p>
LLM 是技术和工具, 决定上限的，始终是我们自身的思维能力。就像武林高手，即使手持柳枝也能削铁如泥。
</p>

<p>
Imagine and creating！对我来说，这是世界上最好玩的事情了。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-llm.html">LLM</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[LLM]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-02-13-LLM-is-a-big-ZIP-of-knowledge.html</link>
  <guid>https://www.vandee.art/blog/2025-02-13-LLM-is-a-big-ZIP-of-knowledge.html</guid>
  <pubDate>Thu, 13 Feb 2025 15:14:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Emacs is all you need]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0681349">TL;DR</a></li>
<li><a href="#org46c04a1">前言</a></li>
<li><a href="#orgdeacdca">热情的扩散</a></li>
<li><a href="#org5ac5667">AI StartKit</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org0681349" class="outline-2">
<h2 id="org0681349">TL;DR</h2>
<div class="outline-text-2" id="text-org0681349">
<p>
Emacs is all you need
</p>
</div>
</div>

<div id="outline-container-org46c04a1" class="outline-2">
<h2 id="org46c04a1">前言</h2>
<div class="outline-text-2" id="text-org46c04a1">
<p>
这几年最正确的决定就是入手了现在这台 Macbook M1 max。如果说当时我就遇见到了现在它能够给我带来的改变，你肯定不信，但事实就是如此。
</p>

<p>
其实当初是为了摄影才考虑的，原来的老台式在一次渲染延时摄影的时候，苦苦等待了 3 小时之后，结果死机了，这仅仅只是一个 1 分钟的延时。综合考虑到还需要一台接近 Linux 体验的的系统开始学习编程，还想玩玩本地模型，于是直接上了顶配，而价格是当时 Macbook M3 max 的一半。
</p>

<p>
如果没有这台 Macbook 就不会这么愉快的用上 Emacs ，也就不会有现在的整个 PKM 体系，也不会有 <a href="https://www.vandee.art/2024-05-22-org-pkm-manual.html">PKM（个人知识管理）构建手册 - Emacs</a> ,也不会有现在部署的几个个人网站，也不会有现在突飞猛进的学习效率：<a href="https://www.vandee.art/2025-01-20-fragmented-knowledge-learning-with-ai.html">碎片知识学习 - with AI</a>，我可能还在继续用 Logseq。大的变数就是从这些看似不起眼的小决定开始萌芽。
</p>

<p>
关于 Emacs 部分今天不准备多说什么，而是想先聊聊 <a href="https://github.com/VandeeFeng/gitmemo/issues/34">热情的扩散</a> 。
</p>
</div>
</div>

<div id="outline-container-orgdeacdca" class="outline-2">
<h2 id="orgdeacdca">热情的扩散</h2>
<div class="outline-text-2" id="text-orgdeacdca">
<p>
不知道从什么时候开始，在 Emacs 里敲键盘这件事本身就会让我觉得很有意思。
</p>

<p>
相似的，我其实不喜欢读论文，但用自己构建的工具来学论文，就变得有意思了。我也很懒，平常不太爱出远门，但是带上相机，我就有了去很多地方的兴趣。
</p>

<p>
这应该就是热情的扩散。
</p>

<p>
当在一个领域或者某个阶段当中，不可避免的需要面对枯燥乏味或是很难推进的事物，附加上各种鸡汤式的理由来强行说服自己不会是我的做法，依靠奖励来推动行动也不可取，强迫自己对一个东西发展出兴趣更没有必要。
</p>

<p>
Embark on something with passion and interest，在自己感兴趣的事物的基础上发展、扩散到更多的领域。这应该是一种更正面的，克服枯燥、懒惰的方法。
</p>
</div>
</div>

<div id="outline-container-org5ac5667" class="outline-2">
<h2 id="org5ac5667">AI StartKit</h2>
<div class="outline-text-2" id="text-org5ac5667">
<p>
从 OpenAI 到现在的 2025 年，其实许多人都还没有真正接触到 AI，大部分人只是接触到了 AI 化的产品，例如 ChatGPT 的 APP，更有一部分根本对 AI 就没太大兴趣。在我的概念里，调用过 LLM 的 API 才可能叫接触过 AI 了。
</p>

<p>
我不是 AI 的布道者，更没有相关利益捆绑，也丝毫不想鼓吹 AI。但技术变革就是在彻底改变生活的时候才会被称作变革，在这之前的过程往往会被忽略，就像互联网一样。
</p>

<p>
可以毫不关心，只是等待生活被 AI 新技术彻底改变的时候，继续享受新的生活，也可以在被它彻底改变之前，不让它改变自己。我不喜欢被动的接受，仅此而已。
</p>

<p>
对于后者，Emacs 就是最好的 startkit。它可以解决从 0 到 1 的问题，解决一个问题最难部分的就是开始。
</p>

<p>
在咸鱼上已经有本地部署 DeepSeek 的教程在卖了，很难想象几行代码就可以卖 20 块，而且销量还不错。这不是信息差带来的消费，这只是懒。这个 20 块，5 年之后可能就是你会消费的 20 万。LLM 大语言模型 说简单点就是一个巨大的 ZIP，玩 LLM 只是需要一个打开这个 ZIP 的工具而已。
</p>

<p>
So, All you need is Emacs.
</p>

<p>
从 Emacs 开始，自然就会掌握编程的基础概念，Emacs 提供了高度可自定义的代码编辑器、自带终端、更直接的 compile，也就是和 AI 开始真正接触的入口，当然 Emacs 远不止如此。感兴趣的可以看这个：<a href="https://www.youtube.com/watch?v=81MdyDYqB-A">Configuring Emacs on My New Laptop - YouTube</a>
</p>

<p>
和 Cursor 这种 AI 代码编辑器相比，Emacs 当然没有那么开箱即用，但捷径往往是远路。
</p>

<p>
也并不是只有 Emacs 才是适合 AI 行业外的 AI StartKit，但是能够像 Emacs 一样既能充当向导，又能构建出自己的工具的，真没有几个。
</p>

<p>
就像我刚开始使用 Emacs 的时候看到的一篇文章说的那样：Emacs 已经改变了我的生活。
</p>

<p>
更准确的说，应该是持续学习，让我不那么容易被改变。
</p>

<p>
最后，这篇文章就是在 Emacs 的 org-mode 里，直接和 DeepSeek-R1 自动补全协同生成的。这不比咸鱼的 20 块消费玩的开心多了？
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2025-02-03-emacs-is-all-you-need.html</link>
  <guid>https://www.vandee.art/blog/2025-02-03-emacs-is-all-you-need.html</guid>
  <pubDate>Mon, 03 Feb 2025 13:10:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[碎片知识学习 - with AI]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgce5d7cb">前言</a></li>
<li><a href="#org969ede0">PDF 阅读</a></li>
<li><a href="#org0e51aae">网页阅读</a></li>
<li><a href="#org7625776">零散的概念</a></li>
<li><a href="#org9ee1cdb">搜索</a>
<ul>
<li><a href="#org693fe8b">2025-03-08 added</a></li>
</ul>
</li>
<li><a href="#org292cbae">其他工具</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgce5d7cb" class="outline-2">
<h2 id="orgce5d7cb">前言</h2>
<div class="outline-text-2" id="text-orgce5d7cb">
<p>
对于是否要拥抱 AI，在程序员里大致可以分为两派：一部分是坚决不用，一类是已经将 AI 融入了自己的工作流程。后面就简称为革新派和精英派。
</p>

<ul class="org-ul">
<li>精英派不用 AI 来写代码的原因也简单充分，AI 写出来的代码就是垃圾，我可以自己写的更好为什么要让 AI 来破坏我的优美的代码？</li>

<li>革新派的观点也很简单，借助 AI 可以简化许多复杂的流程，例如自动补全、自动修正、自动测试、自动修复、自动提交等等。类似 Cursor 的 AI 代码编辑器，完全可以说改变了代码工作的方式。</li>
</ul>

<p>
我是一个行业外的人，自然不需要有太多立场，不需要站队。也没有什么压力，必须要跟上行业的大趋势，保住工作。因此我对于 AI 的出发点是优化信息处理、优化学习流程。并且，对于编程和 AI，我本身也挺有兴趣。我和 AI 相关的博客文章也都不是什么技术文章，更多的是一个行业外的人的记录和分享。
</p>

<p>
对于行业外的人，大致可以分为几种：一起吹泡泡吃行业红利的，和我类似关注 AI 在知识上的应用的，借助 AI 开始独立开发的。现在借助各种 AI 代码工具，行业外的人确实可以很快做出一些 MVP，或者一些小工具，大语言模型打破了自然语言编程的壁垒。我这半年也借助 AI 实现了许多以前想做但做不出来的小项目。
</p>

<p>
2024 的小泡泡是 RAG 、prompt 和 AI 逻辑推理，半年不到就冒出来不少于 5 种 RAG 类型，各种神级优化 prompt，现在回过头来看呢，真正落地到实际项目的没有多少。
</p>

<p>
2025 AI 的新泡泡是 Agents，其实也就是换了一种说法。让 AI 根据特定的 prompt 可以调用 tools，定义不同的 Agent 类，来分析完成不同的任务。LangChain、OpenAI、Gemini 都推出了各自的 Agents 框架，之前基于老框架的代码就全部都得更新才能正常运行，因为底层的函数调用都更改了。小业务、小项目只能被大趋势牵着走，牵一发动全身。
</p>

<p>
我想表达的是，这些 AI 的隐性成本是我这类行业外的人不需要支付的。
</p>

<p>
查理芒格说过，最大的投资永远是自己。不管是 AI 行业内的还是行业外的，核心始终都应该在提升自己上，过度的追赶趋势，在泡泡破了的时候就得不偿失了。这也是我始终没有太深入的研究 Dify、Coze 这类中间类型的 AI 工具的原因。掌握更多底层的知识和逻辑是更重要的。
</p>

<p>
后面是最近关于 PDF 和网页阅读的一些方法。日常需要 AI 来帮助的主要也是这两类。
</p>
</div>
</div>

<div id="outline-container-org969ede0" class="outline-2">
<h2 id="org969ede0">PDF 阅读</h2>
<div class="outline-text-2" id="text-org969ede0">
<p>
<a href="https://github.com/echohive42/AI-reads-books-page-by-page">GitHub - echohive42/AI-reads-books-page-by-page</a> 这个项目前段时间上了 GitHub Trends，项目逻辑很值得学习，立马 fork 自定义了一下：<a href="https://github.com/VandeeFeng/ReadPDFpbp">https://github.com/VandeeFeng/ReadPDFpbp</a> 。主要增加了 ollama 和 OpenRouter 模型的调用，还有一些自定义的参数，可以直接在 CLI 里调用。行业标准害人啊，cookbook 里都默认使用 OpenAI 和 Claude 的 API。
</p>

<p>
这个项目可以逐页阅读 PDF，生成知识要点，并根据页面分段总结。一个 50 页以上的 PDF，自己看就有点吃力了。NotebookLM 虽然很好用，但是超过了 80 页左右的 PDF，我实际用下来也不是很准确。
</p>

<p>
这个项目可以逐页阅读总结出关键的概念和知识点，然后再找到相关页面精读。另外一个优势就是本地模型是免费的，几个 200 页的 PDF 用 OpenAI 可能几刀就没了。
</p>
</div>
</div>
<div id="outline-container-org0e51aae" class="outline-2">
<h2 id="org0e51aae">网页阅读</h2>
<div class="outline-text-2" id="text-org0e51aae">
<p>
<a href="https://github.com/vandeefeng/gitmemo/issues/26">在知识之间、AI 之间创造 connection</a> 这里是有关用 phidata 构建 Agent 来同时分析 2 个以上网页文章的内容。
</p>

<p>
解决了同时在几个主题相似的网页文章里快速找到关键信息的问题，效率提升不少。相关的项目很多，自己折腾了一下，主要是增加了导出的功能，这个对于我来说很重要。
</p>

<p>
导出历史对话就可以进一步整合，这个功能在许多大型 RAG 项目里就是不给。
</p>
</div>
</div>
<div id="outline-container-org7625776" class="outline-2">
<h2 id="org7625776">零散的概念</h2>
<div class="outline-text-2" id="text-org7625776">
<p>
平常一些概念上的学习，之前是在 OpenWeb UI 里，现在基本都在 Emacs 里用 gptel 了，全部都汇总在一个 org 文档里。
</p>


<figure id="org9425a4d">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/llmchat.gif" class="img" width="50%" height="50%">

</figure>
</div>
</div>

<div id="outline-container-org9ee1cdb" class="outline-2">
<h2 id="org9ee1cdb">搜索</h2>
<div class="outline-text-2" id="text-org9ee1cdb">
<p>
一般的搜索直接用 DuckDuckGo 。再就是自己改了一下的 <a href="https://github.com/VandeeFeng/Gemini-Search">Gemini-Search</a> ，部署到 docker 调用 Gemini 的 API 实现类似 Perplexity 的体验。
</p>
</div>

<div id="outline-container-org693fe8b" class="outline-3">
<h3 id="org693fe8b">2025-03-08 added</h3>
<div class="outline-text-3" id="text-org693fe8b">
<p>
最近各种 Deep Research 和 Deep Search 大大提升了用 AI 搜索的效率。OpenAI 和 Grok 的深度搜索效果都挺不错的。Deep Research 使用了半个多月，对我来说它最大的作用是针对一定的领域、topic，开拓思路，快速的找到这些问题领域的框架和索引。
</p>

<p>
强烈推荐下面几个可以自己折腾的：
</p>

<ul class="org-ul">
<li><p>
node-DeepResearch: 可以自己部署，支持Gemini (latest gemini-2.0-flash) / OpenAI / LocalLLM 做推理模型，用 Jina Reader 搜索和处理网页内容。在需要获取全面但简洁的信息的时候，效果还挺不错的。
</p>

<p>
README 的说明也挺有道理：
</p>

<blockquote>
<p>
与 OpenAI/Gemini/Perplexity 的“深度研究”不同，我们仅专注于通过我们的迭代过程找到正确的答案。我们不为长篇幅文章进行优化，那是一个完全不同的问题——因此，如果您需要从深度搜索中获得快速、简洁的答案，那么您来对地方了。如果您正在寻找像 OpenAI/Gemini/Perplexity 那样的 AI 生成的长篇报告，那么这不适合您。
</p>
</blockquote>

<p>
Github: <a href="https://github.com/jina-ai/node-DeepResearch/">https://github.com/jina-ai/node-DeepResearch/</a>
</p>

<p>
Websites: <a href="https://search.jina.ai">https://search.jina.ai</a>
</p></li>

<li><p>
deep-research-web-ui: 这个项目是 <a href="https://github.com/dzhng/deep-research">https://github.com/dzhng/deep-research</a> 的可视化版本，并做了一些改进。联网搜索服务：Tavily (每月 1000 次免费搜索), Firecrawl（支持自部署），支持 OpenAI compatible, SiliconFlow, DeepSeek, OpenRouter, Ollama 。
</p>

<p>
Github: <a href="https://github.com/AnotiaWang/deep-research-web-ui">https://github.com/AnotiaWang/deep-research-web-ui</a>
</p></li>

<li><p>
Storm：An LLM-powered knowledge curation system that researches a topic and generates a full-length report with citations.
</p>

<p>
STORM 是一个大型语言模型系统，能够根据互联网搜索从零开始撰写类似维基百科的文章。Co-STORM 进一步增强了其功能，使人类能够与大型语言模型系统协作，以支持更符合需求和偏好的信息搜索和知识策划。
</p>

<p>
GitHub：<a href="https://github.com/stanford-oval/storm">https://github.com/stanford-oval/storm</a>
</p>

<p>
Websites：<a href="https://storm.genie.stanford.edu/">https://storm.genie.stanford.edu/</a>
</p></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org292cbae" class="outline-2">
<h2 id="org292cbae">其他工具</h2>
<div class="outline-text-2" id="text-org292cbae">
<p>
另外要强烈安利 <a href="https://github.com/nbonamy/witsy">Witsy</a> 这个项目，不多介绍了，它就是我到目前为止用过最好用的 LLM 客户端。
</p>

<p>
Cursor、VSCode、Windsurf 等编辑器，不写代码，纯粹拿来学习也是完全没有问题的。还可以和 obsidian 这样的知识库 RAG 联动。
</p>

<p>
该白嫖的行业红利还是要嫖的。
</p>

<p>
当然我的最爱还是 Emacs。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <link>https://www.vandee.art/blog/2025-01-20-fragmented-knowledge-learning-with-ai.html</link>
  <guid>https://www.vandee.art/blog/2025-01-20-fragmented-knowledge-learning-with-ai.html</guid>
  <pubDate>Mon, 20 Jan 2025 16:48:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[结构化知识工作流-with AI]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf061ccb">Intro</a></li>
<li><a href="#orga7517b5">信息处理</a>
<ul>
<li><a href="#org3d04889">被动信息</a></li>
<li><a href="#org48444bb">主动信息</a></li>
</ul>
</li>
<li><a href="#org6d79b77">文章精读</a></li>
<li><a href="#org5de2d32">笔记</a>
<ul>
<li><a href="#orgfd8e155">Chipper</a></li>
</ul>
</li>
<li><a href="#org8198bf7">输出</a></li>
<li><a href="#org8fb2e40">小结</a></li>
</ul>
</div>
</nav>
<p>
今年花了很多时间在研究 LLM 和知识库的结合上，整理一下现在的流程，后面有更新了也都放在这里。
</p>

<p>
每当我们习惯了一种模式之后，大脑就获得了这种习惯的松弛感，就好像出去吃饭的时候，到了一个熟悉的餐厅熟悉的环境，看到了熟悉的菜单，感觉很从容。我本能的会记住这种大脑的感觉，就好像闻到了一个气味，下一次再闻到它的时候，就很自然的会回忆起相关的细节。每当这个松弛感出现之后，我就意识到，是时候要更新了。
</p>

<p>
因为，一个开了 20 年车的司机，很可能在技术上没有进步反而倒退了，在习惯和熟悉感之中，许多技能就会退化，更要命的是，它会释放一个错误的信号：这种建立在持续时间长短之上的自信和权威是我们经常会放大的。
</p>

<p>
因此，我养成了一个习惯，也就是当松弛感出现之后，强迫大脑去习惯新的习惯。在这个过程当中，就好像带上了一个放大镜，那些在习惯之下拙劣的细节被放大。
</p>

<div id="outline-container-orgf061ccb" class="outline-2">
<h2 id="orgf061ccb">Intro</h2>
<div class="outline-text-2" id="text-orgf061ccb">
<p>
信息很容易被误认为是知识，我们每天会被动和主动的接受到许多信息，会自然的获得一种感觉：我今天又学到了，知道了很多新鲜的东西。但这不是知识，当信息被固定和<a href="https://wiki.vandee.art/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%9F%A5%E8%AF%86">结构化</a>之后，才可能被称作知识。
</p>

<p>
在 AI 的帮助下，这个过程变得更系统也更便捷。学习不是一系列任务，更不只是一个阶段性的教育，而是生物进化过程当中一个必然会参与的活动。对于我来说，我很享受这个过程，学习就好像健身锻炼一样，再内啡肽和多巴胺的作用下，正反馈其实很容易建立。
</p>

<p>
在《穷查理宝典》里我最大的收获就是 <a href="https://www.vandee.art/2023-12-06-learn-all-the-time.html">Learn All The Time</a> 。
</p>
</div>
</div>

<div id="outline-container-orga7517b5" class="outline-2">
<h2 id="orga7517b5">信息处理</h2>
<div class="outline-text-2" id="text-orga7517b5">
<p>
信息处理部分的目标是：
</p>

<ul class="org-ul">
<li>统一在一个地方阅读，现在是 Readwise 可能明年会自己搭建。</li>
<li>渐进式阅读，每一次高亮标注重点之后，最终生成高度原子化的概念。</li>
<li>通过 Emacs 的 agenda 和自制的回顾卡片，让知识流动起来，融入循环。</li>
</ul>

<p>
最终在一次次的迭代之后，这些信息会被筛选成高度原子化的笔记，记录到 <a href="https://wiki.vandee.art/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%9F%A5%E8%AF%86">Vandee — Wiki</a> 。
</p>

<p>
视频学习，现在基本全部都在 google 的 <a href="https://notebooklm.google.com/">NotebookLM</a>，太方便了。
</p>

<p>
基于这些就有许多有意思的项目可以做了，例如最近在折腾的，从数据库里检索一个星期之内的信息，做一个简报，用 GitHub action 实现自动化。
</p>
</div>
<div id="outline-container-org3d04889" class="outline-3">
<h3 id="org3d04889">被动信息</h3>
<div class="outline-text-3" id="text-org3d04889">
<p>
现在我的被动信息获取主要来源于 RSS 订阅，今年开通了 Readwise 的订阅，并在 claude 的帮助下构建了一个信息固定的 workflow：<a href="https://www.vandee.art/2024-11-10-database-of-flowing-knowledge.html">数据库的搭建 - 流动知识检索</a> 、<a href="https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html">用 GitHub 仓库做书签和 AI 摘要 - 流动知识检索</a> 。
</p>

<p>
在 Readwise 里阅读 RSS 的推送，用 <a href="https://github.com/osmoscraft/osmosmemo">osmos::memo</a> 书签插件剪藏网页文章，保存到 Readwise 阅读，并同步保存到 teable 的数据库。进一步通过 Github action 生成 <a href="https://clip.vandee.art/">Vandee's Clip</a> 。
</p>

<p>
通过渐进式阅读，在迭代高亮标注几次之后，最后在 Emacs 里通过 capture 固定到 <code>clip.org</code> ，作为剪藏的元数据，方便以后的工作流提取。
</p>

<p>
在一个开源项目的基础上，修改了一下，搞了一个信息聚合的：<a href="https://github.com/VandeeFeng/wisecrawl/">VandeeFeng/wisecrawl</a> 。ReadWise 今年就不打算用了，全部接入数据库。RSS 阅读器现在使用的是 <a href="https://github.com/electh/nextflux">electh/nextflux</a> 和 <a href="https://github.com/miniflux/v2">miniflux</a> &#x2013;2025-05-05
</p>
</div>
</div>
<div id="outline-container-org48444bb" class="outline-3">
<h3 id="org48444bb">主动信息</h3>
<div class="outline-text-3" id="text-org48444bb">
<p>
目前会每天看一看这些网站：
</p>
<ul class="org-ul">
<li><a href="https://zeli.app/zh">Zeli - 用中文阅读Hacker News和AI论文</a></li>
<li><a href="https://newsnow.busiyi.world/c/focus">NewsNow</a></li>
<li><a href="https://huggingface.co/papers">Daily Papers - Hugging Face</a></li>
<li><a href="https://emacs-china.org/">Emacs China</a></li>
<li><a href="https://trendshift.io/">Trendshift - Explore open-source repositories and find some insights</a></li>
<li><a href="https://hellogithub.com/en">Interesting open-source community - HelloGitHub</a></li>
<li><a href="https://linux.do/">LINUX DO - 新的理想型社区</a></li>
</ul>

<p>
还有一些自己关注大佬的博客和 GitHub 仓库。
</p>

<p>
最近在听播客，这是我长时间纯文字阅读之后忽略的部分。现在播客的大环境挺好的，有许多高质量的资源。
</p>
</div>
</div>
</div>
<div id="outline-container-org6d79b77" class="outline-2">
<h2 id="org6d79b77">文章精读</h2>
<div class="outline-text-2" id="text-org6d79b77">
<p>
最近用 phidata 和 ollama 构建了一个简单的本地 <a href="https://memo.vandee.art/issue/26">RAG assistant</a> ，可以直接输入文章 url，结合文章内容具体的提问，这样就可以同时对多个相关内容的文章进行系统的提问，效率提升了不少。
</p>

<p>
这个过程当中，AI 会帮助我剔除我不关心的部分，快速的找到概念之间的联系，并发散思维，帮助我提出更好的问题。
</p>

<p>
AI 善于回答问题，但它不善于提出问题。使用 AI 学习了很长时间之后，我觉得很重要的一点就是：让 AI 帮助自己提出问题。而这些，一个简单的 prompt 就可以解决。
</p>

<p>
这一步的目标是：在知识之间、AI 之间创造 connection。如果只是机械的把 AI 当作一个阶段性的工具，那么它的价值是很有限的。更进一步，AI 完全可以是一个 24 小时全天在线的朋友。它可以帮助自己提出更好的问题，找到自己思维习惯的盲区，是知识、信息、思维的一个很好的连接点。
</p>
</div>
</div>

<div id="outline-container-org5de2d32" class="outline-2">
<h2 id="org5de2d32">笔记</h2>
<div class="outline-text-2" id="text-org5de2d32">
<p>
笔记部分是固定结构化知识最核心的一步，<a href="https://wiki.vandee.art/#%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>。
</p>

<p>
经过几个月迭代出了 <a href="https://www.vandee.art/2024-05-22-org-pkm-manual.html">PKM（个人知识管理）构建手册 - Emacs</a> ，现在终于有了一个基于 Emacs 的比较满意的笔记流程。作为 PKM 的基础库，这里保存着最原始的笔记材料和历史记录。
</p>

<p>
高度原子化的笔记输出到 <a href="https://wiki.vandee.art/#%E6%9B%B4%E5%A4%9A%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%9F%A5%E8%AF%86">Vandee — Wiki</a> ，在 Emacs 里用 bash 脚本记录到 tiddlywiki。
</p>

<p>
在 Emacs 里用 <a href="https://github.com/karthink/gptel">gptel</a> 可以很方便的和 AI 交互对话，直接在 org 文档里记录和 LLM 对话的内容。这个挺关键的，和 AI 对话的检索是个大问题。现在的 AI 平台很分散，各自的数据又都不能导出，这对于记录 AI 学习笔记来说，很麻烦。直接在 Emacs 里和 AI 交互就解决了这个痛点。
</p>

<p>
下一步要构建数据库版本的笔记，和 Emacs 的工作流结合起来，<a href="https://memo.vandee.art/issue/26">在知识之间、AI 之间创造 connection</a> 。
</p>

<p>
supabase 最进又更新了 <a href="https://database.build/">Postgres Sandbox</a> ,和我的思路不谋而合。
</p>
</div>

<div id="outline-container-orgfd8e155" class="outline-3">
<h3 id="orgfd8e155">Chipper</h3>
<div class="outline-text-3" id="text-orgfd8e155">
<p>
Github: <a href="https://github.com/TilmanGriesel/chipper">https://github.com/TilmanGriesel/chipper</a>
</p>

<p>
其实很早就关注了这个项目，但是一直没有尝试。这个项目基于 Elasticsearch 来实现文档搜索和 RAG。LLM 的提供支持 ollama 和 huggingface。提供脚本一键 docker 部署很方便。
</p>

<p>
我看重的功能是：它可以提供一个 ollama 的代理。也就是使用这个项目的 ollama 代理之后，就可以直接调用项目的文档 RAG 了，而这个项目管理文档 RAG 很方便。这样就可以把它当作是一个文档搜索引擎了。
</p>
</div>
</div>
</div>

<div id="outline-container-org8198bf7" class="outline-2">
<h2 id="org8198bf7">输出</h2>
<div class="outline-text-2" id="text-org8198bf7">
<p>
<a href="https://wiki.vandee.art/#%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%80%9D%E8%80%83%E8%80%8C%E4%B8%8D%E8%BE%93%E5%87%BA%EF%BC%8C%E4%BD%A0%E5%8F%AA%E6%98%AF%E4%BB%A5%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%9C%A8%E6%80%9D%E8%80%83">如果你思考而不输出，你只是以为自己在思考</a> ，费曼学习法里说的太多了，study in public。
</p>

<p>
作为结构化知识循环的最后一步，输出的过程当中，是对结构化知识的检验也是应用。更重要的是，一个信息如果不能融入一个系统或者环境，它的封闭性会削弱这个信息的价值。
</p>

<p>
做笔记当然是为自己做的，但是它的价值是可以放大的。向外的探索和向内的探索同样重要，俗话说三人行必有我师，信息的披露和流动对于向内的探索是很有帮助的。
</p>

<p>
现在只是把这些输出到 <a href="https://www.vandee.art/">Vandee's Blog</a> 和 <a href="https://memo.vandee.art/">Git Memo</a> ，并没有加入太多社交属性。可以被搜索引擎检索到对于我现在来说就挺足够了。
</p>

<ul class="org-ul">
<li>Blog: <a href="https://www.vandee.art/2024-10-24-my-first-org-blog.html">我的第一篇 org 博客</a> ,博客现在也直接在 Emacs 里写作，很巴适。生成静态网页发布到 GitHub 通过 Vercel 部署，Cloudflare 加速和管理 DNS。</li>
<li>Memo: <a href="https://github.com/VandeeFeng/gitmemos">VandeeFeng/gitmemos: An alternative to Memos depending on github issues and supabase</a> ,在 cursor 的协助下，糊了一个 gitmemos 用来当作朋友圈的替代,不知道是哪个好心人给了一个仅有的 star 🤣。这个项目主要是想增加一点社交属性，把一些小想法记录下来，通过卡片分享。<a href="https://github.com/VandeeFeng/gitmemo/issues/6">没有记录就没有发生，而记录本身已经是一种反抗</a> ,有事没事记两笔。</li>
</ul>
</div>
</div>
<div id="outline-container-org8fb2e40" class="outline-2">
<h2 id="org8fb2e40">小结</h2>
<div class="outline-text-2" id="text-org8fb2e40">
<p>
<a href="https://wiki.vandee.art/#%E6%8F%90%E5%8D%87%E5%BD%B1%E5%93%8D%E5%8A%9B">提升影响力</a> ，做一个 <a href="https://wiki.vandee.art/#%E9%92%A5%E5%8C%99%E4%BA%BA(Key%20Man)">钥匙人(Key Man)</a> ，每个人的价值都应该能在不同的体系里得到放大和体现，这样社会平均价值自然会得到提升。
</p>

<p>
思考和写作是一个很好的起点，也是每个普通人下一秒就可以开始的事情。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <link>https://www.vandee.art/blog/2024-12-24-the-structrued-knowledge-workflow-with-ai.html</link>
  <guid>https://www.vandee.art/blog/2024-12-24-the-structrued-knowledge-workflow-with-ai.html</guid>
  <pubDate>Tue, 24 Dec 2024 14:10:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[2024 - 需]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb771b2e">2024</a></li>
<li><a href="#orga759d63">总结是在做什么？</a></li>
</ul>
</div>
</nav>
<p>
我给我今年的关键词是：需，是周易的一个卦象。卦辞：有孚，光亨，贞吉，利涉大川。尽管今年又新学了一些东西，但总体来说储蓄还远远不够。
</p>

<p>
我其实不习惯写总结，一直觉得没有太大必要，该做的都做了，没有做的也总结不出什么。但近几年有了新的看法。
</p>

<p>
2024 年 12 月 2 日，牛津大学出版社宣布“脑腐”（brain rot）为 2024 年<a href="https://corp.oup.com/news/brain-rot-named-oxford-word-of-the-year-2024/">牛津年度词汇</a>，各大知名机构都会在年底公布它们今年的数据总结，政府同样会有经济总结、工作总结报告，虽然这些对外的属性较多，它们需要权衡各方面的利弊，公布一个对外的说法，但多少会反应出一些当年的趋势。不同立场的分析主体会带有主观偏向，但数据是实打实的。怎么判断形势、趋势？我觉得从这些总结报告入手，是个很好的方法，可以顺着找到相关的数据自己分析。
</p>

<div id="outline-container-orgb771b2e" class="outline-2">
<h2 id="orgb771b2e">2024</h2>
<div class="outline-text-2" id="text-orgb771b2e">
<p>
自己的总结当然向内的属性就要偏重一些了。也一样从数据出发来分析。
</p>

<p>
这两年看的书还是太少，今年也没有达到一个月一本的目标，总共阅读了 7 本书：
</p>


<figure id="org3521b73">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/books.png" class="img" width="50%" height="50%">

</figure>

<p>
Blog 共 13 篇，里面我觉得还不错的有：<a href="https://www.vandee.art/2024-05-22-org-pkm-manual.html">PKM（个人知识管理）构建手册 - Emacs</a> 、 <a href="https://www.vandee.art/2024-05-05-the-value-of-art.html">也说说艺术的价值</a> 、<a href="https://www.vandee.art/2024-07-30-the-imitation-game-of-art.html">艺术的模仿游戏</a> 、<a href="https://www.vandee.art/2024-11-21-recording-is-resistance.html">记录本身就是一种反抗 - gitmemo</a> 、<a href="https://www.vandee.art/2024-03-15-the-weight-of-three-cabbages.html">三颗大包菜</a> 、<a href="https://www.vandee.art/2024-02-01-poor-sheep.html">羊好可怜</a>。
</p>

<p>
总体来说，今年对 Emacs 更加精进了，从 DoomEmacs 转为自己配置 Emacs，PKM 也更加完善，Emacs 记录原始的笔记作为 PKM 基本库，迭代到 <a href="https://x.vandee.art/wiki">Vandee — Wiki</a> 精炼成原子笔记，<a href="https://x.vandee.art/memo">GitMemo</a> 带上社交属性来记录 Memo 并作为朋友圈替代，<a href="https://x.vandee.art/clip">Clip</a> 剪藏有记录价值的文章，<a href="https://x.vandee.art/blog">Blog</a> 作为写作的输出。这几个部署的分板块都迭代自 Emacs 原始的数据。
</p>

<p>
得益于 cursor，构建了 <a href="https://github.com/VandeeFeng/gitmemos">GitMemo</a> 。又继续学习了 JavaScript、Rust、C、Python 等几种计算机语言。乐理基础也囫囵吞枣的又系统的看了一下，听了许多古典音乐，其中最喜欢的有 Vivaldi 的 The Four Seasons 四季。
</p>

<p>
今年主要在内核的修炼，我感觉我和自然的交融更加融洽了。这应该得益于《周易》和古典乐。摄影今年没有太多新的拍摄，原因就是要修炼内核，明年看看成效，希望能碰到好的题材。
</p>
</div>
</div>

<div id="outline-container-orga759d63" class="outline-2">
<h2 id="orga759d63">总结是在做什么？</h2>
<div class="outline-text-2" id="text-orga759d63">
<p>
我们有时会在一个阶段快要结束的时候产生一种时间过的很快的感觉，这其实是因为重复性的事物在日常生活中占据的比例比较大，所以我们会觉得每天做了许多，但又好像什么都没做，在大脑里就没有留下什么，于是在回顾的时候就会感觉，怎么时间一下就过去了？
</p>

<p>
以往我也会有这种类似的感觉，但这两年明显减少了。因为在每个月我都会自动有根据 Journal 生成的 AI 小结，每天我都有可以度量的具体事物，每个阶段都计划了任务。
</p>

<p>
总结可以放慢这些时间，用文字和记录来度量这些过去的时光。
</p>

<p>
更重要的是，每年把自己向内的总结和外界的总结一对比，就可以知道自己和外界的缝隙在哪里，在下一年做出针对性的调整。
</p>

<p>
根据香农的信息论，社会可以被描述为一个复杂的通信系统，其中信息是基本构建块。社会成员通过各种渠道（如言语、文字、表情等）交换和传递信息，以实现合作与协调，其中个人和社会机构扮演编码器、解码器及信道的角色。
</p>

<p>
通过总结的过滤和优化，个体能够更高效地压缩信息，减少误解，提高交流质量。在《智人之上》里更是强调了信息+想象可以发挥多大的作用。这几年我的许多出发点也都来自对信息的处理，明年也会继续。
</p>

<p>
以后每年就用周易的卦象名来总结，挺有意思的。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2024-12-12-the-summary-of-2024.html</link>
  <guid>https://www.vandee.art/blog/2024-12-12-the-summary-of-2024.html</guid>
  <pubDate>Thu, 12 Dec 2024 13:34:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[AI 交互的隐性成本]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4a1c539">AI 交互的隐性成本</a>
<ul>
<li><a href="#org53b3555">Prompt 成本</a></li>
<li><a href="#org54caf38">试错成本</a></li>
<li><a href="#org2d8f57c">构建成本</a></li>
<li><a href="#org5af068f">依赖成本</a></li>
</ul>
</li>
<li><a href="#org70fcdf7">技术革命</a></li>
</ul>
</div>
</nav>
<p>
从 ChatGPT 出现到现在已经两年了，也是从 ChatGPT 开始，让我们很自然的把和 AI 的交互形式放在了 Chat 这种形式上。这也是我对 AI 产品的第一印象，从和大语言模型 LLM 的打字、语言交流开始，我们和 AI 有了第一次近距离的接触。当我们一次次惊叹于 ChatGPT、Claude 等 AI 产品发布的新特性时，随着把使用 AI 已经当作了一种习惯之后，一个重要的问题逐渐被忽略了：AI 的使用成本。AI 真的直接提升了我们的效率，节约了成本么？
</p>

<p>
如果把 AI 使用成本分成显性和隐性，对用户而言显性成本的包括：API 的充值，pro 会员的充值等等这些实际的消费。而隐性的成本很少有人提及，它们包括但不限于：学习使用的成本，依赖的成本，还有今天想说说的交互的成本。
</p>

<p>
<a href="https://www.lesswrong.com/posts/tqmQTezvXGFmfSe7f/how-much-are-llms-actually-boosting-real-world-programmer">How Much Are LLMs Actually Boosting Real-World Programmer Productivity? — LessWrong</a> 这篇文章也提及到了这个问题
</p>

<div id="outline-container-org4a1c539" class="outline-2">
<h2 id="org4a1c539">AI 交互的隐性成本</h2>
<div class="outline-text-2" id="text-org4a1c539">
</div>
<div id="outline-container-org53b3555" class="outline-3">
<h3 id="org53b3555">Prompt 成本</h3>
<div class="outline-text-3" id="text-org53b3555">
<p>
与 AI 的交互远远不只是聊天 Chat 这种形式。这只是 ChatGPT 将大语言模型 LLM 代入大众视野当中一个成功的产品。我们都知道现在 LLM 可以理解人类的自然语言，通过预测以聊天的方式进行交互，这直接打破了编程语言和自然语言之间的壁垒，我们可以直接使用自然语言来和计算机沟通了。而这之间被忽略的是：我们和 LLM 的交互同样是有成本的，这个成本就是 prompt，提示词。
</p>

<p>
要想让 LLM 更精准的理解和处理我们的需求，就必须了解 prompt。简单来说，合适的 prompt 触发了 LLM 的关键字，它才能更精准的预测分析输出结果，而和 LLM 交互最合适的自然语言是英语。这也就是为什么，同样的意思，换一句话可能 LLM 生成的结果就会更好。对于不是英语母语的使用者来说，这就是双重成本。
</p>

<p>
而且不同的 LLM 对于 prompt 语法的支持程度也不一样。Claude 对 XML 格式支持的比较好，而 GPT 对 JSON 格式支持的比较好，llama 则更适合用 markdown 语法来写。
</p>
</div>
</div>

<div id="outline-container-org54caf38" class="outline-3">
<h3 id="org54caf38">试错成本</h3>
<div class="outline-text-3" id="text-org54caf38">
<p>
prompt 又直接影响沟通交互的成本。
</p>

<p>
人和人之间沟通的成本我们很好理解，AI 的交互也是一样。如果 prompt 不合适，你会发现 LLM 很笨。在一次次让它理解我们提问的过程当中，无形的会消耗掉很多时间和精力。对于 LLM 来说，简单和困难的事情往往和人类相反。我们需要把对于自己复杂的问题转换为对 AI 简单的问题，才能真正有效的解决我们的问题。
</p>

<p>
比如我想要查询王小波的生平信息。如果只是说“给我介绍一下王小波”，就过于宽泛。换成 “请告诉我关于王小波的主要作品和生活年代的相关信息。” 效果就会好很多。
</p>

<p>
往往一个问题，我们需要和 AI 迭代至少 2 到 3 次，才能得到想要的结果。许多问题相反传统的解决方法会更直接有效。
</p>

<p>
这次重构 GitMemo 的时候，用 cursor 来 debug，每一次就是 10 分钟，加上部署到 Vercel，一个小问题经常要花费半小时，而请一个程序员来看看，可能只是 5 分钟的事。
</p>
</div>
</div>
<div id="outline-container-org2d8f57c" class="outline-3">
<h3 id="org2d8f57c">构建成本</h3>
<div class="outline-text-3" id="text-org2d8f57c">
<p>
因此我们自然会往下想到通过多个 AI 协作来提高成功率。
</p>

<p>
想提高 AI 解决问题的成功率，最直接的方法就是 Workflow 和 Agent 了。这也就是 Dify、Coze 瞄准的切入点。学习使用这些工具、中间件又是一个成本，各个平台的会员也是。
</p>

<p>
更进一步如果想从源头训练一个 LLM，最起码需要看得懂 Python，有一个 IDE，一个像样的显卡和电脑。再就是一个科学上网的工具。
</p>
</div>
</div>

<div id="outline-container-org5af068f" class="outline-3">
<h3 id="org5af068f">依赖成本</h3>
<div class="outline-text-3" id="text-org5af068f">
<p>
当你完成了上面的学习，付出了高昂的成本之后，恭喜你，你大概率已经成功依赖上 AI 了。
</p>

<p>
你会进入一个恶性循环，在达到一定 AI 熟练度之前，上面提到的几点不完全的隐性成本，会随着对 AI 的使用而增加，导致解决问题本身的效率降低。依赖上之后，传统的技能熟练度下降，效率又更低了。如果不能越过这个阈值，那么 AI 的使用反而会带来副作用。
</p>

<p>
和其他技术一样 AI 一定会让人更懒，但我们同样可以借助它让自己变得更聪明，而不是依赖上它从变懒到变笨。
</p>
</div>
</div>
</div>

<div id="outline-container-org70fcdf7" class="outline-2">
<h2 id="org70fcdf7">技术革命</h2>
<div class="outline-text-2" id="text-org70fcdf7">
<p>
利用蒸汽驱动机器，这使得工厂可以建在远离河流的地方，极大地提高了生产效率，并开启了工业革命。后来电力的应用再一次彻底改变了生产和生活方式。再到互联网、智能手机，直到现在可能已经到来的 AI 革命。
</p>

<p>
每一次技术的革新，科学的发展，都会提高生产力，提升效率，但这不等于是对个人的，相反技术的革命会增加个人的成本，个人要适应这些变化，还有更多<a href="https://wiki.vandee.art/#%E6%8A%80%E6%9C%AF%E8%BF%9B%E6%AD%A5%E7%9A%84%E4%BB%A3%E4%BB%B7">技术进步的代价</a>。
</p>

<p>
让 AI 帮助自己思考才是本质，最大的投资永远应该是自己。
</p>

<p>
这也是为什么，近大半年我一直在折腾我的各种 PKM。用 AI 来优化信息获取、信息整理，帮助自己思考，我认为是一劳永逸的。学 AI 就是学一个新的语言，一个和代码、二进制沟通的语言，而这个语言迟早会和当初英文一样，编入义务教育的课本。
</p>

<p>
就单纯想想以后不想被那些和我曾经一样嚣张跋扈的年轻人鄙视，就很有动力了🤣。
</p>

<p>
想到什么后面再更新。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2024-12-08-The-Hidden-Costs-of-AI-Interaction.html</link>
  <guid>https://www.vandee.art/blog/2024-12-08-The-Hidden-Costs-of-AI-Interaction.html</guid>
  <pubDate>Sun, 08 Dec 2024 16:18:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[记录本身就是一种反抗 - gitmemo]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org19d2a45">Gitmemo</a></li>
<li><a href="#org7ace458">记录与反抗</a></li>
</ul>
</div>
</nav>
<p>
<a href="https://www.vandee.art/2024-10-28-memos-and-ssl-config.html">还是入坑了 Memos</a> ,大概一个月之前在 VPS 上部署了 memos，挺好玩的。也是因为这几天服务器的 IP 突然被 GFW blocked 了，memos 的数据备份到不是很麻烦，长期来看，我大中华的网络太不稳定了。
</p>

<p>
很久之前就看到这个利用 GitHub issues 构建博客的项目：<a href="https://github.com/yihong0618/gitblog/issues/177">gitblog</a> ,作者 yihong0618 和我的许多想法都很相似。
</p>

<p>
思来想去还是决定把 memos 迁移到 GitHub 上记录。
</p>

<p>
<a href="https://laike9m.com/blog/people-die-but-long-live-github,122/">People Die, but Long Live GitHub</a> 这篇文章里写到：
</p>

<blockquote>
<p>
GitHub 已经成为互联网最重要的基础设施之一，有太多人，太多事都直接或间接地依赖于 GitHub，除非人类在未来完全不需要开源代码(这显然不可能)，否则我想不出 GitHub 有关闭的可能。对 GitHub 来说，存在 100 年简直是小意思，500 年也不是不可能。这是我的预言，不一定准确，但我还挺有信心的。
</p>

<p>
人总想留下某种痕迹，证明自己活过，然而事实上，99.999%  的普通人就这么被历史遗忘了——曾经是这样。我们处在信息时代的早期，同样也处在人类文明的早期。从今往后，被数字化的东西只会越来越多。既然有人意识到了 GitHub 的独特性，随着时间推移，越来越多的人总会意识到。那时候会发生什么？自然是，越来越多的人会把自己的信息搬到 GitHub 上，依托 GitHub  实现曾经人们可望而不可及的"永生"。人有两次死亡，第一次是肉体，第二次是被人忘记。我忘记这句话是谁说的了，但现在我们已经可以回避第二次。只要  GitHub 支持，就一定会有人这么做，至少我是其中之一。几十几百年后，GitHub  将成为世界上最大的数字公墓，注册用户大部分都已去世，然而个人主页，项目，commit 历史 还述说着他们生前做过的事——就比如 Joe 的博客。这虽然是个比较 creepy 的推论，但从另一个角度想，却证明了人类的巨大进步：对抗死亡是人类文明的永恒主题，而我们已经实现了阶段性胜利。
</p>
</blockquote>

<div id="outline-container-org19d2a45" class="outline-2">
<h2 id="org19d2a45">Gitmemo</h2>
<div class="outline-text-2" id="text-org19d2a45">
<p>
简单记录一下过程。
</p>

<p>
<code>git clone git@github.com:yihong0618/gitblog.git</code> ,修改 <code>config.toml</code> 里的 GitHub Pages 的 url，因为这个项目通过 GitHub Pages 部署 Zola 的页面。
</p>

<p>
生成一个新的 GitHub secret，开启 issue 的读写权限，一定不要忘了在仓库的 settings 里打开 Actions 读写的权限。因为我就忘了。
</p>

<p>
在 Python 脚本里就可以自定义生成 README 的格式了。Zola 本身也提供了很多主题，在 <code>config.toml</code> 里配置就 ok。由于这个项目使用的还是 master 分支，GitHub 现在的默认分支是 main，因此涉及到的部分需要修改成 main。
</p>

<p>
GitHub issue 提供 tag 的功能，自带 markdown 编辑器和预览，也可以上传图片、文件、视频。对于记录来说功能足够了，检索也很方便。
</p>

<p>
这是新的 memo 地址：<a href="https://x.vandee.art/memo">https://x.vandee.art/memo</a>
</p>

<p>
我的 GitHub 仓库地址：<a href="https://github.com/VandeeFeng/gitmemo">https://github.com/VandeeFeng/gitmemo</a>
</p>
</div>
</div>

<div id="outline-container-org7ace458" class="outline-2">
<h2 id="org7ace458">记录与反抗</h2>
<div class="outline-text-2" id="text-org7ace458">
<p>
<a href="https://wiki.vandee.art/#%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%EF%BC%8C%E8%80%8C%E8%AE%B0%E5%BD%95%E6%9C%AC%E8%BA%AB%E5%B7%B2%E7%BB%8F%E6%98%AF%E4%B8%80%E7%A7%8D%E5%8F%8D%E6%8A%97">没有记录就没有发生，而记录本身已经是一种反抗</a> ，都说历史是属于胜利者的，但那些被历史掩埋的气味和色彩永远都会存在。
</p>

<p>
看似平稳的秩序背后是无数抗争的呐喊与血泪，有自由就一定伴随着反抗。这些沉重的底色就好像在暗房里冲印的底片，色彩的背后是那些灰白的褪色了的故事。
</p>

<p>
看似稳定有序的秩序从来就是无序的，如果说反抗是为了秩序，这从开始就是一个伪命题。反抗这个词带有着默认被压迫的属性，而压迫和不平等是必然的，反抗作为它们的对立面其实是同等级的存在，并不需要添油加醋的加上那么多英雄色彩。太多所谓的反抗其实只是实现的落差带来的利己表演，只是一些出于本能的情绪和反应，这些在我的标准里不能称作是反抗，更准确的说来，应该是生物本能的自我保护。大多数人和事连反抗的对象都没有对上号，又谈何反抗？反抗的是这些不公，还是那些完全不符合人情道义的事物，还是和自己标准不相符带来的愤慨和不理解。所以我们一直在说的反抗，到底是在反抗什么？
</p>

<p>
我更愿意用正面的感情来描述反抗这个通过和压迫对立来表现的词语：“希望”，我欣赏的历史上的反抗大多是“希望”。正是因为希望那些永远不可能达到的事物，希望着自由和平等，我们才会一直努力的追求，奋斗，抗争，坚持，传承。
</p>

<p>
我记录这些并不是为了反抗什么，虽然带着同样的目的，但手段可以就是手段，它不象征任何。扫地僧扫地其实并不是为了什么，它只是在扫地，它的手段和目的已经融为一体互相转化了，但又不通过任何目的来驱使这个手段。
</p>

<p>
现在我自然还没有达到这种境界，就只是凭着直觉记录着，不反抗什么，只是保持希望，保持热爱，像大地一样承载和接受。大地愤怒么？它从来都很平静，但平静得让人类不敢轻易践踏自然的法则，这是比“反抗”更坚实、更伟大的力量，因为它会滋生希望而不是畏惧、愤怒和伤害。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2024-11-21-recording-is-resistance.html</link>
  <guid>https://www.vandee.art/blog/2024-11-21-recording-is-resistance.html</guid>
  <pubDate>Thu, 21 Nov 2024 19:04:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[数据库的搭建 - 流动知识检索]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9a622ac">同步保存到 Readwise</a>
<ul>
<li><a href="#org14a29b3">python</a></li>
<li><a href="#org3e42627">workflow</a></li>
</ul>
</li>
<li><a href="#org6c02b39">Teable</a>
<ul>
<li><a href="#orgff0a3bc">Python</a></li>
<li><a href="#org1b5ae5b">workflow</a></li>
<li><a href="#org4a05140">bash</a></li>
</ul>
</li>
<li><a href="#orgaf935f5">PocketBase</a>
<ul>
<li><a href="#org9e38515">docker 部署到 VPS</a></li>
<li><a href="#org630d89e">Python</a></li>
<li><a href="#orgd16eb3e">workflow</a></li>
</ul>
</li>
<li><a href="#org180f036">Readwise highlights</a>
<ul>
<li><a href="#orgbcf4327">python</a></li>
<li><a href="#org0e4f96d">workflow</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
Readwise 是我体验的最舒服的 after-reading 软件了，之前一直没有利用好它的 API，在 PKM 体系里，也一直没有统一到工作流。而这些流动知识的数据越来越多，以 10 年 20 年来度量，必须用数据库来完善和管理了，也是碰巧看到了这个项目：<a href="https://github.com/pocketbase/pocketbase">pocketbase/pocketbase: Open Source realtime backend in 1 file</a> ,很简洁的管理 UI，支持 S3 数据备份，支持 API 导入和导出。还有一个更轻量的选择 <a href="https://github.com/teableio/teable">teableio/teable: ✨ The Next Gen Airtable Alternative: No-Code Postgres</a> ，用了半年了，之前一直没好好看它们的 API，只是不能直接用数据库的 API 导入数据，但是是可以直接用 API 添加 Record 到表格的。
</p>

<p>
pocketbase 这个项目的优势是更适合长文内容的保存，内置编辑器，但是不支持直接导入表格或 csv 文件，但可以导入 JSON 和 S3 自动备份。
</p>

<p>
teable 则更偏向于可视化表格，不太适合长文内容的保存。由于我的长文都用 clip 保存了，clip 面向阅读体验，而teable 用来快速的查询，面向数据。现在只保存了三个 field：title，url，和一句话内容总结，方便我时间长了之后回忆和查找相关文章。
</p>

<p>
在 Claude 的协助下，有了现在的方案。
</p>

<p>
主要思路：利用 GitHub 为中转站， <code>osmos::memos</code> 插件保存文章，同步保存到 Readwise 进行阅读和高亮，再同步保存到 pocketbase 或 teable 做数据库处理。现在暂时选择了 teable 的方案。
</p>

<div id="outline-container-org9a622ac" class="outline-2">
<h2 id="org9a622ac">同步保存到 Readwise</h2>
<div class="outline-text-2" id="text-org9a622ac">
<p>
现在使用 <code>osmos::memos</code> 插件保存的时候，会默认也保存到 readwise。添加 <code>#2clip</code> 标签触发 clip 的 workflow。详见： <a href="https://www.vandee.art/2024-10-12-bookmark-and-summary-by-github-actions.html">用 GitHub 仓库做书签和 AI 摘要 - 流动知识检索</a>
</p>

<p>
这样就统一起来了。所有的链接都保存在 bookmark-collection 仓库作为中转站，然后统一在 Readwise 里阅读，导出 highlights。有保存价值的会触发 clip workflow 保存原文。
</p>

<p>
主要思路：在 push 的时候会运行这个 Python 脚本，读取新增内容，获取 URL 并使用 Readwise Reader 的 API 保存到 Readwise Reader。Readwise 和 Readwise Reader 是两个 API。
</p>

<p>
需要在仓库的 secret 里增加一个 <code>READWISE_TOKEN</code> secert，填入自己的 Readwise API。
</p>
</div>
<div id="outline-container-org14a29b3" class="outline-3">
<h3 id="org14a29b3">python</h3>
<div class="outline-text-3" id="text-org14a29b3">
<div class="org-src-container">
<pre class="src src-python">import os
import re
import logging
import requests
from github import Github
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
def get_added_content():
    """获取这次提交新增的内容"""
    try:
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
        commit_sha = os.environ.get('GITHUB_SHA')
        commit = repo.get_commit(commit_sha)
        for file in commit.files:
            if file.filename.endswith('.md'):
                if file.patch and '+' in file.patch:
                    added_lines = [line[1:] for line in file.patch.split('\n')
                                 if line.startswith('+') and not line.startswith('+++')]
                    return added_lines
        return []
    except Exception as e:
        logging.error(f"Error getting commit content: {str(e)}")
        raise
def extract_url(line: str):
    """从行中提取URL，支持markdown格式的链接"""
    # 更新后的URL提取模式
    url_pattern = r'\((https?://[\w\-._~:/?#\[\]@!$&\'()*+,;=.%]+)\)'
    match = re.search(url_pattern, line)
    if match:
        return match.group(1)
    return None
def has_clip_tag(line: str) -> bool:
    """检查是否包含 #2clip 标签"""
    return bool(re.search(r'#2clip\b', line))
def trigger_workflow():
    """触发另一个workflow"""
    try:
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
        workflow = repo.get_workflow("bookmark_summary.yml")
        workflow.create_dispatch("main")
        logging.info("Successfully triggered the bookmark_summary workflow")
    except Exception as e:
        logging.error(f"Failed to trigger workflow: {str(e)}")
        raise
def main():
    try:
        # 获取所有新增的内容
        added_lines = get_added_content()
        if not added_lines:
            logging.info("No new markdown content found in this commit")
            return
        trigger_needed = False
        # 处理每一行新增的内容
        for line in added_lines:
            line = line.strip()
            logging.info(f"Processing line: {line}")
            # 检查标签
            if has_clip_tag(line):
                trigger_needed = True
                logging.info("Found #2clip tag")
            # 提取并处理URL（无论是否有标签）
            url = extract_url(line)
            if url:
                try:
                    response = requests.post(
                        url="https://readwise.io/api/v3/save/",
                        headers={"Authorization": f"Token {os.environ['READWISE_TOKEN']}"},
                        json={
                            "url": url,
                            "tags": ["Bookmark"]
                        }
                    )
                    response.raise_for_status()
                    logging.info(f"Successfully saved URL: {url}")
                except requests.exceptions.RequestException as e:
                    logging.error(f"Failed to save URL {url}: {str(e)}")
        # 如果发现了标签，触发workflow
        if trigger_needed:
            logging.info("Triggering workflow due to #2clip tag")
            trigger_workflow()
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        raise
if __name__ == "__main__":
    main()</pre>
</div>
</div>
</div>

<div id="outline-container-org3e42627" class="outline-3">
<h3 id="org3e42627">workflow</h3>
<div class="outline-text-3" id="text-org3e42627">
<div class="org-src-container">
<pre class="src src-yaml">
name: Save Bookmark to Readwise
on:
  push:
    branches:
      - main
    paths:
      - '**.md'
  workflow_dispatch:
permissions:
  contents: read
  actions: write
jobs:
  save-to-readwise:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub
    - name: Run bookmark saver
      env:
        READWISE_TOKEN: ${{ secrets.READWISE_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: python save_to_readwise.py</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6c02b39" class="outline-2">
<h2 id="org6c02b39">Teable</h2>
<div class="outline-text-2" id="text-org6c02b39">
<p>
在 bookmark-collection 仓库增加两个 secret： <code>TEABLE_TABLE_ID</code> ， <code>TEABLE_TOKEN</code> 。
</p>

<p>
<code>TEABLE_TABLE_ID</code> 就是要写入表格的 ID，在地址栏的 <code>&amp;tableId=</code> 后面就是 ID 了。 <code>TEABLE_TOKEN</code> 就是 API 。
</p>
</div>
<div id="outline-container-orgff0a3bc" class="outline-3">
<h3 id="orgff0a3bc">Python</h3>
<div class="outline-text-3" id="text-orgff0a3bc">
<p>
在 bookmark-summary 里修改 py 脚本：
</p>

<div class="org-src-container">
<pre class="src src-python">
import re
from typing import List, Optional
import requests
import json
from datetime import datetime
from pathlib import Path
from dataclasses import dataclass, asdict
import os
import logging
import time
from functools import wraps
from urllib.parse import quote
import http.client
# -- configurations begin --
BOOKMARK_COLLECTION_REPO_NAME: str = "bookmark-collection"
BOOKMARK_SUMMARY_REPO_NAME: str = "bookmark-summary"
TEABLE_TABLE_ID: str = os.environ.get('TEABLE_TABLE_ID')
TEABLE_TOKEN: str = os.environ.get('TEABLE_TOKEN')
# -- configurations end --
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
def log_execution_time(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logging.info(f'Entering {func.__name__}')
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        elapsed_time = end_time - start_time
        logging.info(f'Exiting {func.__name__} - Elapsed time: {elapsed_time:.4f} seconds')
        return result
    return wrapper
@dataclass
class SummarizedBookmark:
    year: str
    month: str  # yyyyMM
    title: str
    url: str
    timestamp: int  # unix timestamp
    summary: str
CURRENT_YEAR: str = datetime.now().strftime('%Y')
CURRENT_MONTH: str = datetime.now().strftime('%m')
CURRENT_DATE: str = datetime.now().strftime('%Y-%m-%d')
CURRENT_DATE_AND_TIME: str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
@log_execution_time
def get_text_content(url: str) -> str:
    jina_url: str = f"https://r.jina.ai/{url}"
    response: requests.Response = requests.get(jina_url)
    return response.text
@log_execution_time
def call_openai_api(prompt: str, content: str) -> str:
    model: str = os.environ.get('OPENAI_API_MODEL', 'gpt-4o-mini')
    headers: dict = {
        "Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}",
        "Content-Type": "application/json"
    }
    data: dict = {
        "model": model,
        "messages": [
            {"role": "system", "content": prompt},
            {"role": "user", "content": content}
        ]
    }
    api_endpoint: str = os.environ.get('OPENAI_API_ENDPOINT', 'https://api.openai.com/v1/chat/completions')
    response: requests.Response = requests.post(api_endpoint, headers=headers, data=json.dumps(data))
    return response.json()['choices'][0]['message']['content']
'''
def clean_prompt(prompt: str) -> str:
    """清理和验证prompt格式"""
    # 移除多余的空白字符
    prompt = prompt.strip()
    # 确保XML声明在第一行
    if not prompt.startswith('<?xml'):
        prompt = '<?xml version="1.0" encoding="UTF-8"?>\n' + prompt
    # 验证XML格式
    try:
        from xml.etree import ElementTree
        ElementTree.fromstring(prompt)
    except ElementTree.ParseError as e:
        logging.warning(f"Prompt XML format warning: {e}")
    return prompt
'''
@log_execution_time
def summarize_text(text: str) -> str:
    prompt: str = """
{#- 用简体中文中文進行文章摘要 -#}
## Profile:​
- author: Vandee​
- role: 文章内容深度总结思考助手
- language: 中文​
- description: 全面的总结文章的主要观点，并结合严谨的逻辑思维分析文章要点，剖析文章内容。
## Goals:
- 第一步，仔细阅读文章内容。
- 第二步,对每个段落进行总结,总结文章的主要内容，理清楚作者表达了什么观点、作者解决了那些具体的问题。
- 第三步,文章要点总结。根据原文内容,提炼出文章的5个以内的主要观点或作者解决的问题。
- 第四步,根据上面三步，按照指定的输出格式,整理出文章内容的总结。
## Constrains:​
- 文章内容总结的{摘要}字数控制在380个中文汉字以内。
- 尽可能还原文章中的专业词汇,并对其进行通俗解释。
- 在总结的过程中,完全按照文章作者的表达内容进行整理,不添加你的额外观点。
- 所有输出用中文生成。
- 文章内容里的"我“是文章的原作者，不要代入 Vandee 的身份。
## Skills:​
- 善于用流畅通顺的简体中文总结内容重点。
- 具有良好的逻辑思维能力,能够深入分析文章内容。
- 掌握文章相关领域的专业知识,能够准确理解和阐述专业概念。
- 擅长以通俗易懂的方式解释复杂的专业内容。
## Workflows:​
- 逐段阅读文章内容。
- 总结文章的内容并生成{摘要}。这一步你需要全面理解文章内容的主题、内容的逻辑框架、作者的提出的观点，摘要不少于270个中文汉字。
- 再次回顾原文所有内容，在上一步总结出{摘要}的基础上，进行深入分析。这一步你需要理清这些内容之间的逻辑关系、专业概念、名词概念，并着重关注原文内容里多次出现的词汇或概念，特别关注作者提出了什么观点、作者解决了那些具体的问题、作者体悟出了哪些道理、作者得出了什么重大的研究结论，最后梳理出{精炼内容}。
- 根据原文内容和你上一步的{精炼内容}，提炼出文章的至少4个要点生成{要点总结}，你不用输出{精炼内容}。
- 你需要按照markdown有序列表的格式列出上一步{要点总结}中的要点，并根据要点所在的原文并严格根据文章内容扩展对该要点的解析，方便读者理解这些要点的意思。
- 按照指定的输出格式,整理出文章内容的总结。“摘要“和”要点总结“只需要按照markdown格式加粗，不要用标题格式。
## OutputFormat:
**摘要**：
{摘要}
**要点总结**：
{要点总结}
"""
    result = call_openai_api(prompt, text)  # 先调用 API 并存储结果
    time.sleep(1)  # 等待 1 秒
    return result  # 返回结果
@log_execution_time
def one_sentence_summary(text: str) -> str:
    prompt: str = "以下是对一篇长文的列表形式总结。请基于此输出对该文章的简短总结，长度不超过100个字。总是使用简体中文输出。"
    return call_openai_api(prompt, text)
def slugify(text: str) -> str:
    invalid_fs_chars: str = '/\\:*?"<>|'
    return re.sub(r'[' + re.escape(invalid_fs_chars) + r'\s]+', '-', text.lower()).strip('-')
def get_summary_file_path(title: str, timestamp: int, year: Optional[str] = None, month: Optional[str] = None, in_readme_md: bool = False) -> Path:
    date_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d')
    summary_filename: str = f"{date_str}-{slugify(title)}.md"
    if year is None:
        year = CURRENT_YEAR
    if month is None:
        month = CURRENT_MONTH
    if in_readme_md:
        root: Path = Path(year, month)  # 更新路径为 year/month
    else:
        root: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, year, month)  # 更新路径为 year/month
    return Path(root, summary_filename)
def get_text_content_path(title: str, in_summary_md: bool = False) -> Path:
    text_content_filename: str = f"{CURRENT_DATE}-{slugify(title)}_raw.md"
    root: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, CURRENT_YEAR, CURRENT_MONTH)  # 更新路径为 YEAR/MONTH
    if in_summary_md:
        root = Path(".")
    return Path(root, text_content_filename)
def build_summary_file(title: str, url: str, summary: str, one_sentence: str) -> str:
    """构建总结文件的内容。"""
    return f"""# {title}
- URL: {url}
- Added At: {CURRENT_DATE_AND_TIME}
- [Link To Text]({get_text_content_path(title, in_summary_md=True)})
## Summary
{summary}
"""
def build_index_md(title: str, url: str, summary: str, one_sentence: str, text_content: str) -> str:
    """构建 index.md 文件内容，添加 YAML 头部并包含全文内容。"""
    # 处理标题中的冒号
    yaml_safe_title = title.replace(':', '-')
    return f"""---
title: {yaml_safe_title}
date: {CURRENT_DATE}
extra:
  source: {url}
  original_title: {title}
---
## Summary
{summary}
## Full Content
{text_content}
"""
def build_summary_readme_md(summarized_bookmarks: List[SummarizedBookmark]) -> str:
    initial_prefix: str = """# Clip
总会有一些没达到我想收录到PKM体系里标准的文章，但又弃之可惜。介于这两者之间的，就放在这个clip里了。区别于笔记，这里主要是原文的 Markdown。
Inspired by :[Owen's Clip](https://github.com/theowenyoung/clip) , [LLM x 书签收藏：摘要 & 全文索引 - Nekonull's Garden](https://nekonull.me/posts/llm_x_bookmark/)
## Summarized Bookmarks
"""
    summary_list: str = ""
    sorted_summarized_bookmarks = sorted(summarized_bookmarks, key=lambda bookmark: bookmark.timestamp, reverse=True)
    for bookmark in sorted_summarized_bookmarks:
        summary_file_path = get_summary_file_path(
            title=bookmark.title,
            timestamp=bookmark.timestamp,
            month=bookmark.month,
            in_readme_md=True
        )
        summary_list += f"- ({datetime.fromtimestamp(bookmark.timestamp).strftime('%Y-%m-%d')}) [{bookmark.title}]({summary_file_path})\n"
    return initial_prefix + summary_list
@log_execution_time
def post_to_teable(title: str, url: str, one_sentence: str) -> None:
    """
    Post a bookmark record to Teable
    """
    try:
        conn = http.client.HTTPSConnection("app.teable.io")
        payload = {
            "typecast": True,
            "records": [{
                "fields": {
                    "Title": title,
                    "Source": url,
                    "Summary": one_sentence,
                }
            }]
        }
        headers = {
            'Authorization': f"Bearer {TEABLE_TOKEN}",
            'Content-Type': "application/json"
        }
        conn.request(
            "POST",
            f"/api/table/{TEABLE_TABLE_ID}/record",
            json.dumps(payload),
            headers
        )
        response = conn.getresponse()
        if response.status not in (200, 201):
            logging.error(f"Failed to post to Teable. Status: {response.status}, Response: {response.read().decode()}")
        else:
            logging.info("Successfully posted to Teable")
    except Exception as e:
        logging.error(f"Error posting to Teable: {str(e)}")
    finally:
        conn.close()
@log_execution_time
def process_bookmark_file():
    # 读取书签和已总结书签
    with open(f'{BOOKMARK_COLLECTION_REPO_NAME}/README.md', 'r', encoding='utf-8') as f:
        bookmark_lines = f.readlines()
    with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/data.json', 'r', encoding='utf-8') as f:
        summarized_bookmark_dicts = json.load(f)
        summarized_bookmarks = [SummarizedBookmark(**bookmark) for bookmark in summarized_bookmark_dicts]
    summarized_urls = {bookmark.url for bookmark in summarized_bookmarks}
    # 找到未总结的书签
    title, url = None, None
    for line in bookmark_lines:
        match = re.search(r'- \[(.*?)\]\((.*?)\)', line)
        if match and match.group(2) not in summarized_urls:
            title, url = match.groups()
            break
    # 如果没有找到新的书签，则退出
    if not title or not url:
        logging.info("No new bookmarks to summarize.")
        return
    # 将标题格式化为文件名
    title_slug = slugify(title)
    # 创建 YEAR/MONTH/ 目录
    monthly_path = Path(f'{BOOKMARK_SUMMARY_REPO_NAME}/{CURRENT_YEAR}/{CURRENT_MONTH}')
    monthly_path.mkdir(parents=True, exist_ok=True)
    # 创建 content/YEAR/MONTH/TITLE/ 目录
    content_path = Path(f'{BOOKMARK_SUMMARY_REPO_NAME}/content/{CURRENT_YEAR}/{CURRENT_MONTH}/{title_slug}')
    content_path.mkdir(parents=True, exist_ok=True)
    # 获取和总结内容
    text_content = get_text_content(url)
    summary = summarize_text(text_content)
    one_sentence = one_sentence_summary(summary)
    timestamp = int(datetime.now().timestamp())
    # 使用当前日期创建前缀
    date_prefix = datetime.now().strftime('%Y-%m-%d-')
    # 保存原始内容到 YEAR/MONTH/yyyy-MM-dd-title_raw.md
    with open(monthly_path / f"{date_prefix}{title_slug}_raw.md", 'w', encoding='utf-8') as f:
        f.write(text_content)
    # 保存总结内容到 YEAR/MONTH/yyyy-MM-dd-title.md
    summary_content = build_summary_file(title, url, summary, one_sentence)
    with open(monthly_path / f"{date_prefix}{title_slug}.md", 'w', encoding='utf-8') as f:
        f.write(summary_content)
    # 保存 index.md 到 content/YEAR/MONTH/TITLE/index.md
    index_content = build_index_md(title, url, summary, one_sentence, text_content)
    with open(content_path / "index.md", 'w', encoding='utf-8') as f:
        f.write(index_content)
    # 更新已总结的书签数据
    summarized_bookmarks.append(SummarizedBookmark(
        title=title,
        url=url,
        summary=one_sentence,
        year=CURRENT_YEAR,
        month=CURRENT_MONTH,
        timestamp=timestamp
    ))
    # 更新 README 和 data.json
    with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/Bookmarks_List.md', 'w', encoding='utf-8') as f:
        f.write(build_summary_readme_md(summarized_bookmarks))
    with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/data.json', 'w', encoding='utf-8') as f:
        json.dump([asdict(bookmark) for bookmark in summarized_bookmarks], f, indent=2, ensure_ascii=False)
        # Post to Teable
    if TEABLE_TOKEN and TEABLE_TABLE_ID:
        post_to_teable(title, url, one_sentence)
    else:
        logging.warning("Teable API token or table ID not set, skipping Teable update")
def main():
    process_bookmark_file()
if __name__ == "__main__":
    main()</pre>
</div>
</div>
</div>

<div id="outline-container-org1b5ae5b" class="outline-3">
<h3 id="org1b5ae5b">workflow</h3>
<div class="outline-text-3" id="text-org1b5ae5b">
<p>
修改 bookmark-collection 仓库的 yaml：
</p>

<div class="org-src-container">
<pre class="src src-yaml">
name: Bookmark Summary
on:
  workflow_dispatch:  # 只保留手动触发和被其他 workflow 触发的情况
concurrency:
  group: mygroup
  cancel-in-progress: false
jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout bookmark-collection
        uses: actions/checkout@v2
        with:
          path: bookmark-collection
      - name: Checkout bookmark-summary
        uses: actions/checkout@v2
        with:
          repository: VandeeFeng/bookmark-summary
          path: bookmark-summary
          token: ${{ secrets.PAT }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies with retry
        uses: nick-fields/retry@v3  # 使用 retry 包装安装依赖步骤
        with:
          timeout_minutes: 2  # 每次尝试的超时时间（2分钟）
          max_attempts: 3  # 最大重试次数
          command: |
            python -m pip install --upgrade pip
            pip install requests waybackpy
      - name: Process changes with retry
        uses: nick-fields/retry@v3  # 包装变更处理步骤
        with:
          timeout_minutes: 2  # 每次尝试的超时时间（5分钟）
          max_attempts: 3  # 最大重试次数
          command: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            OPENAI_API_MODEL=${{ secrets.OPENAI_API_MODEL }} \
            OPENAI_API_ENDPOINT=${{ secrets.OPENAI_API_ENDPOINT }} \
            TEABLE_TABLE_ID=${{ secrets.TEABLE_TABLE_ID }} \
            TEABLE_TOKEN=${{ secrets.TEABLE_TOKEN }} \
            python bookmark-summary/process_changes.py
      - name: Commit changes to bookmark-summary
        run: |
          cd bookmark-summary
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add new summaries" || echo "No changes to commit"
          git push</pre>
</div>
</div>
</div>
<div id="outline-container-org4a05140" class="outline-3">
<h3 id="org4a05140">bash</h3>
<div class="outline-text-3" id="text-org4a05140">
<p>
顺便把 websites 也用 bash 脚本保存在 teable 里了，之前一直用 org-capture，现在太多了不好检索。让 Claude 把之前的列表转换为了 csv 导入到了 teable。
</p>

<div class="org-src-container">
<pre class="src src-bash">
#!/bin/bash
while true; do
  # 提示用户输入信息
  read -p "Enter Name (or type 'q' to quit): " name
  if [[ "$name" == "q" ]]; then
    echo "Exiting..."
    break
  fi
  read -p "Enter Intro (or type 'q' to quit): " intro
  if [[ "$intro" == "q" ]]; then
    echo "Exiting..."
    break
  fi
  read -p "Enter Source (or type 'q' to quit): " source
  if [[ "$source" == "q" ]]; then
    echo "Exiting..."
    break
  fi
# 发送 POST 请求
curl --request POST \
  --url https://app.teable.io/api/table/TEABLE_ID/record \
  --header 'Authorization: Bearer TEABLE_TOKEN' \
  --header 'content-type: application/json' \
  --data "$(cat <<EOF
{
  "typecast": true,
  "records": [{
    "fields": {
      "Name": "$name",
      "Intro": "$intro",
      "Source": "$source"
    }
  }]
}
EOF
)"
echo "$name $source 内容已成功写入 table websites"
done</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgaf935f5" class="outline-2">
<h2 id="orgaf935f5">PocketBase</h2>
<div class="outline-text-2" id="text-orgaf935f5">
<p>
需要在仓库的 secret 里增加 <code>POCKETBASE_TOKEN</code> 、 <code>POCKETBASE_API</code> 两个secert，填入自己的 pocketbase API 地址和请求头。
</p>

<p>
这个请求头我也是看了好半天文档才弄明白：
</p>

<p>
需要在指定的 collection 的 API Rules 里，手动加上 <code>@request.headers.x_token = "Your_token"</code> ,这里填入的内容就是 <code>POCKETBASE_TOKEN</code> ， <code>POCKETBASE_API</code> 在每个 collection 里会显示。
</p>

<p>
由于这里指定了 header，在 python 的部分就得特别处理：
</p>

<div class="org-src-container">
<pre class="src src-python">
second_response = requests.post(
    url=os.environ['POCKETBASE_API'],
    headers={
        "x_token": f"{os.environ['POCKETBASE_TOKEN']}",
        "Content-Type": "application/json"
    },
    json={
        "URL": url,
        "title": title
    }
)</pre>
</div>
</div>

<div id="outline-container-org9e38515" class="outline-3">
<h3 id="org9e38515">docker 部署到 VPS</h3>
<div class="outline-text-3" id="text-org9e38515">
<div class="org-src-container">
<pre class="src src-yaml">
version: "3.7"
services:
  pocketbase:
    image: ghcr.io/muchobien/pocketbase:latest
    container_name: pocketbase
    restart: unless-stopped
    ports:
      - "8090:8090"
    volumes:
      - "./data:/pb_data"
    healthcheck: #optional (recommended) since v0.10.0
      test: wget --no-verbose --tries=1 --spider http://localhost:8090/api/health || exit 1
      interval: 5s
      timeout: 5s
      retries: 5</pre>
</div>
</div>
</div>
<div id="outline-container-org630d89e" class="outline-3">
<h3 id="org630d89e">Python</h3>
<div class="outline-text-3" id="text-org630d89e">
<p>
修改 bookmark-collection 仓库的 py 脚本：
</p>

<div class="org-src-container">
<pre class="src src-python">
import os
import re
import logging
import requests
from github import Github
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
def get_added_content():
    """获取这次提交新增的内容"""
    try:
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
        commit_sha = os.environ.get('GITHUB_SHA')
        commit = repo.get_commit(commit_sha)
        for file in commit.files:
            if file.filename.endswith('.md'):
                if file.patch and '+' in file.patch:
                    added_lines = [line[1:] for line in file.patch.split('\n')
                                 if line.startswith('+') and not line.startswith('+++')]
                    return added_lines
        return []
    except Exception as e:
        logging.error(f"Error getting commit content: {str(e)}")
        raise
def extract_url_and_title(line: str):
    """从行中提取URL和标题，支持markdown格式的链接 [title](url)"""
    # 更新后的提取模式，同时获取标题和URL
    pattern = r'\[(.*?)\]\((https?://[\w\-._~:/?#\[\]@!$&\'()*+,;=.%]+)\)'
    match = re.search(pattern, line)
    if match:
        title = match.group(1)
        url = match.group(2)
        return url, title
    return None, None
def has_clip_tag(line: str) -> bool:
    """检查是否包含 #2clip 标签"""
    return bool(re.search(r'#2clip\b', line))
def trigger_workflow():
    """触发另一个workflow"""
    try:
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
        workflow = repo.get_workflow("bookmark_summary.yml")
        workflow.create_dispatch("main")
        logging.info("Successfully triggered the bookmark_summary workflow")
    except Exception as e:
        logging.error(f"Failed to trigger workflow: {str(e)}")
        raise
def main():
    try:
        # 获取所有新增的内容
        added_lines = get_added_content()
        if not added_lines:
            logging.info("No new markdown content found in this commit")
            return
        trigger_needed = False
        # 处理每一行新增的内容
        for line in added_lines:
            line = line.strip()
            logging.info(f"Processing line: {line}")
            # 检查标签
            if has_clip_tag(line):
                trigger_needed = True
                logging.info("Found #2clip tag")
            # 提取并处理URL和标题（无论是否有标签）
            url, title = extract_url_and_title(line)
            if url:
                try:
                    # 发送到 Readwise
                    response = requests.post(
                        url="https://readwise.io/api/v3/save/",
                        headers={"Authorization": f"Token {os.environ['READWISE_TOKEN']}"},
                        json={
                            "url": url,
                            "tags": ["Bookmark"]
                        }
                    )
                    response.raise_for_status()
                    logging.info(f"Successfully saved URL to Readwise: {url}")
                    # 发送到第二个 API endpoint
                    second_response = requests.post(
                        url=os.environ['POCKETBASE_API'],
                        headers={
                            "x_token": f"{os.environ['POCKETBASE_TOKEN']}",
                            "Content-Type": "application/json"
                        },
                        json={
                            "URL": url,
                            "title": title
                        }
                    )
                    second_response.raise_for_status()
                    logging.info(f"Successfully saved URL to pocketbase: {url}")
                except requests.exceptions.RequestException as e:
                    logging.error(f"Failed to save URL {url}: {str(e)}")
        # 如果发现了标签，触发workflow
        if trigger_needed:
            logging.info("Triggering workflow due to #2clip tag")
            trigger_workflow()
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        raise
if __name__ == "__main__":
    main()</pre>
</div>
</div>
</div>

<div id="outline-container-orgd16eb3e" class="outline-3">
<h3 id="orgd16eb3e">workflow</h3>
<div class="outline-text-3" id="text-orgd16eb3e">
<p>
修改 bookmark-collection 仓库的 yaml：
</p>

<div class="org-src-container">
<pre class="src src-yaml">name: Save Bookmark to Readwise
on:
  push:
    branches:
      - main
    paths:
      - '**.md'
  workflow_dispatch:
permissions:
  contents: read
  actions: write
jobs:
  save-to-readwise:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub
    - name: Run bookmark saver
      env:
        READWISE_TOKEN: ${{ secrets.READWISE_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        POCKETBASE_API: ${{ secrets.POCKETBASE_API }}
        POCKETBASE_TOKEN: ${{ secrets.POCKETBASE_TOKEN }}
      run: python save_to_readwise.py</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org180f036" class="outline-2">
<h2 id="org180f036">Readwise highlights</h2>
<div class="outline-text-2" id="text-org180f036">
<p>
写了一个 <code>class ReadwiseAPI</code> 方便其他项目引入。可以定时获取我所有 highlights 的 title 和 url。
</p>

<p>
后面可以直接把 highlights 导入到 pocketbase。
</p>
</div>
<div id="outline-container-orgbcf4327" class="outline-3">
<h3 id="orgbcf4327">python</h3>
<div class="outline-text-3" id="text-orgbcf4327">
<div class="org-src-container">
<pre class="src src-python">
import requests
import json
from datetime import datetime, timedelta
import os
from typing import List, Dict, Optional
from pathlib import Path
import re
from github import Github
import argparse
class ReadwiseAPI:
    """Readwise API client for exporting highlights with smart update capability and GitHub integration"""
    def __init__(self):
        # Initialize Readwise token
        self.readwise_token = os.environ.get("READWISE_TOKEN")
        if not self.readwise_token:
            raise ValueError("READWISE_TOKEN not found in environment variables")
        # Initialize GitHub token
        self.github_token = os.environ.get("GITHUB_TOKEN")
        if not self.github_token:
            raise ValueError("GITHUB_TOKEN not found in environment variables")
        # Get repository from GitHub Actions environment variable
        self.github_repo = os.environ.get("GITHUB_REPOSITORY")
        if not self.github_repo:
            raise ValueError("Not running in GitHub Actions environment (GITHUB_REPOSITORY not found)")
        # Initialize GitHub client
        self.github = Github(self.github_token)
        self.repo = self.github.get_repo(self.github_repo)
        # Initialize Readwise API settings
        self.base_url = "https://readwise.io/api/v2"
        self.headers = {
            "Authorization": f"Token {self.readwise_token}"
        }
        self.last_update_file = "last_update.json"
        self.articles_file = "articles.json"
    def get_highlights(self, updated_after: Optional[datetime] = None,
                      start_date: Optional[datetime] = None,
                      end_date: Optional[datetime] = None) -> Dict:
        """Get all highlights with their associated metadata"""
        endpoint = f"{self.base_url}/export/"
        params = {}
        if updated_after:
            params["updated_after"] = updated_after.isoformat()
        elif start_date:
            params["updated_after"] = start_date.isoformat()
            if end_date:
                params["updated_before"] = end_date.isoformat()
        print(f"Fetching highlights with params: {params}")
        response = requests.get(endpoint, headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()
    def get_file_content(self, path: str) -> Optional[str]:
        """Get file content from GitHub repository"""
        try:
            content = self.repo.get_contents(path)
            return content.decoded_content.decode('utf-8')
        except Exception as e:
            print(f"File {path} not found in repository: {e}")
            return None
    def update_file(self, path: str, content: str, message: str):
        """Update or create file in GitHub repository"""
        try:
            # Try to get existing file
            file = self.repo.get_contents(path)
            # Update existing file
            self.repo.update_file(
                path=path,
                message=message,
                content=content,
                sha=file.sha
            )
        except Exception:
            # Create new file if it doesn't exist
            self.repo.create_file(
                path=path,
                message=message,
                content=content
            )
    def clean_title(self, title: str) -> str:
        """Clean title by removing newlines and extra spaces"""
        title = re.sub(r'\s+', ' ', title.replace('\n', ' '))
        return title.strip()
    def create_article_json(self, highlights_data: Dict) -> List[Dict]:
        """Create a list of articles with title and URL, only for category 'articles'"""
        articles = []
        for article in highlights_data.get('results', []):
            if article.get('category', '').lower() == 'articles':
                title = self.clean_title(article.get('title', 'Untitled'))
                url = article.get('source_url', '')
                articles.append({
                    'title': title,
                    'url': url
                })
        return articles
    def load_last_update_from_github(self) -> Optional[datetime]:
        """Load the last update date from GitHub"""
        content = self.get_file_content(self.last_update_file)
        if content:
            try:
                data = json.loads(content)
                return datetime.strptime(data['last_update'], '%Y-%m-%d')
            except Exception as e:
                print(f"Error parsing last update file: {e}")
                return None
        return None
    def save_last_update_to_github(self):
        """Save current date as last update date to GitHub"""
        current_date = datetime.now().strftime('%Y-%m-%d')
        content = json.dumps({'last_update': current_date})
        self.update_file(
            path=self.last_update_file,
            content=content,
            message="Update last sync date"
        )
    def load_existing_articles_from_github(self) -> List[Dict]:
        """Load existing articles from GitHub"""
        content = self.get_file_content(self.articles_file)
        if content:
            try:
                return json.loads(content)
            except Exception as e:
                print(f"Error parsing articles file: {e}")
                return []
        return []
    def merge_articles(self, existing_articles: List[Dict], new_articles: List[Dict]) -> List[Dict]:
        """Merge new articles with existing ones, avoiding duplicates"""
        existing_set = {(article['title'], article['url']) for article in existing_articles}
        for article in new_articles:
            article_tuple = (article['title'], article['url'])
            if article_tuple not in existing_set:
                existing_articles.append(article)
                existing_set.add(article_tuple)
        return existing_articles
    def export_articles(self, start_date: Optional[str] = None,
                       end_date: Optional[str] = None,
                       all_time: bool = False):
        """
        Export articles to GitHub with smart update capability
        Args:
            start_date: Optional start date in YYYY-MM-DD format
            end_date: Optional end date in YYYY-MM-DD format
            all_time: If True, fetch all highlights regardless of dates
        """
        if all_time:
            # 当选择 all_time 时，强制获取所有 highlights，忽略上次更新时间
            print("Fetching all highlights from the beginning")
            highlights_data = self.get_highlights()
        elif start_date:
            # 如果指定了开始日期，使用指定的日期范围
            start_datetime = datetime.strptime(start_date, '%Y-%m-%d')
            end_datetime = datetime.strptime(end_date, '%Y-%m-%d') if end_date else datetime.now()
            print(f"Fetching highlights from {start_date} to {end_date or 'now'}")
            highlights_data = self.get_highlights(start_date=start_datetime, end_date=end_datetime)
        else:
            # 使用上次更新时间的增量更新逻辑
            last_update = self.load_last_update_from_github()
            if last_update:
                days_since_update = (datetime.now() - last_update).days
                print(f"Last update was {days_since_update} days ago on {last_update.strftime('%Y-%m-%d')}")
                if days_since_update > 0:
                    print(f"Fetching highlights updated after {last_update.strftime('%Y-%m-%d')}")
                    highlights_data = self.get_highlights(updated_after=last_update)
                else:
                    print("Already updated today, no need to fetch new articles")
                    return
            else:
                print("No previous update found, fetching all articles")
                highlights_data = self.get_highlights()
        # Create article data
        new_articles = self.create_article_json(highlights_data)
        print(f"Found {len(new_articles)} new articles")
        # Load existing articles
        existing_articles = self.load_existing_articles_from_github()
        print(f"Found {len(existing_articles)} existing articles")
        # Merge new articles with existing ones
        merged_articles = self.merge_articles(existing_articles, new_articles)
        print(f"Total unique articles after merge: {len(merged_articles)}")
        # Save merged articles to GitHub
        self.update_file(
            path=self.articles_file,
            content=json.dumps(merged_articles, ensure_ascii=False, indent=2),
            message="Update articles list"
        )
        # Update the last update date
        if not start_date and not all_time:  # 只有在非指定日期范围和非全量更新的情况下才更新最后同步时间
            self.save_last_update_to_github()
        print(f"Successfully updated articles in GitHub repository")
        if new_articles:
            print("New articles added:")
            for article in new_articles:
                print(f"- {article['title']}")
def main():
    # 从环境变量获取 GitHub Actions 的输入参数
    gh_start_date = os.environ.get('INPUT_START_DATE', '')
    gh_end_date = os.environ.get('INPUT_END_DATE', '')
    gh_all_time = os.environ.get('INPUT_ALL_TIME', '').lower() == 'true'
    # 设置命令行参数解析器
    parser = argparse.ArgumentParser(description='Sync Readwise highlights to GitHub')
    parser.add_argument('--start-date', type=str, help='Start date in YYYY-MM-DD format')
    parser.add_argument('--end-date', type=str, help='End date in YYYY-MM-DD format')
    parser.add_argument('--all-time', action='store_true', help='Fetch all highlights from the beginning')
    args = parser.parse_args()
    # 优先使用命令行参数，如果没有则使用 GitHub Actions 的输入参数
    start_date = args.start_date or gh_start_date
    end_date = args.end_date or gh_end_date
    all_time = args.all_time or gh_all_time
    try:
        client = ReadwiseAPI()
        client.export_articles(
            start_date=start_date if start_date else None,
            end_date=end_date if end_date else None,
            all_time=all_time
        )
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        raise
if __name__ == "__main__":
    main()</pre>
</div>
</div>
</div>

<div id="outline-container-org0e4f96d" class="outline-3">
<h3 id="org0e4f96d">workflow</h3>
<div class="outline-text-3" id="text-org0e4f96d">
<div class="org-src-container">
<pre class="src src-yaml">
name: Sync Readwise Articles
on:
  schedule:
    # 每天凌晨 1 点运行 (UTC 时间，对应北京时间 9 点)
    - cron: '0 1 * * *'
  # 支持手动触发，并添加输入参数
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD, e.g., 2024-01-01)'
        required: false
        type: string
        default: ''
      end_date:
        description: 'End date (YYYY-MM-DD, leave empty for current date)'
        required: false
        type: string
        default: ''
      all_time:
        description: 'Fetch all highlights (overrides date range if selected)'
        type: boolean
        required: false
        default: false
permissions:
  contents: write      # 仓库内容的读写权限
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run sync script
      env:
        READWISE_TOKEN: ${{ secrets.READWISE_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        INPUT_START_DATE: ${{ github.event.inputs.start_date }}
        INPUT_END_DATE: ${{ github.event.inputs.end_date }}
        INPUT_ALL_TIME: ${{ github.event.inputs.all_time }}
      run: python readwise_sync.py
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes_found=true" >> $GITHUB_OUTPUT
        else
          echo "changes_found=false" >> $GITHUB_OUTPUT
        fi
    - name: Commit changes
      if: steps.verify-changed-files.outputs.changes_found == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add articles.json last_update.json
        git commit -m "Update Readwise articles [skip ci]" || echo "No changes to commit"
    - name: Push changes
      if: steps.verify-changed-files.outputs.changes_found == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-github.html">Github</a> <a href="https://www.vandee.art/tag-python.html">Python</a> <a href="https://www.vandee.art/tag-database.html">Database</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Github]]></category>
  <category><![CDATA[Python]]></category>
  <category><![CDATA[Database]]></category>
  <link>https://www.vandee.art/blog/2024-11-10-database-of-flowing-knowledge.html</link>
  <guid>https://www.vandee.art/blog/2024-11-10-database-of-flowing-knowledge.html</guid>
  <pubDate>Sun, 10 Nov 2024 18:36:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[我的 PKM 构建 Log]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org900e6d7">前言</a></li>
<li><a href="#org739556f">笔记和 PKM 的构建 Log</a>
<ul>
<li><a href="#org3b0f704">2022-07-20 开始系统的记笔记</a>
<ul>
<li><a href="#orgf235e2c">Add</a></li>
<li><a href="#org62b49c9">为什么要花这么多心思在记笔记？</a></li>
</ul>
</li>
<li><a href="#orgf88c5e9">2023-07-19 又一次知识管理逻辑的完善</a>
<ul>
<li><a href="#orgcfed1df">Add</a></li>
<li><a href="#orga3caebd">知识管理与记录</a></li>
<li><a href="#org4c7e3a7">重新折腾obsidian</a></li>
<li><a href="#orgafe4a26">知识管理与文档记录的意义</a></li>
</ul>
</li>
<li><a href="#orgefc71e3">2023-09-14 obsidian和logseq联用的PKM尝试</a>
<ul>
<li><a href="#orgccd5190">Add</a></li>
<li><a href="#org0ea1656">Logseq</a></li>
<li><a href="#orgb091f28">ob和Logseq的简单对比</a></li>
<li><a href="#org5ed08e3">现在的选择</a></li>
<li><a href="#org1e97333">Reference</a></li>
</ul>
</li>
<li><a href="#org82b5471">2024-04-13 神的编辑器</a>
<ul>
<li><a href="#orgae2b1c2">Add</a></li>
<li><a href="#orgd7d5bb0">做自己的笔记“软件”</a></li>
<li><a href="#org6b806c6">Emacs</a></li>
</ul>
</li>
<li><a href="#orge866c00">2024-05-13 脱离笔记软件，CLI笔记工具—nb</a>
<ul>
<li><a href="#orga51a0f7">Add</a></li>
<li><a href="#org36721e7">PKM去形式化</a></li>
<li><a href="#orgf55d707">nb</a></li>
<li><a href="#org2b37a78">去形式化之后的PKM</a></li>
<li><a href="#orgb250bed">Logseq适配Quartz</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgccdc4c5">Emacs 阶段</a></li>
<li><a href="#orgbb98d93">ChangeLog</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org900e6d7" class="outline-2">
<h2 id="org900e6d7">前言</h2>
<div class="outline-text-2" id="text-org900e6d7">
<p>
最近开始 all in Emacs，用 org-mode 写作和生成静态博客页面，顺便对以前的写作再迭代整理一次。
</p>

<p>
知识的循环是固定结构化知识不可缺少的一步。
</p>

<p>
在整理这些关于 PKM 和笔记零散的博客的过程种，依然能回忆起某些段落，某些反复推敲的文字背后那些思考的火花。它们依然滋滋作响，这些思维的闪光穿越了时间和空间，它们在历史和记录中变得永恒。它们当然是宇宙里不可能被侦测到的无穷小量，但它们的能量在物质的永恒中已经签上了自己的 ID。
</p>
</div>
</div>


<div id="outline-container-org739556f" class="outline-2">
<h2 id="org739556f">笔记和 PKM 的构建 Log</h2>
<div class="outline-text-2" id="text-org739556f">
<p>
这部分是之前相关零散文章的整理， <code>Add</code> 是新增，其他部分是之前的原文（部分修改）。
</p>
</div>
<div id="outline-container-org3b0f704" class="outline-3">
<h3 id="org3b0f704">2022-07-20 开始系统的记笔记</h3>
<div class="outline-text-3" id="text-org3b0f704">
<p>
Typora+obsidian+notion，这个是我现在暂定的笔记解决方案。
</p>

<p>
好处在哪里：Typora解决文本编辑，obsidian解决文档的本地储存和分类，并且win，mac，都能用。notion解决网络储存，并且有着强大的数据库和嵌入系统。这样基本实现了跨平台，跨终端，本地和网络双储存，多平台同步笔记。
</p>

<p>
Typora无疑是这么多年来最好用的markdown编辑器了。至于为什么执着于markdown格式，因为它简单高效，门槛也低，在网络文本传输有天然的优势。这中间还要解决的一个问题就是本地图片上传。利用Typora和gitee图床就可以完美解决。obsidian配合icloud也可以多平台同步。
</p>
</div>
<div id="outline-container-orgf235e2c" class="outline-4">
<h4 id="orgf235e2c">Add</h4>
<div class="outline-text-4" id="text-orgf235e2c">
<p>
最开始接触到做笔记这个概念是从 Notion 开始，那个时候 Notion 正火。随后由于网络问题转到了 markdown 和 obsidian，开始折腾本地笔记。
</p>
</div>
</div>

<div id="outline-container-org62b49c9" class="outline-4">
<h4 id="org62b49c9">为什么要花这么多心思在记笔记？</h4>
<div class="outline-text-4" id="text-org62b49c9">
<p>
也还是从疫情说起，疫情让协同办公变成刚需。团队协作当中，本地与网络文档同步直接影响工作的效率。而对于个人，记笔记也直接影响信息的处理效率。而信息的输入与存储直接影响了，我们对于外界的认知，对信息的接受与处理，在准确全面的认知之下，思维才有用武之地。
</p>

<p>
我个人习惯每个星期会整理一次，做好输出与整理。一个月之后再进行一次，如此反复。
</p>

<p>
基维百科：文件是对思想创意的书面呈现，档案是对事物发展过程的书面保存，文档可以说就是主观和客观的书面记录。
</p>

<p>
文档其实是我们工作学习生活都离不开的一个记录形式。
</p>

<p>
汉谟拉比法典可以说就是最早的文档了。从社会发展的角度来说，人类各项基础活动都离不开书写和记录还有归档。文档的记录更直接关乎人类历史的发展与承接。信息处理的效率，更直接影响着文明发展的快慢。现在网络一秒钟传输的数据量，已经是几千年前全世界文档记录量的不知道多少倍了。
</p>
</div>
</div>
</div>

<div id="outline-container-orgf88c5e9" class="outline-3">
<h3 id="orgf88c5e9">2023-07-19 又一次知识管理逻辑的完善</h3>
<div class="outline-text-3" id="text-orgf88c5e9">
<p>
最近刷到了这个文章<a href="https://mp.weixin.qq.com/s/yPJyRROXVHgQYWML1BmU5g">分享我的 2023 版生活管理流程图 (qq.com)</a>，重新思考了一下知识管理的逻辑。
</p>

<p>
距离上一次更新正好一年。在当时的方案中，由于还不能实现科学上网自由，obsidian的插件许多都没有，也没想着太折腾，notion的剪藏与数据库实在是方便。但是对于文档记录，本地储存才是一劳永逸的，notion的网络又还是时好时坏。还是决定再折腾一下。
</p>
</div>
<div id="outline-container-orgcfed1df" class="outline-4">
<h4 id="orgcfed1df">Add</h4>
<div class="outline-text-4" id="text-orgcfed1df">
<p>
现在互联网已经被 AI 内容污染的不成样了。那个时候开始意识到历史和记录的意义了。
</p>
</div>
</div>
<div id="outline-container-orga3caebd" class="outline-4">
<h4 id="orga3caebd">知识管理与记录</h4>
<div class="outline-text-4" id="text-orga3caebd">
<p>
<a href="https://mp.weixin.qq.com/s/yPJyRROXVHgQYWML1BmU5g">分享我的 2023 版生活管理流程图 (qq.com)</a>里提到
</p>

<blockquote>
<p>
我给这个生活管理系统的标签是「知行合一」， <b>希望能够让知识流动起来，融贯到生活中的方方面面，来指导我们更好地行动，创造出更多的价值。</b>
</p>

<p>
也希望能帮你做到「知行合一」。
</p>
</blockquote>

<p>
简单来说，人类学习一项事物，或者说认知一个事物的基本逻辑是：
</p>

<p>
<a href="https://www.vandee.art/posts/20230313-295a230d.html?highlight=%E4%BF%A1%E6%81%AF#%E8%A1%A8%E4%B8%8E%E9%87%8C"> <b>物质实质 — 物质表象 — 生理接受 — 思维转化 — 信息处理 — 信息表达 — 认知迭代的过程</b> </a>
</p>

<p>
现在垃圾信息越来越多了，GTP等LLM生成式AI会制造更多信息垃圾。
</p>

<p>
从互联网诞生之初，垃圾信息就是使用者面临的一大难题。如何从无数信息中寻找到有用信息？搜索引擎的需求由此而来。早期的垃圾信息都是由人工生成，因此其数量受制于人类工作的局限性。但随着生成式 AI 的到来，大批量生成将使得垃圾信息的量级远超过去。五月初，新闻评级公司 NewsGuard 发现有 49 个假新闻网站使用 AI 生成内容。到 6 月底，这个数字增加到了 277。这些 AI 生成内容网站旨在通过 Google 的广告获利。来源：<a href="https://www.solidot.org/story?sid=75525">https://www.solidot.org/story?sid=75525</a>
</p>

<p>
信息输入是认知的源头，重要性不言而喻，去年折腾了一下RSS订阅来粗略的管理信息输入，
</p>

<p>
有了相对良性的信息输入，才能反哺思维的建立，最后一个阶段，就是思维加工之后，形成档案记录，循环到新的信息输入当中。所以，知识管理与记录是认知迭代环节中，非常重要的一环。从互联网时代，到大数据，到现在的生成式AI，每天基于互联网产生的数据早已超过过去纸质档案数据的总和。科学的文档管理和检索系统，提高信息查找的准确度与效率，非常有必要。
</p>
</div>
</div>

<div id="outline-container-org4c7e3a7" class="outline-4">
<h4 id="org4c7e3a7">重新折腾obsidian</h4>
<div class="outline-text-4" id="text-org4c7e3a7">
<p>
正好前段时间Anytype的内测通过了，体验了一下，copy了一下它的设计理念， <b>决定以object-tag-type-relation的逻辑来整理信息，统一对于信息处理，思维上的内在逻辑分类，以及文档管理、记录、输出的外在分类。</b>
</p>

<p>
既然要重新整理，干脆把obsidian捡起来吧。
</p>

<p>
这次要解决的重点问题是：
</p>
<ul class="org-ul">
<li>notion的剪藏与数据库需求</li>
<li>思维逻辑与外在记录的统一</li>
<li>信息、任务管理的自动化更新</li>
</ul>

<p>
参考这些以及<a href="https://forum-zh.obsidian.md/">Obsidian 中文论坛 </a>，折腾了几天，
</p>
<ul class="org-ul">
<li><a href="https://client.sspai.com/post/73958#">玩转 Obsidian 08：利用 Dataview 打造自动化 HomePage - 少数派 (sspai.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1YT4y167dL/?vd_source=6d02c197c6cb438dff451b14b29c6080">从零开始保姆级教程：用Obsidian搭建个人书库（一）_哔哩哔哩_bilibili</a></li>
<li><a href="https://sspai.com/post/77304">从卡片笔记到 Obsidian：本质、方法与工具 - 少数派 (sspai.com)</a></li>
<li><a href="https://sspai.com/post/80634">去中心化笔记体系 - 少数派 (sspai.com)</a></li>
<li><a href="https://forum-zh.obsidian.md/t/topic/75">obsidian使用Maoxian插件完美剪藏网页文章 - 经验分享 - Obsidian 中文论坛</a></li>
<li><a href="https://forum-zh.obsidian.md/t/topic/200">我的 Obsidian 工作流：模板+QuickAdd+Dataview 快速创建和自动索引 - 经验分享 - Obsidian 中文论坛</a></li>
</ul>

<p>
依赖obsidian的qucikadd和dataview插件，加上快捷指令，基本实现了这次知识管理更新的目的。
</p>

<p>
几个主要界面:
</p>


<figure id="org23e3bdb">
<img src="https://s2.loli.net/2023/07/19/EeMl1FW29UHJONI.jpg" class="img" width="50%" height="50%">

</figure>

<p>
创建Daily来记录每天的Todo以及零碎的信息，通过标签和obsidian的双链来链接，让信息关联。两个主页用来自动更新数据和汇总，DB folder插件生成的类似notion的数据库，解决文档的标签，分类，查找，归档。
</p>

<p>
这几年折腾了几次，但始终要明确的是：知识管理的目的是管理知识，是为了提高效率，而不是为了管理而管理。
</p>
</div>
</div>

<div id="outline-container-orgafe4a26" class="outline-4">
<h4 id="orgafe4a26">知识管理与文档记录的意义</h4>
<div class="outline-text-4" id="text-orgafe4a26">
<p>
<a href="https://www.bilibili.com/video/BV14Y4y1n7YQ/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">【苏星河】全网都在吹的飞书，到底是个什么软件？_哔哩哔哩_bilibili</a>这个视频的最后说的很有道理：
</p>

<blockquote>
<p>
文档全称文件与档案，其中文基百科对于文件的解释是其实对思想创意的书面呈现，而对于档案则是对事物发展过程的书面保存。关于事物的所有文档，就是关于该事物在主观思想与客观过程这两个层面的完整书面记录。
</p>

<p>
而我们知道人类所进行过的所有活动，其实无外乎就是主观思想与客观构成的一系列纠缠统一，所以文档工具也就自然而然地成为了我们工作学习社会发展的核心内容，贯穿始终。
</p>

<p>
那历史上最早的文档其实就是5000年前的楔形文字，这苏美人在泥板上努力刻下的符号，本质就是在以书面的形式呈现。作为文档最大的问题显然就是极低的内容承载效率，一块硕大的泥巴只能记录非常有限的内容
于是直到3000年后，蔡伦改进的造纸术，才让轻薄柔韧造价低廉的纸张成为了文章在现实世界中最完美的承载。
</p>

<p>
拥有和纸张文档后，人们便开始疯狂书写记录世界。于是如何才能提高内容输入效率，又成为了许多人关注的全新议题。在随后的1000多年里，以表音文字为代表的中国发明了雕版印刷，而以表音文字为代表的欧美则偏爱活字印刷，总之这两种印刷术都大大提高了内容的输入效率。而且欧美国家后期发明的打字机，更是将活字印刷的效率发挥到了极致，输入方式的进化将文档的生产与传播效率提高到了全新的高度。
但这也同时放大了一个原本不起眼的问题，那就是文档的内容编辑效率。
</p>

<p>
虽然写这件事从未改变，但为了写的效率，我们付出了整整5000年的努力。
因为就像我们开头说的，文档是人类思想与行为的书面记录，其中思想与行为赋予着人类特殊的价值，而书面记录则让多人合作与传承成为可能。
所以提高文档工具的效率，就是在提高人类发展的效率。
</p>
</blockquote>

<p>
现在的文档记录基本上都依赖于互联网信息，而现阶段GPT等LLM生成式AI，会生成许多虚假内容，<a href="https://www.ifanr.com/1553456?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=">疯狂污染互联网，人类比 AI 擅长多了 </a>
</p>

<p>
这也是为什么许多大佬会站出来抵制生成式AI，Twitter限制用户浏览推文数量，Reddit论坛关闭API，Claude、BingChat、bard，包括马斯克最近要成立的XAI，也都是在争夺文档信息，同样也是在争夺历史。
</p>

<p>
<b>文档是人类思想与行为的书面记录，其中思想与行为赋予着人类特殊的价值，而书面记录则让多人合作与传承成为可能，所以提高文档工具的效率，就是在提高人类发展的效率。</b>
</p>

<p>
<b>这些文档也就是人类的历史，但现在AI信息污染的过程本身，也同样是人类历史的一部分。</b>
</p>

<p>
这又让我想起了刚开始用chatGPT的时候，问过他的一个问题：美国是现在的世界老大么？
</p>

<p>
记得当时的答案还是相对客观的，不知道百年之后，各大XXXGPT的回答是什么。
</p>
</div>
</div>
</div>

<div id="outline-container-orgefc71e3" class="outline-3">
<h3 id="orgefc71e3">2023-09-14 obsidian和logseq联用的PKM尝试</h3>
<div class="outline-text-3" id="text-orgefc71e3">
<p>
距上一次折腾，不知不觉已经两个月了。在“深入”使用obsidian(后面简称ob)这两个月期间，一个之前暂时搁置的问题逐渐浮现出来：那就是数据储存形式。
</p>

<p>
也正好看到了这篇文章<a href="https://mp.weixin.qq.com/s/wWez_Ijq_Dukr-rch4P24g">Heptabase，如果笔记工具公司倒闭了，你的笔记还能接着用吗？</a>。
</p>

<p>
从易用性和数据呈现来看，很显然它是，从保存数据和数据结构的角度来看，markdown不是一个很优秀的格式。当然这是当数据到达一个相当的量级才需要考虑的事。于是，开始了解Logseq。
</p>

<p>
没有最好的笔记软件，适合自己的才是最好的。
</p>
</div>
<div id="outline-container-orgccd5190" class="outline-4">
<h4 id="orgccd5190">Add</h4>
<div class="outline-text-4" id="text-orgccd5190">
<p>
这个时候开始意识到数据的重要性了，以前的纸质记录、现在的电子记录，都是数据。现在的社会是信息和数据的社会，在 AI 介入之后，更是如此。没有最好的笔记软件，只有最适合自己的笔记软件，这句话一直说到现在。Logseq 是一个很好的笔记软件设计，但现在回过头来看，它从设计底层强制性的使用 markdown 语法里的列表格式来实现的块并不是那么容易让所有人接受，只要导入了其他 markdown 文档，就会强制性的加上列表格式。也是从 Logseq 开始，我第一次接触到了 Lisp 语言这个概念。
</p>
</div>
</div>

<div id="outline-container-org0ea1656" class="outline-4">
<h4 id="org0ea1656">Logseq</h4>
<div class="outline-text-4" id="text-org0ea1656">
<p>
第一次打开Logseq就被UI的设计吸引，这是一种美学上的天然的吸引。和第一次打开Typora的感觉很像。
</p>

<p>
<a href="https://bytetalk.fm/posts/episode-7">跟 Logseq 的创造者天生聊聊 Logseq 的故事</a>里介绍到：Logseq是开源的，由Clojure / ClojureScript开发。dataScript 库，函数式语言在数据操作方面会有些优势 ，可以写出很丰富的 query。 要知道，鼎鼎大名的Roam Research也是基于Clojure开发。
</p>

<p>
Roam Research为什么如此受追捧，除了双链和block之外，我觉得它的Query和数据结构才是重点，并且它
</p>

<blockquote>
<ul class="org-ul">
<li>第三，协作性。Conor 的野心，是让每一个学生 <b>不需要通过</b> 高质量的学校教育，就能自行从 Roam Research 组建的全社会协作知识网络中，学会任何自己想学会的知识和技能，并且能够更容易探索与创造知识。</li>
<li>第四，激励性。为了促进人们生产和分享知识，Roam Research 想方设法降低知识采集和生产的成本，激发人们的创造、分享和协作行为。</li>
</ul>

<p>
Source：<a href="https://sspai.com/post/60787">Roam Research 到底好在哪儿？ - 少数派 (sspai.com)</a>
</p>
</blockquote>

<p>
<a href="https://sspai.com/post/60787">Roam Research 到底好在哪儿？ - 少数派 (sspai.com)</a>
</p>

<p>
Logseq的开发者<a href="https://twitter.com/tiensonqin">秦天生</a>也说到，想做一个 GitHub 和 Wikipedia 的 2.0 版本。从开发到理念，可以说和Roam Research殊路同归。
</p>

<p>
在这一点上，Logseq发展的很完美。而这几点，同样是我想做PKM，或者说，对知识本身的理解和态度。
</p>

<p>
<b>知识是上帝给人类的财富，它就应该是开源的。</b>
</p>

<p>
因此，和ob相比，这种设计开发理念，更吸引我。
</p>
</div>
</div>

<div id="outline-container-orgb091f28" class="outline-4">
<h4 id="orgb091f28">ob和Logseq的简单对比</h4>
<div class="outline-text-4" id="text-orgb091f28">
<p>
我认为obsidian的生命力来源于社区和插件，与其说用ob不如说是再用它的插件，ob开放了插件API，让爱好者自由发挥。
</p>

<p>
ob更像是一个全能的高达，身上装备者各种插件盔甲和武器，你可以根据自己的Project、GTD、PKM，制定出个性化很高的管理系统。 <b>插件是ob很大的一个优势。</b>
</p>

<p>
<b>ob和Logseq的对比：</b>
</p>

<p>
obsidian：
</p>

<ul class="org-ul">
<li>page为单位，你的每一篇笔记就是一个markdown文档，通过双链链接起来。当然ob也有块的概念，
但和Logseq可展开的块不一样，ob的块是文字的每一行，可以通过 <code>^</code> 来标记和检索。</li>
<li>有文件夹系统，习惯文件夹管理的，这是ob的很大优势。</li>
<li>除了ob自带的搜索功能，数据呈现和检索其实主要依靠dataview插件，而这个不是数据结构层面的。
Logseq的dataScript库在数据结构上优势更大。</li>
<li>可以通过 <b>TagFolder</b> 、 <b>Tag Summary</b> 等插件自己制作标签页，标签管理方面自由度也很高。</li>
<li>ob的多端同步很方便，这依赖于 <b>Remotely Save</b> 这个插件。</li>
<li>和Zotero的联动依靠插件来导入高亮和笔记。</li>
</ul>

<p>
Logseq：
</p>

<ul class="org-ul">
<li>块为最小单位,使得它的颗粒可以很小，每一个block都可以展开并且关联和查询。这是和ob以page为单位，很不一样的地方。</li>
<li>每一个tag会自动生成标签页，这样很方便做 Tag_Pages，和moc。这样就可以通过标签页来链接block。它的标签可以看做一个特殊的块，也就是标签的moc。</li>
<li>它没有文件夹，因此moc很重要，类似的它提供了一个专门的Contents页面，相当于文件夹管理。</li>
<li>日志系统和todo系统很完善。logseq自带日志，它就是一个log。Logseq的理念应该是用日志来串联，而不是
把分类的经历消耗在文件夹的分类。当然如何选择是自己的事，我们一样可以手动用文件夹分类储存管理。</li>
<li>Outline大纲模式，在markdown里，每一个block就是一个无序列表格式。</li>
<li>Logseq的同步相对麻烦，得git和Working Copy结合起来。</li>
<li>可以直接接入Zotero的API，这很方便。</li>
</ul>

<p>
总体来说，ob很大，Logseq更小。ob处理大量文字也不会卡，而在Logseq一个块如果包含太多文字会报错无法编辑。Logseq自带的日志系统很好用，开箱即写，用outline提炼出更精简的文字来做思维的串联。
</p>
</div>
</div>

<div id="outline-container-org5ed08e3" class="outline-4">
<h4 id="org5ed08e3">现在的选择</h4>
<div class="outline-text-4" id="text-org5ed08e3">
<p>
<b>做电子笔记，实际上是在做数据储存和数据处理。</b>
</p>

<p>
数据编辑的易用性，和数据检索、数据结构之间的取舍很关键。从这个角度出发，可能随着时间偏移，重心会偏向Logseq和数据结构方面。
</p>

<p>
而ob本身就可以看做是一个Logseq的库和inbox来使用，反过来Logseq也可以包含在ob的文件夹系统里。这完全取决于自身的需求。
</p>

<p>
现在基本上把ob当做一个大的inbox和Markdown文件管理编辑系统，Logseq来做长青笔记和日志。
</p>

<p>
Read Later用Omnivore，剪藏网页，可以自动导入Logseq和ob，roma-highlighter浏览器插件做高亮剪藏。
</p>

<p>
Zotero来阅读PDF和文献，Logseq和ob也是无缝衔接。
</p>

<p>
这里要强烈推荐Omnivore，和一年六七百的Readwise相比，基本功能都有，但它是开源和免费的。
</p>

<p>
最后，几个原则，也是提醒自己：
</p>

<ul class="org-ul">
<li>做笔记是方法，不是目的。</li>
<li>信息很容易被误认为是知识，而做笔记不是汇总信息，是提炼思维，汇总元知识。</li>
</ul>

<p>
没有最好的笔记软件，只有最适合自己的笔记软件。
</p>
</div>
</div>

<div id="outline-container-org1e97333" class="outline-4">
<h4 id="org1e97333">Reference</h4>
<div class="outline-text-4" id="text-org1e97333">
<ul class="org-ul">
<li><a href="https://sspai.com/post/82793">Obsidian技巧：通过多个标签快速定位文件(by TagFolder) - 少数派 (sspai.com)</a></li>
<li><a href="https://mp.weixin.qq.com/s/wWez_Ijq_Dukr-rch4P24g">Heptabase，如果笔记工具公司倒闭了，你的笔记还能接着用吗？</a></li>
<li><a href="https://sspai.com/post/60787">Roam Research 到底好在哪儿？ - 少数派 (sspai.com)</a></li>
<li><a href="https://bytetalk.fm/posts/episode-7">跟 Logseq 的创造者天生聊聊 Logseq 的故事</a></li>
<li><a href="https://www.bilibili.com/video/BV1vM4y1h7H4/?p=44&amp;spm_id_from=pageDriver">Obsidian中的标签，到底该如何使用？（第三集 设计你的标签页）_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1bP411H7rx/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">Obsidian的全局引用你用对了吗？Johnny学Obsidian_哔哩哔哩_bilibili</a></li>
<li><a href="https://pkmer.cn/">PKMer</a></li>
<li><a href="https://sspai.com/post/80042#!">双剑合璧：Obsidian和Logseq联用的一些经验 - 少数派 (sspai.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1pm4y1A79c/?p=3&amp;vd_source=92184533e359726f138fee9650261f0f">03 ios终端(手机和平板)的logseq同步设置_哔哩哔哩_bilibili</a></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org82b5471" class="outline-3">
<h3 id="org82b5471">2024-04-13 神的编辑器</h3>
<div class="outline-text-3" id="text-org82b5471">
</div>
<div id="outline-container-orgae2b1c2" class="outline-4">
<h4 id="orgae2b1c2">Add</h4>
<div class="outline-text-4" id="text-orgae2b1c2">
<p>
开始正式使用 Emacs 了，脱离笔记软件，将做笔记这个事从使用工具记录变成了思维概念上的一种习惯，而不是一个行为。
</p>
</div>
</div>
<div id="outline-container-orgd7d5bb0" class="outline-4">
<h4 id="orgd7d5bb0">做自己的笔记“软件”</h4>
<div class="outline-text-4" id="text-orgd7d5bb0">
<p>
在订阅里看到推荐的这篇文章  <a href="https://wiki.heptabase.com/the-roadmap?lang=zh-Hant">My Vision - The Roadmap | Heptabase Public Wiki</a>，大概讲了一下Heptabase 下一步的Roadmap，还有一些笔记理念上的东西。Heptabase 有所耳闻，因为订阅的价格一直没有去尝试。
如同这个文章里说的：
</p>
<blockquote>
<p>
在<a href="https://wiki.heptabase.com/the-knowledge-lifecycle?lang=zh-Hant"> <b>上一篇文章的結尾</b> </a>，我將 Heptabase 的願景描繪如下：
</p>

<p>
<b>總結來說，在「知識的生命週期」這個維度上，我們希望能透過 [[<a href="https://heptabase.com/">https://heptabase.com/</a>][ *Heptabase</b> ]] 的工具來幫助全世界的知識工作者打通「探索 → 收集 → 思考 → 創作 → 分享」的知識生命週期，讓資訊具備原生的互用性、讓想法的脈絡可被追蹤、讓集體知識的創建更為容易，進而演化出一個脈絡化的知識網路。
</p>
</blockquote>

<p>
一个笔记软件的生命力，我认为最重要的是：产品设计理念，社区活跃度。obsidian的设计理念，我记得ob的作者曾经说过，他的初衷就是做一个可以一直用下去不用换的笔记软件。放在现在来说，已经不太能打了，但是社区、插件的活跃也一定会让ob延续下去。科学的知识、信息处理理念加上新的技术和设计，会催生出一个又一个的笔记、知识软件，Roam Research、Notion、obsidian、Logseq、Heptabase、craft、思源笔记、甚至飞书文档等等。一个可以一直用下去的笔记软件一定不是最好的，也不会是最适合自己的，如果是那样的话，说明自己的需求一直没有提升。
</p>

<p>
从txt，到word，exel，各种电脑、手机里的备忘录，这些现代化的文本、文档记录软件、工具，都为了一件事：提升信息、知识记录、处理的效率。做笔记也好，笔记软件也好，都是学习的一部分，知识的一部分，是思维、知识的呈现。没有最好的笔记软件，只有不断迭代的学习方法，最本末倒置的事情就是把笔记和学习绑定在了学习工具上。
</p>

<p>
从折腾ob开始，就一直想找到一个自由度更高，更科学的笔记体系和软件，偶然刷到这篇文章<a href="https://sspai.com/post/87028">构建可持续发展的个人工作流 01：认识篇</a>，让我想到了一些pkm和笔记软件的灵感
</p>

<p>
这次的结论是：最适合自己的笔记软件，就是自己做的。从折腾obsidian 到 PKM 和 Logseq，这一次的目标：回归数据本身，回归思维本身，回归知识本身。
</p>

<p>
现在流行且科学有效的笔记软件基本基于 Zettelkasten 卡片盒笔记、双链、卡片式笔记、数据库检索，再就是wiki类知识分享这几个底层逻辑。而知识管理、学习、信息处理从来不是被笔记、笔记软件主导的，是独立的思维和方法。现在LLM技术的突破，各种GPT的出现，AI革命必然会让知识处理的效率指数提升，代码、计算机技术的壁垒也随之被打破了。而知识、信息处理的效率一定和认知提升的效率正相关，从竹简、简牍到印刷、打字机，再到互联网、电脑，现在是AI。人类知识认知推动着科学、技术，技术也同样革命着认知。
</p>

<p>
因此，何必再依赖于市面上的笔记软件，自己做一个就好。一个满足双链、卡片、数据库、标签检索的数据处理工具，就是做电子数据笔记最本质的需求。
</p>

<p>
于是，正式进军定制个人硅基第二大脑的第一步，Emacs。
</p>
</div>
</div>
<div id="outline-container-org6b806c6" class="outline-4">
<h4 id="org6b806c6">Emacs</h4>
<div class="outline-text-4" id="text-org6b806c6">
<p>
回归数据本身，那第一件事就是找到笔和纸，也就是编辑器。
</p>

<p>
网上查了查，有这么一个比喻：Emacs是神的编辑器，而Vim是编辑器之神。
</p>

<p>
这两个都没用过，简单体验了spacemasc、doomemacs、vim、neovim、LunarVim、spacevim之后，对我现在的认知而言，Vim更像是一个api，一套文本编辑处理的方法，代码编辑器的极致，而Emacs是一个基于ELisp的系统。
</p>

<p>
用编辑器构建系统，还是从系统构建编辑器，我现在选择了后者，等编程能力提升了或许会再来用Vim。
</p>

<p>
doomemacs的界面更符合我的审美，插件管理起来也挺方便，就先用这个了。总之先迈出了定制化硅基第二大脑的第一步，加上乌鸦logo和Lust for life 的底标🤣。
</p>


<figure id="org602ca9e">
<img src="https://s2.loli.net/2024/04/08/7suBLpiKVqDz25a.png" class="img" width="50%" height="50%">

</figure>

<p>
<a href="https://www.vandee.art/2023-09-18-read-or-listen.html">to understand something, you must actively engage with it</a>，我认为学习一个新东西比较有效的方式，直接上手操作（本能的反应更能检验对陌生知识的反馈情况），然后分享出来，一个人学还是慢一些，三人行必有大佬
</p>

<p>
关于Emacs的学习，后面都会放到这个GitHub仓库 <a href="https://github.com/VandeeFeng/doomemacs">doomemacs</a>。
</p>

<p>
Logseq现在的pkm体系用的还是挺顺手，效率也挺高，不会弃用，现阶段的目标是把Emacs的org笔记和Logseq结合起来，一起作为笔和纸。doomemacs，evil模式绑定Vim键位，代码编辑和窗口的切换，效率是真的高。没用过原生Emacs不用习惯Emacs的键位倒成了一个优势。
</p>

<p>
剩下的就是思维逻辑的提升和具象化到编程里了，先把Lisp学一学，再从Rust、Go、Python、C++里选一个（搞的跟都会了一样🤣）。
</p>

<p>
Roam Research、Notion、Logseq、Heptabase的笔记设计理念都还挺不错，先copy一下，加入到我还没开始的苏格拉底·贾维斯逻辑小助手项目。
</p>

<p>
Just learn, learn, and learn。
</p>
<blockquote>
<p>
进化论中有一条定律叫 <b>“多洛不可逆定律”</b> ，说的是一个物种一旦失去了某种特征，就永远不会再获得这种特征，因为最初赋予它这种特征的路径是如此复杂，以至于无法复制。假设一种动物有角，然后它进化到失去角。它进化到重新长出角的几率为零，因为最初赋予它角的路径是如此复杂&#x2013;在特定的环境和竞争条件下经过数百万年的选择，而这种选择在未来不会重复。你不能把进化特征说成是运气&#x2013;它们是在非常特殊的力量作用下产生的。只是你永远无法依赖这些力量完全按照过去的方式重演。
</p>

<p>
来源：<a href="https://collabfund.com/blog/lucky-vs-repeatable/">Lucky vs. Repeatable · Collab Fund</a>
</p>
</blockquote>

<p>
AI一定会让人变懒，而正是因为人懒所以发展了技术、AI和各种提升效率的工具以让我们能有更多时间和精力满足反效率（需要大量时间和经历成效比较慢的事）的爱好和精神需求，不管AI会如何影响人类，不能丢掉的一定包括艺术、学习、爱和想象力。
</p>
</div>
</div>
</div>

<div id="outline-container-orge866c00" class="outline-3">
<h3 id="orge866c00">2024-05-13 脱离笔记软件，CLI笔记工具—nb</h3>
<div class="outline-text-3" id="text-orge866c00">
</div>
<div id="outline-container-orga51a0f7" class="outline-4">
<h4 id="orga51a0f7">Add</h4>
<div class="outline-text-4" id="text-orga51a0f7">
<p>
从这里开始梳理出了自己 PKM 的原则。也从 nb 了解到了 CLI 笔记工具，开始琢磨用 bash 脚本做笔记了。
</p>

<p>
把人自身的思维看作一个向量，它有自己的方向和属性，在大脑里让它们串联起来的是一个个神经元和突触，在笔记里就是双链和索引。因此，要在PKM里最大程度复现大脑思维的流动，我认为，最自然的方式就是让笔记向量与思维最自然的习惯同步。
</p>
</div>
</div>
<div id="outline-container-org36721e7" class="outline-4">
<h4 id="org36721e7">PKM去形式化</h4>
<div class="outline-text-4" id="text-org36721e7">
<p>
书接上回，现在的PKM第一原则是：数据的去形式化和通用性。只基于md文档的通用基础语法，其他功能以不污染文档内容的方式来实现。
</p>

<p>
为了实现这个目标，写了一些简单的bash脚本模板生成md，还有Emacs的Lisp函数做tag检索、文本查询，并将本地PKM-base库(最原子化的常青笔记)和Ollama对接（暂时用的是<a href="https://github.com/reorproject/reor">Reor</a>）做一些思维扩展。卡在了md文档的全局引用和相对链接转换。
</p>

<p>
正愁着呢，在Github里无意中发现了一个宝藏！<a href="https://github.com/xwmx/nb">nb</a>，牛逼！
</p>
</div>
</div>

<div id="outline-container-orgf55d707" class="outline-4">
<h4 id="orgf55d707">nb</h4>
<div class="outline-text-4" id="text-orgf55d707">
<p>
我愿称其为最强CLI笔记工具！完美匹配我现在的所有需求，设计思路也和我不谋而合，还支持用Emacs做编辑器。虽然Emacs也可以通过自定义函数和插件来复现这些功能，但既然有现成的，就先copy吧🤣。
</p>

<p>
果然你能想到的99%都已经有人完成了101%。
</p>


<figure id="org13bf0b1">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/PixPin_2024-05-13_09-54-33.png" class="img" width="50%" height="50%">

</figure>

<p>
macOS /Homebrew安装， <code>brew install xwmx/taps/nb</code> 。nb也提供自己的shell，md预览可通过<a href="https://xwmx.github.io/nb/#-browsing">GUI web browsers</a>，经常写md的基本也不需要预览。命令基本都是大白话，不需要刻意记忆，还提供<a href="https://xwmx.github.io/nb/#shortcut-aliases">Shortcut Aliases</a>自定义命令 。nb不是一个笔记软件，是一个CLI工具。
</p>
</div>
</div>

<div id="outline-container-org2b37a78" class="outline-4">
<h4 id="org2b37a78">去形式化之后的PKM</h4>
<div class="outline-text-4" id="text-org2b37a78">
<p>
bash脚本+nb实现，模板创建Daily和note，GUI web 预览：
</p>


<figure id="org4ec175d">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/nbnb.gif" class="img" width="50%" height="50%">

</figure>

<p>
本地文档的双链、全局引用、tag、检索、查询、同步，这些关键功能现在都可以实现了，PKM脱离笔记软件初步达成。由于之前ob和Logseq联用保留了文件夹结构，现在还是沿用ACCESS结构换成nb和Emacs来管理，nb提供全局的检索和双链，Emacs做统筹（org-mode还在犹豫），部署就先用 <a href="https://quartz.jzhao.xyz/">Quartz v4.2.3</a>  ，暂时当作我的<a href="https://dg.vandee.art">数字花园</a>，欢迎来玩！Blog练笔，Clip剪藏，Garden做wiki。目前还是不太想all in one ，以后可能会做个后端数据库。
</p>

<p>
至于Logseq和 ob以及其他笔记软件里的通过块ID来引用块、嵌入块，查询语句，通过css和js实现的排版样式等，这些通过非md标准语法实现的功能，全部舍弃。尽最大可能减少笔记元数据转化为其他形式的成本，它应该可以独立于笔记软件又具备优秀的兼容性。
</p>

<p>
这些在各种笔记软件里实现的个性化功能，比如白板、卡片、思维导图，当然提升了信息处理的效率，但最核心的还是双链，以及思维的同步率。
</p>

<p>
把人自身的思维看作一个向量，它有自己的方向和属性，在大脑里让它们串联起来的是一个个神经元和突触，在笔记里就是双链和索引。因此，要在PKM里最大程度复现大脑思维的流动，我认为，最自然的方式就是让笔记向量与思维最自然的习惯同步。
</p>

<p>
例如我们的语言系统，我们不会在用母语表达一些简单想法的时候还费力思考，笔记也应该是一样。当我大脑里现在想到一个概念，需要在笔记里找到相应的内容，脱口而出时，就应该只需要按照思维本来的习惯检索到笔记。
</p>

<p>
比如我现在想表达：王小波牛逼！在PKM里我只需要输入王小波牛逼这个一模一样的内容，和这个向量相关的信息都会以双链链接起来，而不需要我再按照tag做二级查询，通过属性反过来找概念。这些tag标注的是向量的属性以便做复杂的分类和列举，例如《黄金时代》，文学，王小波，这些在大脑里自然联系起来的概念，不应该在笔记查询的时候再做重复的检索，我不需要反过来通过查询文学、王小波，来找到《黄金时代》，然后再找到我想在书里表达的概念。而是自然的通过和王小波牛逼这个概念同步联系起来的反链呈现。这就要求原子笔记里的概念有极高的抽象程度以及自身思维习惯同步率。
</p>

<p>
解决了这个问题，我觉得无论笔记形式怎么变，用什么笔记软件，思维向量的生命周期就可以在这些形式里延长。
</p>

<p>
到现在，我更加确定，下一个笔记软件何必是笔记软件。
</p>

<p>
至于为什么一直折腾做笔记这件事，因为思维的具象化一直是这几年我着重思考的问题，平常思考的哲学和艺术都是它的分支，它们都是思维抽象而成的具象表达。思维呈现的效果和处理的效率都和做笔记正相关，也同样作用于认知。现在正处于量变的积累过程，效率就更加重要了。现在的PKM可以让我的思维向量更好的碰撞，因为高度同步于我自身的思维，它们在数据里延续着生命，自发地碰撞出思维的电子火花。这一点经过一年的折腾已经得到验证。
</p>

<p>
之前说要通过这些具象化的思维材料复刻一个自己的数字人，可得捏的像一些。
</p>
</div>
</div>
<div id="outline-container-orgb250bed" class="outline-4">
<h4 id="orgb250bed">Logseq适配Quartz</h4>
<div class="outline-text-4" id="text-orgb250bed">
<p>
这次在logseq格式转化的时候，几个问题小折腾了一会。
</p>

<p>
七拼八凑了一下，下面是用GPT缝合的，Logseq重新排版批量输出为md格式的Python代码。这段代码会把Logseq文档头部的 <code>key:: value</code> 格式化为标准的yaml格式并去除标题前面的无序列表符号。Logseq本身可以输出text但排版不是很完美，也不方便。Logseq和ob联用的兄弟们应该用得上。
</p>

<div class="org-src-container">
<pre class="src src-python"># -*- coding = utf-8 -*-
# @Project : Logseq标题优化
# @File : Logseq格式优化.py
# @time : 2024/05/11
# @Author : Vandee
# @Description ：适合yaml为Logseq的::样式
import re
import os
# Frontmatter consts for start and end of Frontmatter YAML heading in Markdown
FRONTMATTER_START_STR = "---\n"
FRONTMATTER_END_STR = "---\n\n"
FRONTMATTER_PARAM_NAME_REGEXP: str = r"[A-Za-z0-9-_.]+::\s"
LOGSEQ_LIST_REGEXP: str = r"^[\s\t]*- "
def load_logseq_sanitized(file_path: str, encoding: str = "utf-8") -> list[str]:
    with open(file_path, "r", encoding=encoding) as f:
        lines: list[str] = f.readlines()
    return_lines: list[str] = []
    for line in lines:
        # we skip empty lines
        if line in ("\n", "- \n", "-\n", "- \n"):
            continue
        # we remove "- " or "  " from the beginning of line as
        # it's Logseq specific "everyghing is a list" approach
        if line.startswith(("- ", "  ")):
            line = line[2:]
        # we remove first occurance of tab character ("\\t") from a line as
        # it's indicating list item
        if line.startswith("\t"):
            line = line.replace("\t", "", 1)
        return_lines.append(line)
    return return_lines
def logseq2markdown(logseq_lines: list[str]) -> str:
    """Goes through list of Logseq sanitized lines (provided by `load_logseq_sanitized()`) and
    translates them to proper Markdown and Frontmatter.
    Args:
        logseq_lines (list[str]): List of sanitized lines from Logseq file loader
    Returns:
        str: String containing Frontmatter header in YML format followed by proper Markdown.
    """
    mk_content: list[str] = []
    # Using dict here as we don't want to have duplicate parameter names in Frontmatter
    # (each should have unique indentifier).
    mk_frontmatter: dict[str, str] = {}
    param_regex = re.compile(FRONTMATTER_PARAM_NAME_REGEXP)
    logseq_list_regexp = re.compile(LOGSEQ_LIST_REGEXP)
    for line in logseq_lines:
        params_result = param_regex.findall(line)
        logseq_list_result = logseq_list_regexp.findall(line)
        # if line containts "logseq.order-list-type:: number" it should be
        # numbered list and this line should be ommited
        if -1 != line.find("logseq.order-list-type:: number"):
            line = mk_content.pop()
            line = line.lstrip("\n")
            line = line.replace("- ", "1. ", 1)
            line = line.replace("\t", "    ")
            mk_content.append(line)
        # if line containts "logseq.order-list-type:: bulllet" it should be
        # bullet point list and this line should be ommited
        elif -1 != line.find("logseq.order-list-type:: bullet"):
            line = mk_content.pop()
            line = line.lstrip("\n")
            line = line.replace("- ", "* ", 1)
            line = line.replace("\t", "    ")
            mk_content.append(line)
        # if line is proper unordered list we parse it as such
        elif logseq_list_result:
            line = line.lstrip("\n")
            line = line.replace("\t", "    ")
            mk_content.append(line)
        # if line starts with "# " (meaning h1 in html) we parse it as Frontmatter "title:" param
        elif line.startswith("# "):
            mk_frontmatter["title"] = '"' + line[2:].strip() + '"'
        # if line doesn't have any Logseq-specific parameters like numbered or bullet list in it
        # and has Frontmatter param format we add it to Frontmatter header
        elif params_result:
            mk_frontmatter[params_result[0][0:-3]] = line[len(params_result[0]) :]
        # otherwise we add it to content as any other Markdown element
        else:
            mk_content.append("\n" + line)
    return_string: str = ""
    if mk_frontmatter:
        return_string = (
            FRONTMATTER_START_STR
            + "\n".join(
                [
                    f"{fm_item[0]}: {fm_item[1].strip()}"
                    for fm_item in list(mk_frontmatter.items())
                ]
            )
            + "\n"
            + FRONTMATTER_END_STR
        )
    return return_string + "".join(mk_content)
def process_folder(input_folder: str, output_folder: str):
    """处理输入文件夹中的文件，并将结果导出到输出文件夹。
    Args:
        input_folder (str): 输入文件夹路径。
        output_folder (str): 输出文件夹路径。
    """
    # 确保输出文件夹存在，如果不存在则创建
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    # 遍历输入文件夹中的每个文件
    for file_name in os.listdir(input_folder):
        if file_name.endswith(".md"):  # 仅处理以 .md 结尾的文件
            input_file_path = os.path.join(input_folder, file_name)
            output_file_path = os.path.join(output_folder, file_name)
            # 加载、处理和导出文件
            logseq_lines = load_logseq_sanitized(file_path=input_file_path)
            markdown_content = logseq2markdown(logseq_lines)
            # 将转换后的内容写入到输出文件中
            with open(output_file_path, "w", encoding="utf-8") as f:
                f.write(markdown_content)
            print(f"文件 '{file_name}' 已处理并导出到 '{output_folder}'")
# 主程序中使用命令行提示用户输入文件夹路径
if __name__ == "__main__":
    # 提示用户输入输入文件夹路径
    input_folder = input("请输入输入文件夹路径：")
    # 提示用户输入输出文件夹路径
    output_folder = input("请输入输出文件夹路径：")
    process_folder(input_folder, output_folder)</pre>
</div>

<p>
处理之后，Logseq库接近700个文档99%的排版都没问题，部分三级列表以上的复杂排版，列表会多出一些空行或层级错位，Logseq复杂排版的换行和简单的 <code>\r\n</code> 还是有区别。可能也有CRLF和LF的问题，mac和win互相git，脚本里用的是LF，如果你是win最好还是 <code>\r\n</code> 。Quartz在转换md到html的时候换行逻辑不一样，在Typora里看是有换行的，但是Quartz部署成网页之后部分换行就没了。
</p>

<p>
yaml区域的逻辑可以再用yaml库优化，后面再完善这个格式化脚本来把任意其他排版统一成我的标准样式。
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgccdc4c5" class="outline-2">
<h2 id="orgccdc4c5">Emacs 阶段</h2>
<div class="outline-text-2" id="text-orgccdc4c5">
<p>
中间使用了 2 个月的 Nvim，还是放不下 Emacs。随后遇到了 <a href="https://www.vandee.art/2024-08-10-thinking-about-structured-data-in-notes.html">Tiddlywiki</a> ,然后就到了现在重度使用 Emacs 了：<a href="https://www.vandee.art/2024-05-22-org-pkm-manual.html">PKM（个人知识管理）构建手册 - Emacs</a> ， <a href="https://www.vandee.art/2024-10-24-my-first-org-blog.html">我的第一篇 org 博客</a>。
</p>

<p>
脱离笔记软件并不是脱离某个具体的体系和产品，而是将这些体系变成自己的，进而脱离笔记软件和传统笔记方法的固定思维。现在在 Emacs 里，我依然会使用 bash 脚本来完成部分零散的笔记，例如结合我的 TiddlyWiki，快速构建 Markdown 笔记。
</p>

<p>
无论是 Emacs 还是 Nvim，它们都可以用 bash 脚本作为依赖最低的方法扩展自己记录笔记的方式。Nvim 和 Emacs 我真的都很喜欢，但是 org-mode 给我的编辑体验是其他任何其他纯文本形式替代不了的。
</p>

<p>
Vim 编辑模式、PKM方法才是那支笔，它们把笔记数据、操作系统链接起来，你可以在任何环境使用这只笔。忘掉所有招式就练成太极了。
</p>
</div>
</div>
<div id="outline-container-orgbb98d93" class="outline-2">
<h2 id="orgbb98d93">ChangeLog</h2>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-blog.html">Blog</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Blog]]></category>
  <link>https://www.vandee.art/blog/2024-11-01-my-pkm-building-logs.html</link>
  <guid>https://www.vandee.art/blog/2024-11-01-my-pkm-building-logs.html</guid>
  <pubDate>Fri, 01 Nov 2024 12:45:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[还是入坑了 Memos]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3c4d151">起因</a></li>
<li><a href="#org506a6f1">Memos</a></li>
<li><a href="#org6d53c5c">SSL</a></li>
<li><a href="#orgf61a9f5">Memos 自定义</a>
<ul>
<li><a href="#orgae89cc4">自定义 css 和 JavaScript</a></li>
<li><a href="#orgdd7f9fd">Memos.top</a></li>
</ul>
</li>
<li><a href="#orgc671c90">小结</a></li>
</ul>
</div>
</nav>
<p>
记录一下 VPS 配置 Memos 和 SSL 证书的配置。当作朋友圈和备忘录，Memos 还是值得玩玩的。
</p>

<div id="outline-container-org3c4d151" class="outline-2">
<h2 id="org3c4d151">起因</h2>
<div class="outline-text-2" id="text-org3c4d151">
<p>
前几天，用 <a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a> 在 Vercel 上部署着玩了一下，用来做极简朋友圈其实效果真的很不错了，但有个问题就是备份和导出。由于这个项目是利用 Telegram Channel 的发布来同步到页面，Telegram 的数据管理就有点麻烦了。
</p>

<p>
之前在 Memos 大火的时候就一直想玩玩，但是没有服务器。前段时间不想再尝试 Memos 的原因是看到了这两篇文章：<a href="https://laozhang.org/archives/3638.html">Memos完美降级到Memos0.18.2版 | 老张博客</a> ， <a href="https://www.skyue.com/24061300.html">从弃用Memos说说开源项目 - 拾月</a> 。
</p>

<p>
但是这个项目确实很优秀，而其是开源的，以后有闲工夫了，还可以自己改。作为 flomo 的开源镜像，Memos 的功能性是毋庸置疑的，简洁舒适的界面，可备份的数据库，支持 MD 语法、标签、搜索等等， 通过 API 可以集成到其他项目。
</p>

<p>
再一个，VPS 每个月 4T 的流量还是要用一用。顺便再熟悉熟悉 Linux 和 SSH，还有 GO。
</p>
</div>
</div>

<div id="outline-container-org506a6f1" class="outline-2">
<h2 id="org506a6f1">Memos</h2>
<div class="outline-text-2" id="text-org506a6f1">
<p>
几个版本的主要特色：
</p>
<ul class="org-ul">
<li>0.18.2: 最简洁最稳定的版本，首次加入了 timeline 。</li>
<li>0.19.1 增加一键导出所有 memos 到 markdown，侧边栏可折叠，但 bug 比较多。</li>
<li>0.20.1 修复一系列 bugs，在 explore 页面内容太长的会折叠，点击 show more 会跳转到这个单独的 memo 页面。</li>
<li>0.22.X 开始，可以同时过滤多个标签，并显示每个标签下具体的 memo 数量，又移除了折叠。0.22.4 移除了 timeline，替换成了日历。最新的0.22.5 版本取消了一键导出。</li>
</ul>

<p>
对于我这个新用户，没有之前看到的数据迁移和 API 变更带来的困扰，感觉 Memos 还是挺好用的。版本便更之前一定要做好数据库备份。
</p>

<p>
<code>docker-compose.yml</code>:
</p>

<div class="org-src-container">
<pre class="src src-yaml">version: "3.0"
services:
  memos:
    image: neosmemo/memos:0.18.0 #版本 tag
    restart: always
    depends_on:
      - db
    ports:
      - 5230:5230
    environment:
      - MEMOS_DRIVER=postgres
      - MEMOS_DSN=user=memos password=secret dbname=memosdb host=db sslmode=disable
  db:
    image: postgres:16.1
    restart: unless-stopped
    volumes:
      - "./database:/var/lib/postgresql/data/"
    environment:
      POSTGRES_USER: memos
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: memosdb</pre>
</div>

<p>
ip + 5230 就可以访问了，到这里都很惬意，Nginx 的配置才是让我头痛的开始。由于我还部署了 WeWeRSS，按照官方文档的 Nginx 配置了之后，占用了我的 80 端口，在配置 Memos 的时候一度不知道为什么域名不能直接访问。兜了一大圈，终于发现问题出现端口在这里，把 WeWeRSS 的端口还有 Nginx 的默认欢迎页面端口释放之后，就可以直接利用 Nginx 的反代用域名访问 docker 部署在端口上的项目了。
</p>

<p>
Nginx 命令：
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo systemctl restart nginx # 修改了配置文件之后重启服务
sudo vim /etc/nginx/sites-available/conf_name  # 设置配置文件
sudo ln -s /etc/nginx/sites-available/conf_name /etc/nginx/sites-enabled/ # 设置配置文件可用
sudo rm /etc/nginx/sites-enabled/conf_name # 移除配置
sudo nginx -t # 检查配置是否有问题</pre>
</div>
</div>
</div>

<div id="outline-container-org6d53c5c" class="outline-2">
<h2 id="org6d53c5c">SSL</h2>
<div class="outline-text-2" id="text-org6d53c5c">
<p>
在网上找了一大圈，发现一个最简单也最符合现在需求的：<a href="https://certd.docmirror.cn/">Certd</a>，可以在 VPS 上用 docker 部署，一键生成 SSL 证书，还可以定时自动化续签。
</p>

<div class="org-src-container">
<pre class="src src-bash">
# 随便创建一个目录
mkdir certd
# 进入目录
cd certd
# 下载docker-compose.yaml文件，或者手动下载放到certd目录下
wget https://gitee.com/certd/certd/raw/v2/docker/run/docker-compose.yaml
# 可以根据需要修改里面的配置
# 1.修改镜像版本号【可选】
# 2.配置数据保存路径【可选】
# 3.修改端口号【可选】
vi docker-compose.yaml # 【可选】
# 启动certd
docker compose up -d
# 访问
http://your_server_ip:7001
https://your_server_ip:7002
默认账号密码：admin/123456</pre>
</div>

<p>
按照官方文档，五分钟就生成了 SSL 证书，然后 copy 到 VPS 里，在 Nginx 设置 <code>ssl_certificate</code> 的文件路径。
</p>

<p>
Nginx 的配置：
</p>
<div class="org-src-container">
<pre class="src src-nil">server {
  listen 80;
  server_name your_domain_or_server;
  # 在这里重定向HTTP到HTTPS
  return 301 https://$host$request_uri;
}
server {
  listen 443 ssl;
  server_name your_domain_or_server;
  ssl_certificate /your/path/to/fullchain.pem;  # 替换为你的证书路径
  ssl_certificate_key /your/path/to/privkey.pem;  # 替换为你的私钥路径
  location / {
    proxy_pass http://127.0.0.1:5230;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Accept-Encoding gzip;
    proxy_buffering off;
    proxy_cache off;
    send_timeout 300;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
  }
}</pre>
</div>

<p>
后来发现更直接的是直接在 VPS 里使用 certbot。
</p>

<div class="org-src-container">
<pre class="src src-bash"># 安装
sudo apt update
sudo apt install certbot python3-certbot-nginx
# 申请证书
sudo certbot --nginx -d app1.example.com -d app2.example.com
# --nginx：使用 Nginx 插件，Certbot 会自动修改 Nginx 配置。
# -d：指定你要申请证书的域名，可以一次性为多个域名申请。
# Certbot 会询问一些基本问题：输入电子邮件地址（用于接收证书到期提醒）。同意服务条款（输入 A 同意）。是否愿意 共享你的邮箱 给 EFF（自愿）。询问你是否要 将 HTTP 重定向为 HTTPS：选择 2 将所有 HTTP 请求重定向为 HTTPS（推荐）。
# 自动续签
sudo certbot renew --dry-run</pre>
</div>

<p>
到这里，我终于可以用 https + 域名来访问 Memos 了，但这还不够好玩，不够自定义。
</p>
</div>
</div>

<div id="outline-container-orgf61a9f5" class="outline-2">
<h2 id="orgf61a9f5">Memos 自定义</h2>
<div class="outline-text-2" id="text-orgf61a9f5">
</div>
<div id="outline-container-orgae89cc4" class="outline-3">
<h3 id="orgae89cc4">自定义 css 和 JavaScript</h3>
<div class="outline-text-3" id="text-orgae89cc4">
<p>
适用 0.20.X 以上版本
</p>

<div class="org-src-container">
<pre class="src src-nil"># CSS 部分
/* 隐藏 通知 选项卡 */
#header-inbox {
  display: none;
}
/* 隐藏统计计数器容器 */
.w-auto.border.dark\:border-zinc-800.pl-1.pr-1\.5.rounded-md.flex.justify-between.items-center {
  display: none;
}</pre>
</div>
</div>
</div>

<div id="outline-container-orgdd7f9fd" class="outline-3">
<h3 id="orgdd7f9fd">Memos.top</h3>
<div class="outline-text-3" id="text-orgdd7f9fd">
<p>
<a href="https://github.com/eallion/memos.top">eallion/memos.top</a> 这个项目利用 Memos 的 API 获取数据，生成静态页面。设置很简单，作者默认的设计也挺简洁的，CSS 可以自己修改。
</p>

<p>
<a href="https://blog.memos.ee/category/memos/">分类 Memos 下的文章 - Memos | 一个开源的碎片化笔记工具的不完全指南</a> 顺便找到了作者的一个网站。
</p>

<p>
到这里，饶了一大圈又回到了用 <a href="https://github.com/ccbikai/BroadcastChannel">ccbikai/BroadcastChannel</a> 5 分钟部署的样子🤣。
</p>

<p>
最后放图：
</p>


<figure id="orgc7201ed">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/memos.png" class="img" width="60%" height="60%">

</figure>


<figure id="orge9dc90e">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/memo-web.png" class="img" width="60%" height="60%">

</figure>

<p>
Memos 的 0.22.4 版本在 explore 页面支持搜索和标签统计，Memos.top 适合从 API 从头设计自己的页面。不想花那么多功夫，把 Memos 的页面保存到 HTML 文件，让 Cursor 随便改了改 CSS。
</p>
</div>
</div>
</div>

<div id="outline-container-orgc671c90" class="outline-2">
<h2 id="orgc671c90">小结</h2>
<div class="outline-text-2" id="text-orgc671c90">
<p>
记录是存在的一种最简单的证明，某种意义上，如果在一个体系或者规则里没有留下痕迹，那么就是不存在的。历史是过往，更是现时的延展，所有的过往，都构成了自己此刻的一部分。一个没有历史的国家也很难有未来。
</p>

<blockquote>
<p>
除去用于维生所需，人每天还有大量能量剩余，有些人多到会溢出，必须加以消磨。有人因此思考自身处境，就有了宗教和艺术。有人因此考虑世界和存在，就有了哲学和科学。有人因此觉察到匆匆的时间之流，意识到自己只是一个个连续的此时此刻在不断流逝，因而想要抓住永恒，于是有了形形色色的创造物。一切都是易逝的，唯有回忆留存，创造物可以记录瞬间，可以唤起回忆，因此它是永恒的表征。溢出的能量让人去创造。而创造就是模仿。
</p>

<p>
通过模仿实际存在，模仿现实世界，一张画，一座雕塑，都可以对抗这种无尽的消逝。很多年前的某个下午早已过去，早已消逝，早已遗忘，但是通过人为创造物，人们又可以回到那个下午，一切如昨。这件事情很重要，人需要不断确定自己处于连续不断的生命之流里，需要确认自己是一种连续的存在，方法就是在回忆中流畅地沿着时间线回溯到任意一点。而每一点都是曾经的此时此刻，所有的此时此刻加在一起，就是自己存在的证据。
</p>

<p>
Source：  <a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>
</p>
</blockquote>

<p>
我现在的 PKM 体系大头还是在 Wiki，是迭代的原子笔记。Memos 记录闪念，Clip 备份有记录价值的文章。一直考虑过把他们都合在一起，但是 iPhone is iPhone，iPad is iPad，什么都有就等于什么都没有了。
</p>

<p>
<a href="https://wiki.vandee.art/#%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E5%B0%B1%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%EF%BC%8C%E8%80%8C%E8%AE%B0%E5%BD%95%E6%9C%AC%E8%BA%AB%E5%B7%B2%E7%BB%8F%E6%98%AF%E4%B8%80%E7%A7%8D%E5%8F%8D%E6%8A%97">没有记录就没有发生，而记录本身已经是一种反抗</a> 。Internet Archive 好像还在被围攻🤣，Z-library 也是劫后余生。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-vps.html">VPS</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[VPS]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2024-10-28-memos-and-ssl-config.html</link>
  <guid>https://www.vandee.art/blog/2024-10-28-memos-and-ssl-config.html</guid>
  <pubDate>Mon, 28 Oct 2024 02:39:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[我的第一篇 org 博客]]></title>
  <description><![CDATA[

<div id="outline-container-org7061114" class="outline-2">
<h2 id="org7061114">一</h2>
<div class="outline-text-2" id="text-org7061114">
<p>
从 Jekyll 到 Hexo，再到 Hugo，已经忘记了为什么开始写博客了。
</p>

<p>
随着对 Emacs 的使用，开始理解为什么之前看到有人用 Emacs 记录了自己的一生，org-mode 太好用了。
</p>

<p>
我也不是一个前端程序员，对前端的设计兴趣也不大，也不需要一个炫技的页面来展示。一直在说回归本质，stay simple，在博客这点上，我就一直弄的越来越复杂。
</p>

<p>
这个博客回归网页最基础的框架，只有 HTML，CSS，搜索是 JavaScript，然后就没有其他了。
</p>

<p>
形式和内容一直是分不开的，但形式对我来说早就变得越来越不重要。我不敢说自己现在已经到了一个什么特别的境界，但每天我都能感受到我和自然界，万物之间的交融越来越自然了。
</p>

<p>
这篇的所有文字都是在 Emacs 里用 org-mode 写的。
</p>


<figure id="orgd267fad">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-blog.png" alt="org-blog" class="img" width="50%" height="50%">

</figure>
</div>
</div>

<div id="outline-container-org86c2bcd" class="outline-2">
<h2 id="org86c2bcd">二</h2>
<div class="outline-text-2" id="text-org86c2bcd">
<p>
无意中发现了这个： <a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> ，可以从 org 文档生成 HTML 文件，简化了 org-publish 的流程。
</p>

<p>
然后发现了这个 <a href="https://github.com/chenyo-17/org-static-blog">chenyo-17/org-static-blog: Here hosts my org static blog</a>，CSS 后面再慢慢改吧。
</p>

<p>
之前的博客，还是可以通过：<a href="https://hugoblog-bxc.pages.dev">https://hugoblog-bxc.pages.dev</a> 来访问。
</p>

<p>
新的博客地址还是 <a href="https://www.vandee.art">https://www.vandee.art</a> , 也可以通过 <a href="https://x.vandee.art/blog">https://x.vandee.art/blog</a> 来访问。
</p>

<p>
回顾了一下这几年写的东西，那些记录的点滴穿珠成线，就像在漆黑无边的宇宙里，一个个闪光的思维点按照自然本身的秩序和规律联结在一起，一直延伸到现在。
</p>

<p>
积累和理论在平常可能体现不出区别，但同样的事情在这些的基础之上的表达就是会更准确。就像上面我的那段话，看看有学问的人是怎么表达的：
</p>
<blockquote>
<p>
在远古时期，大脑中所有负责感官的皮质，都跟负责记忆的海马体直接相连。但是随着人类进化，大脑皮质不断折叠，复杂化，其他感觉皮质跟海马体的路径被拉长了，只有一种感官始终保持不变。哪种感官呢？答案是：嗅觉。
</p>

<p>
所以，从某种程度来说，嗅觉跟记忆的联系是最为密切的。你一定有过这种经历：闻到某种气味，突然像打开了一道开关，大脑开始回放起一系列对应的画面，纤毫毕现 —— 这就是嗅觉的力量。
</p>

<p>
最经典的例子，就是普鲁斯特在《追忆似水年华》里面提到品尝到童年的小蛋糕时的感受了：
</p>

<p>
即使人亡物毁，久远的往事了无陈迹，唯独气味和滋味虽说更脆弱却更有生命力；虽说更虚幻却更经久不散，更忠贞不矢，它们仍然对依稀往事寄托着回忆、期待和希望，它们以几乎无从辨认的蛛丝马迹，坚强不屈地支撑起整座回忆的巨厦。
</p>

<p>
Source: <a href="https://mp.weixin.qq.com/s/u6_UDiNiu1pct_b3q1np4w">https://mp.weixin.qq.com/s/u6_UDiNiu1pct_b3q1np4w</a>
</p>
</blockquote>

<p>
准备整理整理之前的博客文章，陆续发在新博客里。
</p>

<p>
之前的 markdwon to org 的脚本又派上用场了：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun my-markdown-to-org ()
  (interactive)
  (save-excursion
    ;; 转换Markdown标题为Org-mode标题
    (goto-char (point-min))
    (while (re-search-forward "^\s*\\(#+\\) \\(.*\\)" nil t)
      (let ((level (length (match-string 1)))
            (title1 (match-string 2)))
        (replace-match (concat (make-string level ?*) " " title1)))))
  ;; 转换Markdown链接为Org-mode链接,但是跳过图片链接
  (goto-char (point-min))
  (while (re-search-forward "\\[\\(.*?\\)\\](\\(.*?\\))" nil t)
    (let ((title (match-string 1))
          (url (match-string 2)))
      (unless (and (string-match "\\(jpeg\\|png\\|svg\\)" url)
                   (string-match "https" url))
        (replace-match (format "[[%s][%s]]" url title)))))
  ;; 转换Markdown代码块为Org-mode代码块
  (goto-char (point-min))
  (while (re-search-forward "^```" nil t)
    (if (looking-back "^```")
        (progn
          (replace-match "#+begin_src")
          (re-search-forward "^```" nil t)
          (if (looking-back "^```")
              (replace-match "#+end_src")))))
  ;; 转换Markdown行内代码为Org-mode行内代码，添加空格
  (goto-char (point-min))
  (while (re-search-forward "`\\([^`]+?\\)`" nil t)
    (replace-match (format " ~%s~ " (match-string 1))))
  ;; 转换Markdown强调为Org-mode强调，添加空格
  (goto-char (point-min))
  (while (re-search-forward "\\*\\*\\(.*?\\)\\*\\*" nil t)
    (replace-match (format " *%s* " (match-string 1)))))</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-blog.html">Blog</a> </div>]]></description>
  <category><![CDATA[Blog]]></category>
  <link>https://www.vandee.art/blog/2024-10-24-my-first-org-blog.html</link>
  <guid>https://www.vandee.art/blog/2024-10-24-my-first-org-blog.html</guid>
  <pubDate>Thu, 24 Oct 2024 15:04:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[用 GitHub 仓库做书签和 AI 摘要-流动知识检索]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgdc3d0fe">GitHub 书签</a></li>
<li><a href="#org5fe54cb">从GitHub书签到页面</a></li>
</ul>
</div>
</nav>



<div id="outline-container-orgdc3d0fe" class="outline-2">
<h2 id="orgdc3d0fe">GitHub 书签</h2>
<div class="outline-text-2" id="text-orgdc3d0fe">
<p>
看到了<a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引 - Nekonull's Garden</a>这篇文章，思路很值得借鉴，通过 GitHub Actions 来总结网页文章内容并写入到GitHub仓库里。
</p>

<p>
之前在思考流动知识检索的时候，完全没有想到利用 GitHub Actions来构建 workflow。
</p>

<p>
大致流程是：通过 <a href="https://github.com/osmoscraft/osmosmemo">osmos::memo</a> 书签插件，将网页文章的链接以MD格式保存到GitHub仓库，然后利用 GitHub Actions 读取这些链接用LLM做总结并保存到另一个 bookmark-summary 仓库。
</p>

<p>
作者的主要思路：
</p>

<blockquote>
<p>
为了解决这些问题，我建立了一个新的存储库 <a href="https://github.com/jerrylususu/bookmark-summary">bookmark-summary</a>。这个存储库可以视为现有书签存储库的辅助数据，其中包含了新增书签的 Markdown 格式全文、列表摘要、一句话总结，和现有存储库之间通过 Github Actions 联动。其工作原理如下：
</p>

<ol class="org-ol">
<li>我通过书签插件，在现有的书签存储库中新增了一个条目</li>

<li>代码提交到主干，触发名为 `summarize` 的 Github Actions（<a href="https://github.com/jerrylususu/bookmark-collection/blob/main/.github/workflows/bookmark_summary.yml">yml 工作流文件</a>）</li>

<li><p>
Github Actions 执行，首先 checkout 书签存储库和摘要存储库，然后执行
</p>

<p>
process_changes.py
</p>

<ol class="org-ol">
<li>首先解析书签 README.md 文件，找到最近新增的条目标题和 URL</li>
<li>将 URL 保存到 Wayback Machine</li>
<li>输入 URL，使用 <a href="https://jina.ai/reader/">jina reader</a> API 获取网址的 Markdown 全文，并保存到 `YYYYMM/{title}_raw.md`</li>
<li>输入 URL，使用 LLM 生成列表摘要（prompt 在 `summarize_text` 函数 <a href="https://github.com/jerrylususu/bookmark-summary/blob/main/process_changes.py#L80">link</a>）</li>
<li>输入列表摘要，使用 LLM 生成一句话总结</li>
<li>将列表摘要和一句话总结保存到 `YYYYMM/{title}.md`（<a href="https://github.com/jerrylususu/bookmark-summary/blob/main/202410/2024-10-02-a-local-first-case-study-jakelazaroff.com.md">效果示例</a>）</li>
<li>更新摘要存储库的 README.md，增加到摘要文件的链接</li>
</ol></li>

<li>Github Actions 提交变更到摘要存储库</li>
</ol>
</blockquote>

<p>
我跟着文章跑着试了一下，效果挺好的：
</p>


<figure id="org6cd0445">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/Kapture%202024-10-12%20at%2017.38.32.gif" class="img" width="60%" height="60%">

</figure>

<p>
Github Actions里模型、总结的prompt、输出的格式和方式都可以根据自己的需求修改。
</p>

<p>
有一个小<a href="https://github.com/jerrylususu/bookmark-summary/issues/8">问题</a>正好别人也遇到了，运行 <code>process_changes.py</code> 的时候由于要读取 <code>data.json</code> 文件，而初始文件没有内容，加上一个 <code>{}</code> 空字典就好了。可以在脚本里优化一下这个过程，如果没有 data.json 或者 data.json 文件为空自动写入数据。
</p>

<p>
对我来说，这个保存书签bookmark和总结的workflow特别适合那些不痛不痒的文章，有些亮点但又不那么惊艳，丢掉又有点可惜，或者是纯记录价值的文章，对我特别有价值的都直接记录在我的PKM里了。再一个，备份数据是一个很好的习惯，<a href="https://www.bilibili.com/video/BV1yA4y1U77y/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=337">关键素材被删！找不到素材？影视飓风是如何摆脱丢数据噩梦的</a>:三备二介异地。就是一个数据备份3次，储存在2种介质当中，并且保证有一份完整的数据在异地，可以简称3-2-1原则了。
</p>

<p>
之前尝试过 <a href="https://github.com/ArchiveBox/ArchiveBox">archivebox</a>，就是个可以自己部署的 Internet Archive。开源免费，支持 docker，但这个项目太大了，作者这个轻巧的方案现在正符合我的需求。
</p>

<p>
日常的阅读我现在基本都在 Readwise了，这个 workflow 后面还可以和RAG结合起来，作为我<a href="https://www.vandee.art/posts/2024-06-18-the-freshness-date-of-information/">流动知识的检索</a>的数据库。后面想到什么好点子再融合进来，这个项目是一个很好的思路和模板，感谢作者的分享。
</p>

<p>
我去掉了作者保存到 <a href="https://help.archive.org/help/using-the-wayback-machine/">Wayback Machine</a>（Internet Archive）的这一步，更改了按年份、月份保存文件，下面是修改后 <code>process_changes.py</code> 的完整代码：
</p>

<div class="org-src-container">
<pre class="src src-python">import re
from typing import List, Optional
import requests
import json
from datetime import datetime
from pathlib import Path
from dataclasses import dataclass, asdict
import os
import logging
import time
from functools import wraps
from urllib.parse import quote
# -- configurations begin --
BOOKMARK_COLLECTION_REPO_NAME: str = "bookmark-collection"
BOOKMARK_SUMMARY_REPO_NAME: str = "bookmark-summary"
# -- configurations end --
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
def log_execution_time(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logging.info(f'Entering {func.__name__}')
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        elapsed_time = end_time - start_time
        logging.info(f'Exiting {func.__name__} - Elapsed time: {elapsed_time:.4f} seconds')
        return result
    return wrapper
@dataclass
class SummarizedBookmark:
    year: str
    month: str  # yyyyMM
    title: str
    url: str
    timestamp: int  # unix timestamp
CURRENT_YEAR: str = datetime.now().strftime('%Y')
CURRENT_MONTH: str = datetime.now().strftime('%m')
CURRENT_DATE: str = datetime.now().strftime('%Y-%m-%d')
CURRENT_DATE_AND_TIME: str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
@log_execution_time
def get_text_content(url: str) -> str:
    jina_url: str = f"https://r.jina.ai/{url}"
    response: requests.Response = requests.get(jina_url)
    return response.text
@log_execution_time
def call_openai_api(prompt: str, content: str) -> str:
    model: str = os.environ.get('OPENAI_API_MODEL', 'gpt-4o-mini')
    headers: dict = {
        "Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}",
        "Content-Type": "application/json"
    }
    data: dict = {
        "model": model,
        "messages": [
            {"role": "system", "content": prompt},
            {"role": "user", "content": content}
        ]
    }
    api_endpoint: str = os.environ.get('OPENAI_API_ENDPOINT', 'https://api.openai.com/v1/chat/completions')
    response: requests.Response = requests.post(api_endpoint, headers=headers, data=json.dumps(data))
    return response.json()['choices'][0]['message']['content']
@log_execution_time
def summarize_text(text: str) -> str:
    prompt: str = """
请用markdown列表格式**详细**总结我发送给你的文本。充分合理使用缩进和子列表，如果有需要可以使用多层子列表，或是在子列表中包含多个条目（3个或以上）。在每个总结项开头，用简短的词语描述该项。忽略和文章主体无关的内容（如广告）。无论原文语言为何，总是使用中文进行总结。
"""
    return call_openai_api(prompt, text)
@log_execution_time
def one_sentence_summary(text: str) -> str:
    prompt: str = "以下是对一篇长文的列表形式总结。请基于此输出对该文章的简短总结，长度不超过100个字。总是使用简体中文输出。"
    return call_openai_api(prompt, text)
def slugify(text: str) -> str:
    invalid_fs_chars: str = '/\\:*?"<>|'
    return re.sub(r'[' + re.escape(invalid_fs_chars) + r'\s]+', '-', text.lower()).strip('-')
def get_summary_file_path(title: str, timestamp: int, year: Optional[str] = None, month: Optional[str] = None, in_readme_md: bool = False) -> Path:
    date_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d')
    summary_filename: str = f"{date_str}-{slugify(title)}.md"
    if year is None:
        year = CURRENT_YEAR
    if month is None:
        month = CURRENT_MONTH
    if in_readme_md:
        root: Path = Path(year, month)  # 更新路径为 year/month
    else:
        root: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, year, month)  # 更新路径为 year/month
    return Path(root, summary_filename)
def get_text_content_path(title: str, in_summary_md: bool = False) -> Path:
    text_content_filename: str = f"{CURRENT_DATE}-{slugify(title)}_raw.md"
    root: Path = Path(BOOKMARK_SUMMARY_REPO_NAME, CURRENT_YEAR, CURRENT_MONTH)  # 更新路径为 YEAR/MONTH
    if in_summary_md:
        root = Path(".")
    return Path(root, text_content_filename)
def build_summary_file(title: str, url: str, summary: str, one_sentence: str) -> str:
    return f"""# {title}
- URL: {url}
- Added At: {CURRENT_DATE_AND_TIME}
- [[{get_text_content_path(title, in_summary_md=True][Link To Text]]})
## TL;DR
{one_sentence}
## Summary
{summary}
"""
def build_summary_readme_md(summarized_bookmarks: List[SummarizedBookmark]) -> str:
    initial_prefix: str = """# Bookmark Summary
读取 bookmark-collection 中的书签，使用 jina reader 获取文本内容，然后使用 LLM 总结文本。详细实现请参见 process_changes.py。需要和 bookmark-collection 中的 Github Action 一起使用。
## Summarized Bookmarks
"""
    summary_list: str = ""
    sorted_summarized_bookmarks = sorted(summarized_bookmarks, key=lambda bookmark: bookmark.timestamp, reverse=True)
    for bookmark in sorted_summarized_bookmarks:
        summary_file_path = get_summary_file_path(
            title=bookmark.title,
            timestamp=bookmark.timestamp,
            month=bookmark.month,
            in_readme_md=True
        )
        summary_list += f"- ({datetime.fromtimestamp(bookmark.timestamp).strftime('%Y-%m-%d')}) [[{summary_file_path}][{bookmark.title}]]\n"
    return initial_prefix + summary_list
@log_execution_time
def process_bookmark_file():
# 创建路径为 year/month 的文件夹
    Path(f'{BOOKMARK_SUMMARY_REPO_NAME}/{CURRENT_YEAR}/{CURRENT_MONTH}').mkdir(parents=True, exist_ok=True)
    with open(f'{BOOKMARK_COLLECTION_REPO_NAME}/README.md', 'r', encoding='utf-8') as f:
        bookmark_lines: List[str] = f.readlines()
    with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/data.json', 'r', encoding='utf-8') as f:
        summarized_bookmark_dicts = json.load(f)
        summarized_bookmarks = [SummarizedBookmark(**bookmark) for bookmark in summarized_bookmark_dicts]
    summarized_urls = set([bookmark.url for bookmark in summarized_bookmarks])
    title: Optional[str] = None
    url: Optional[str] = None
    for line in bookmark_lines:
        match: re.Match = re.search(r'- \[(.*?)\]\((.*?)\)', line)
        if match and match.group(2) not in summarized_urls:
            title, url = match.groups()
            break
    if title and url:
        text_content: str = get_text_content(url)
        summary: str = summarize_text(text_content)
        one_sentence: str = one_sentence_summary(summary)
        summary_file_content: str = build_summary_file(title, url, summary, one_sentence)
        timestamp = int(datetime.now().timestamp())
# 保存原始文本内容
        with open(get_text_content_path(title), 'w', encoding='utf-8') as f:
            f.write(text_content)
# 保存总结文件
        with open(get_summary_file_path(title, timestamp), 'w', encoding='utf-8') as f:
            f.write(summary_file_content)
# 添加到总结书签列表
        summarized_bookmarks.append(SummarizedBookmark(
            year=CURRENT_YEAR,
            month=CURRENT_MONTH,
            title=title,
            url=url,
            timestamp=timestamp
        ))
# 更新 README 和数据文件
        with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/README.md', 'w', encoding='utf-8') as f:
            f.write(build_summary_readme_md(summarized_bookmarks))
        with open(f'{BOOKMARK_SUMMARY_REPO_NAME}/data.json', 'w', encoding='utf-8') as f:
            json.dump([asdict(bookmark) for bookmark in summarized_bookmarks], f, indent=2, ensure_ascii=False)
def main():
    process_bookmark_file()
if __name__ == "__main__":
    main()</pre>
</div>
</div>
</div>

<div id="outline-container-org5fe54cb" class="outline-2">
<h2 id="org5fe54cb">从GitHub书签到页面</h2>
<div class="outline-text-2" id="text-org5fe54cb">
<p>
突然想起来了之前的<a href="https://www.vandee.art/posts/2024-04-29-vandee-clip/">clip</a>，这两个整合到一起正好。于是进一步修改 <code>process_changes.py</code> 代码，更改文件生成的路径以符合clip，将AI总结和原文内容整合到 <code>index.md</code> ，这是现在的保存书签 - AI总结 - clip页面全流程：
</p>


<figure id="orgdaf856b">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/clipsummary-min.gif" class="img" width="60%" height="60%">

</figure>

<p>
全部完整代码在 <a href="https://github.com/VandeeFeng/bookmark-summary">bookmark-summary</a>。AI摘要的prompt和md初始页可以再完善一下。
</p>

<p>
再次感谢 <a href="https://github.com/theowenyoung/clip">Owen's Clip</a> , <a href="https://nekonull.me/posts/llm_x_bookmark/">LLM x 书签收藏：摘要 &amp; 全文索引</a>这两个项目的作者。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-github.html">Github</a> <a href="https://www.vandee.art/tag-python.html">Python</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Github]]></category>
  <category><![CDATA[Python]]></category>
  <link>https://www.vandee.art/blog/2024-10-12-bookmark-and-summary-by-github-actions.html</link>
  <guid>https://www.vandee.art/blog/2024-10-12-bookmark-and-summary-by-github-actions.html</guid>
  <pubDate>Sat, 12 Oct 2024 21:08:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[本来]]></title>
  <description><![CDATA[
<p>
和往常一样，我下了地铁来吃这里的牛肉面。和往常一样，还是很多人排队。
</p>

<p>
尖板眼是我排队的前一个，这个称呼来自我后面那位。尖板眼中年大众脸，上身深绿色条纹T恤，下身牛仔裤运动鞋，腰间挂着个车钥匙，低头双手把手机横向拿着。他一直在队列里外徘徊，现在前面大概还有10个人。
</p>

<p>
尖板眼：我先把票拿了，一碗牛肉面。我在玩游戏免得等哈子（一会）有影响。
</p>

<p>
我：望着收银阿姨。
</p>

<p>
尖板眼：我就先拿个票。
</p>

<p>
随即箭步向前，成功扫码取票，尖板眼又晃悠晃悠的到了下面区。
</p>

<p>
我：一直看着收银阿姨。
</p>

<p>
尖板眼：牛肉的，牛肉的，细面，哪碗是细面？
</p>

<p>
我本来准备开口了，
</p>

<p>
我后面那位：你搞莫名堂啊（做咩啊）？都在排队，就你个尖板眼（显眼包）不同款？
</p>

<p>
尖板眼：没有啊，我就看哈子（看一下）。我不是一直在排队？
</p>

<p>
我后面那位：***
</p>

<p>
尖板眼拿着面走了，我也拿着粉走了。
</p>

<p>
我知道，这次我又会是局外人了。
</p>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-局外人.html">局外人</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[局外人]]></category>
  <link>https://www.vandee.art/blog/2024-09-30-i-supposed-to.html</link>
  <guid>https://www.vandee.art/blog/2024-09-30-i-supposed-to.html</guid>
  <pubDate>Mon, 30 Sep 2024 19:13:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[本地笔记结构化数据的思考]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0cda79c">TiddlyWiki</a>
<ul>
<li><a href="#orga7d6bed">简介</a></li>
<li><a href="#org496909d">10分钟部署一个Wiki笔记本</a></li>
<li><a href="#org7069dc5">功能特性</a></li>
</ul>
</li>
<li><a href="#org2489add">Teable</a></li>
<li><a href="#org2dad79d">小结</a></li>
</ul>
</div>
</nav>
<p>
pre-training预训练，fine-turing微调，到现在的热门赛道RAG，都需要高质量数据的支撑。各大LLM阵营到现在也还在争夺各大数据平台的API和授权，偷偷训练。比起在技术上实现更大的突破，数据层面要轻松许多。
</p>

<p>
在这个趋势下，PKM和LLM结合时笔记的数据格式问题就更加重要了。
</p>

<p>
上一次考虑笔记数据层面的时候还是在<a href="https://www.vandee.art/2024-11-01-my-pkm-building-logs.html#orgb172417">obsidian 和 logseq 联用的 PKM 尝试</a>，让我从obsidian转到了Logseq：
</p>
<blockquote>
<p>
<a href="https://mp.weixin.qq.com/s/wWez_Ijq_Dukr-rch4P24g">Heptabase，如果笔记工具公司倒闭了，你的笔记还能接着用吗？</a>
</p>

<p>
从易用性和数据呈现来看，很显然它是，从保存数据和数据结构的角度来看，markdown 不是一个很优秀的格式。当然这是当数据到达一个相当的量级才需要考虑的事。
</p>

<p>
<b>做电子笔记，实际上是在做数据储存和数据处理。</b>
</p>

<p>
数据编辑的易用性，和数据检索、数据结构之间的取舍很关键。
</p>
</blockquote>

<p>
结构化文档数据有更少的噪声、更清晰的数据结构和关系结构、支持更复杂的SQL查询，进而从数据源头提高RAG向量化的质量。
</p>

<p>
在搜索结构化数据和PostgreSQL的时候，了解到了TiddlyWiki和Teable。
</p>

<div id="outline-container-org0cda79c" class="outline-2">
<h2 id="org0cda79c">TiddlyWiki</h2>
<div class="outline-text-2" id="text-org0cda79c">
<p>
这纯属是一个意外惊喜。一直想做一个类似Andy的<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子笔记</a>页面，非常简洁，又很还原纸张翻页的感觉。没想到在TiddlyWiki里实现了。
</p>

<p>
<a href="https://wiki.vandee.art/">Vandee — Wiki</a>这是我的Wiki，可以随意编辑体验。
</p>
</div>

<div id="outline-container-orga7d6bed" class="outline-3">
<h3 id="orga7d6bed">简介</h3>
<div class="outline-text-3" id="text-orga7d6bed">
<p>
TiddlyWiki是一个基于JavaScript的Wiki，目前有桌面客户端、官方的host服务、第三方的发行版等等。
</p>

<p>
只需要一个 <code>.html</code> 文件就可以实现一个在线随时可编辑的功能非常全面的笔记wiki。从没想过一个笔记体系可以有如此简洁高效的形式。
</p>

<p>
打开<a href="https://tiddlywiki.com/#GettingStarted">TiddlyWiki — a non-linear personal web notebook</a>，点击download会下载一个 <code>empty.html</code> 的文件，你已经拥有一个自己的Wiki了。 桌面版和Node.js版都没这个方便。有开发需求的可以考虑Node.js版本。
</p>
</div>
</div>

<div id="outline-container-org496909d" class="outline-3">
<h3 id="org496909d">10分钟部署一个Wiki笔记本</h3>
<div class="outline-text-3" id="text-org496909d">
<p>
<b>GitHub:</b>
</p>

<ul class="org-ul">
<li>新建一个GitHub仓库，上传这个HTML文件，随便起个名字例如 <code>index.html</code> 。</li>
<li>可以直接使用GitHub Pages来发布这个页面。</li>
</ul>

<p>
<b>Cloudflare:</b>
</p>

<ul class="org-ul">
<li>在Cloudflare的page里新建一个GitHub项目，选择刚才的仓库，其他的都不用填，部署就完事了。</li>
<li>国内的GitHub经常抽风，Cloudflare Pages可以稳定访问。</li>
</ul>

<p>
没有自己的域名GitHub和Cloudflare自带的域名也可以直接访问。比发布静态MD博客方便许多。
</p>

<p>
<b>保存与同步</b>
</p>

<p>
在GitHub上申请一个密钥，然后在TiddlyWiki的设置-保存-GitHub里填入相关信息和密钥，就可以直接同步保存到GitHub了。
</p>

<p>
这样就实现了一个可以在线预览编辑，本地编辑同步，GitHub版本回滚的极简笔记wiki。
</p>
</div>
</div>

<div id="outline-container-org7069dc5" class="outline-3">
<h3 id="org7069dc5">功能特性</h3>
<div class="outline-text-3" id="text-org7069dc5">
<p>
TiddlyWiki有许多主题模板和插件。文件支持TiddlyWiki格式、JavaScript等等默认格式，装了插件之后就可以支持Markdown了。
</p>

<p>
<a href="https://crazko.github.io/krystal/">Krystal</a>插件完美复刻了Andy笔记页面，这太让我惊喜了，正是看到这个插件才让我想开始尝试TiddlyWiki。当然也提供反链，这是我的刚需。也同样可以通过Tag分类管理笔记。
</p>

<p>
最大的特点是方便，一个HTML网页在浏览器里打开就完事了，基本零依赖。想要加点什么，直接在这个HTML文档里写点JavaScript就可以了。
</p>

<p>
特别适合零碎的记录还有日志。初步使用感觉不太适合完全当作主知识库来使用，单个笔记文件的导出、没有文件夹管理都是需要斟酌的问题。
</p>

<p>
但是TiddlyWiki可以导出JSON、CSV，也就是说可以直接导入SQL。
</p>
</div>
</div>
</div>

<div id="outline-container-org2489add" class="outline-2">
<h2 id="org2489add">Teable</h2>
<div class="outline-text-2" id="text-org2489add">
<p>
GitHub：<a href="https://github.com/teableio/teable">https://github.com/teableio/teable</a>
</p>

<p>
官网：<a href="https://www.teable.io/">https://www.teable.io/</a> 、文档：<a href="https://help.teable.cn/">https://help.teable.cn/</a>
</p>

<p>
Teable是一个开源的GoogleSheets、Airtable，并且提供了PostgreSQL集成，目前8.8k Star。支持Docker本地部署，一键Railway部署，通过 SQL 访问表格数据，当然也有官方的host，目前还没有看到收费的方案。
</p>

<p>
我在Docker上试用了一下，API和PostgreSQL部分做的很方便。免费申请一个AWS E2 服务器实例，就可以玩起来了。
</p>

<p>
之前在使用obsidian的时候，就有许多在线表格和笔记结合的方案。现在是时候考虑一下结构化数据，SQL的问题了。
</p>

<p>
正好TiddlyWiki支持导出到Json和CSV，Teable又支持CSV的导入和导出。从数据库到表格到PKM是一个很可行的思路。
</p>

<p>
在TiddlyWiki里写一个JavaScript的插件来同步Teable应该不难实现，Teable的API支持原数据的导出。应该有这种插件但是我还没找到。这一步实现之后应该可以发展出一个更适合RAG与LLM的笔记方案。
</p>
</div>
</div>

<div id="outline-container-org2dad79d" class="outline-2">
<h2 id="org2dad79d">小结</h2>
<div class="outline-text-2" id="text-org2dad79d">
<p>
我一直没有依赖太多的手段或方法来从形式上实现笔记之间的链接，这是我迭代到现在最核心的笔记原则。就像开头说的Andy的<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子笔记</a>一样，简洁、高效的笔记记录和阅读体验始终是我追求的第一位。
</p>

<p>
Notion里的一大堆表格数据库，对于笔记本身真的有很大帮助么？反链和高度原子化的笔记在笔记形式的层面就非常足够了。原子笔记的标题是高度提炼的概念，而反链会显示和这个概念相关联的其他概念，这是最简单也是最核心的实现思维链条与笔记之间的同步的方法了。
</p>

<p>
在我需要引用其他概念的原子笔记时，只要敲击相关的概念词汇，相关联部分都会自动补全，我完全不需要在表格和数据库里重复查找相关的内容再提炼一遍，我认为这是最自然的笔记方法。做笔记本身不需要复杂的检索查询逻辑。
</p>

<p>
但在数据结构层面，这是另一个问题，数据需要足够“复杂”的检索系统。在RAG的过程当中，依赖于LLM对文档的语义理解的局限性一直在那里，SQL或结构化文档可以直接查询键值对让LLM提取相应的内容。从技术上来优化RAG的效果对于普通人来说成本太高，而从数据结构本身来优化就容易许多。
</p>

<p>
Markdown一定是做笔记适用性最强的格式，但在数据层面一定不是。多维表格—数据库—RAG—LLM是一个值得思考的Workflow。表格提供了低代码的数据操作体验，数据库作为数据的备份和支撑，RAG结合笔记和LLM做思维拓展、总结、提取。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <link>https://www.vandee.art/blog/2024-08-10-thinking-about-structured-data-in-notes.html</link>
  <guid>https://www.vandee.art/blog/2024-08-10-thinking-about-structured-data-in-notes.html</guid>
  <pubDate>Sat, 10 Aug 2024 16:31:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[PKM（个人知识管理）构建手册 - Nvim]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org00ffc2f">Intro</a></li>
<li><a href="#org64fbf7c">Manual</a>
<ul>
<li><a href="#org220e00e">Prerequisites</a></li>
<li><a href="#org6505f32">PKM</a>
<ul>
<li><a href="#org42531df">Principles</a></li>
<li><a href="#orgcac8098">Methods</a></li>
</ul>
</li>
<li><a href="#orga36f44c">PKM with LLM</a>
<ul>
<li><a href="#org2108ba9">Ollama</a></li>
<li><a href="#org5b4d0da">Open WebUI</a></li>
<li><a href="#orge3f8d71"><b>Kotaemon</b></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org5b0f204">Thanks</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org00ffc2f" class="outline-2">
<h2 id="org00ffc2f">Intro</h2>
<div class="outline-text-2" id="text-org00ffc2f">
<p>
在之前的使用 nb 的时候已经在琢磨使用bash脚本来做笔记的框架。期间因为没有找到有效的处理双链和反链的方法，无意间了解到了Emacs里的org-roam可以提供反链，正好又在学习代码的初期急需一个编辑器，于是在Emacs还是Nvim之间选择了Emacs。
</p>

<p>
直到这几天无意间发现了<a href="https://github.com/vimwiki/vimwiki">vimwiki/vimwiki: Personal Wiki for Vim</a>，如果当初的搜索关键字多了几个字，这几个月关于做笔记的探索将会截然不同。
</p>

<p>
想 <b>脱离笔记软件</b> 回归数据本身，这是当初停止使用Logseq、obsidian的最大原因。
</p>

<p>
<a href="https://mischavandenburg.com/zet/neovim-zettelkasten/">我的 Neovim Zettelkasten：我如何使用 Vim 和 Bash 在 Markdown 中做笔记 |米沙·范登伯格</a> ，随即搜到了这篇文章，让我决定开始尝试Nvim做笔记的方案。Bash其实就是依赖性最小的工具。
</p>

<p>
org-capture可以用bash脚本来实现，双链通过VImwiki实现，反链同样可以通过bash脚本正则查询实现。在迁移配置到其他环境时Nvim的轻便优势就更大了，在我的Linux虚拟机里迁移一次DoomEmacs将近要安装配置半个多小时，而Nvim一个dotfile，5分钟搞定安装到配置。
</p>

<p>
Emacs是一个赛博乐高，我很享受这几个月使用Emacs收获的快乐，但它并不能完全扩展成一个兼容性很强的方法。
</p>

<p>
Emacs也完全是一个操作系统，对比起来Nvim作为编辑器的最大优势就在于轻巧。Org-mode里让我最喜欢的一点就是标题可折叠和自定义显示层级，对各种语言、格式的兼容性都很强。代码块部分可以直接生成结果，可以直接在代码块里使用jupyter，这对于做coding笔记来说很方便。再就是org-capture。它像是一个办公室。这里有书柜、办公桌、台灯，你可以在这里构建任何其他你喜欢的东西，但搬家是个大工程。
</p>

<p>
这些功能都依赖于Emacs、依赖于org-mode，用的越多，对它们的依赖就越大，因为Emacs和org真的很好用。 <code>.org</code> 文件转换起来并不麻烦，org基本可以输出成任何其他格式的文件，但迁移之后也就失去了org的功能特性。
</p>

<p>
Notion、Logseq、Obsidian、Roam Research、Heptabase，未来还会有更多的笔记软件，适合自己的才是最好的，选择一个笔记软件、笔记工具就是在选择一个生态、一个系统。你可能会想，既然有这么多成熟的笔记生态了，为什么还要自己折腾这些？因为这些就是他们当初不满意现有的生态，折腾出来的适合自己的笔记方法。我不太想依赖于别人的方法，下一个笔记软件，何必是笔记软件。
</p>

<p>
通过RAG将PKM和LLM结合起来一定以未来更有效的学习方式。结构化的文档有更少的噪声、清晰的数据结构和关系进、支持更复杂的SQL查询，进而从数据源头提高RAG向量化的质量。从数据层面来思考笔记的形式、回归数据本质是这次要继续探索的方向。PKM笔记文档和PostgreSQL链接起来是下一步要解决的问题。
</p>

<p>
这个手册主要介绍了以 Nvim 和 bash 脚本构建 PKM 体系的方法，供和我一样在 Nvim 和 Emacs 之间做过选择的兄弟们参考。
</p>

<p>
我现在依然是 Emacs 的重度使用者，脱离笔记软件并不是脱离某个具体的体系和产品，而是将这些体系变成自己的，进而脱离笔记软件和传统笔记方法的固定思维。现在在 Emacs 里，我依然会使用 bash 脚本来完成部分零散的笔记，例如结合我的 TiddlyWiki，快速构建 Markdown 笔记。
</p>

<p>
无论是 Emacs 还是 Nvim，它们都可以用 bash 脚本作为依赖最低的方法扩展自己记录笔记的方式。Nvim 和 Emacs 我真的都很喜欢，但是 org-mode 给我的编辑体验是其他任何其他纯文本形式替代不了的。
</p>

<p>
Vim 编辑模式、PKM方法才是那支笔，它们把笔记数据、操作系统链接起来，你可以在任何环境使用这只笔。忘掉所有招式就练成太极了。
</p>


<figure id="orgaf18aec">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/nvimdash.png" class="img" width="50%" height="50%">

</figure>
</div>
</div>


<div id="outline-container-org64fbf7c" class="outline-2">
<h2 id="org64fbf7c">Manual</h2>
<div class="outline-text-2" id="text-org64fbf7c">
<p>
这是一个以 <a href="https://neovim.io/">Neovim</a> 为基础编辑器、文件管理的Markdown本地笔记PKM。
</p>

<p>
本手册包括：
</p>

<ul class="org-ul">
<li>Prerequisites：开始构建本PKM需要的工具和准备工作</li>
<li>PKM：本PKM的构建原则和具体方法</li>
<li>PKM with LLM：PKM和大语言模型结合的使用</li>
</ul>
</div>

<div id="outline-container-org220e00e" class="outline-3">
<h3 id="org220e00e">Prerequisites</h3>
<div class="outline-text-3" id="text-org220e00e">
<p>
Start with：<a href="https://git-scm.com/download">Git</a>，<a href="https://neovim.io/">Neovim</a>，<a href="https://github.com/LazyVim/LazyVim">LazyVim</a>，<a href="https://github.com/vimwiki/vimwiki">Vimwiki</a>，<a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a>，<a href="https://sw.kovidgoyal.net/kitty/">kitty</a> 或其他terminal。
</p>

<p>
开始你可能需要对Nvim，Markdown，Git，vim编辑模式有一些了解，这些可以帮助到你：
</p>

<ul class="org-ul">
<li><a href="https://neovim.io/doc/">Documentation - Neovim</a></li>
<li><a href="https://www.lazyvim.org/">🚀 Getting Started | LazyVim</a></li>
<li><a href="https://www.markdownguide.org/basic-syntax/">Basic Syntax | Markdown Guide</a></li>
<li><a href="https://github.com/topics/nvim">nvim · GitHub Topics</a></li>
<li><a href="https://github.com/LunarVim/Neovim-from-scratch">LunarVim/Neovim-from-scratch: 📚 A Neovim config designed from scratch to be understandable</a></li>
<li><a href="https://github.com/craftzdog/dotfiles-public">craftzdog/dotfiles-public: My personal dotfiles</a></li>
<li><a href="https://oi-wiki.org/tools/editor/vim/">Vim - OI Wiki</a></li>
<li><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim | 菜鸟教程</a></li>
</ul>

<p>
不太建议上手Nvim就直接使用<a href="https://nvchad.com/">NvChad</a>这种类似于DoomEmacs的集成配置，它们的文件结构不利于自定义个性化配置。Nvim配置起来比Emacs简易许多，不太需要一步到位的集成方案。
</p>

<p>
<a href="https://github.com/LazyVim/LazyVim">LazyVim</a>既是一个插件安装管理器同时也是一个初始的简易Nvim配置，从这里开始。
</p>
</div>
</div>
<div id="outline-container-org6505f32" class="outline-3">
<h3 id="org6505f32">PKM</h3>
<div class="outline-text-3" id="text-org6505f32">
<p>
整体的笔记文件管理结构，还是<a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/ACCESS%E7%AC%94%E8%AE%B0%E6%B3%95">ACCESS</a>，可以选择不用。有文件夹和没有文件夹是两种不同的管理模式，例如ob和Logseq。这个手册里更主要的是分享我在构建PKM的过程中迭代的一些原则和方法，以供参考，形成、巩固自己的方法才是这个手册真正的目的，remember：有形易于无形。具体可以参看：<a href="https://dg.vandee.art/Atlas/MOC/%C2%A7Vandee%E7%9A%84PKM">§Vandee的PKM</a>
</p>

<p>
Journals用来记录每天的日志，作为简单明了的回顾和展开。如果你不喜欢文件夹管理，我觉得这个是很有必要的。
</p>

<p>
在Nvim里，我暂时使用Bash脚本来创建Journals。以年月日展示，在Typora的侧边栏可以直观的选择特定日期的日志。为了展示MD标题层级的效果，脚本设置了在Typora里默认打开，可以根据需求更改。Nvim里正则搜索特定日期的标题就可以找到当天的日志了。
</p>


<figure id="org3e949b7">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/jounalbash.gif" class="img" width="50%" height="50%">

</figure>

<p>
核心： <b>原子笔记</b> + <b>双链</b> 。
</p>

<p>
你可能需要了解「 <b>原子笔记</b> 」（或者常青笔记，whatever）：<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a>。
</p>

<p>
双链和反链让笔记之间的关联更加直观，当原子笔记很多的时候，反链可以直观的反应出和当前笔记相关的其他笔记。它应该同步于思维的链条。
</p>

<p>
Zettelkasten 其实并不那么重要。
</p>

<p>
Stay foolish，stay simple。
</p>

<p>
<b>关于同步</b> ：
</p>

<p>
本地笔记没有在线笔记软件方便的地方就是多端同步与预览。我的本地笔记已经上传到了GitHub仓库，通过Git同步。临时需要修改的直接在GitHub仓库里就修改了。预览方面，我的笔记输出到了<a href="https://dg.vandee.art/">Vandee's Digital Garden</a>。
</p>
</div>

<div id="outline-container-org42531df" class="outline-4">
<h4 id="org42531df">Principles</h4>
<div class="outline-text-4" id="text-org42531df">
<ul class="org-ul">
<li><a href="https://dg.vandee.art/Cards/%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E6%A3%80%E7%B4%A2%E9%80%BB%E8%BE%91">一个良好的知识循环系统，应该有优秀的检索逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E6%98%AF%E6%80%9D%E7%BB%B4%E7%9A%84%E5%91%88%E7%8E%B0%EF%BC%8C%E5%AE%83%E5%BA%94%E8%AF%A5%E6%98%AF%E7%9F%A2%E9%87%8F%E7%9A%84">笔记是思维的呈现，它应该是矢量的</a>，当然也是<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子化</a>的</li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%B2%E8%81%94%E5%BA%94%E8%AF%A5%E5%AE%8C%E5%85%A8%E4%BE%9D%E9%9D%A0%E4%B8%8E%E6%80%9D%E7%BB%B4%E7%9A%84%E5%90%8C%E6%AD%A5">笔记之间的串联应该完全依靠与思维的同步</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E8%AE%A9%E7%9F%A5%E8%AF%86%E6%B5%81%E5%8A%A8%E8%B5%B7%E6%9D%A5">笔记应该让知识流动起来</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E5%B1%82%E7%BA%A7%E9%80%BB%E8%BE%91">笔记应该有优秀的层级逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E5%A2%9E%E6%8F%B4%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%87%AA%E5%B7%B1">笔记的核心价值在于增援未来的自己</a></li>
</ul>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。
</p>
</div>
</div>
<div id="outline-container-orgcac8098" class="outline-4">
<h4 id="orgcac8098">Methods</h4>
<div class="outline-text-4" id="text-orgcac8098">
<p>
在最开始需要构建的关键体系就是检索的逻辑。
</p>

<p>
在双链部分由于原则上已经和思维高度同步，因此不需要做额外的增加思维成本的检索，只要在记录原子笔记的时候，顺其自然，高度提炼出明确、简洁的一句话概念即可。
</p>

<p>
在标签tags部分，我习惯把标签当作是一个object的二、三级属性来看待。例如《黄金时代》这本书，它的基础属性是book，我不会再重复标注它，而是写在property里，记下 <code>Type: book</code> 方便我通过函数来列举所有的书目，tag则记下文学、王小波。我习惯用单数来强调它是个属性，区别与复数的category集合的概念。
</p>

<p>
我看过许多博客和PKM，许多情况下，他们的tags在语义概念上都混用了，我习惯把tags和categories分开，分类就是分类，标签就是标签。category、property、tag还是需要在逻辑里有自然的分类，理清楚一个概念的内涵与外延。混用会导致tags越来越多，成百上千的tags反而会增加检索的成本，过个几年，大多数的tags你已经忘了当时为什么记下了，单独再去整理标签无疑是个巨大的工程，tags也失去了应当有的作用。tags的构建同样应当同步与自身的思维习惯，自身对概念、语义的记忆。
</p>

<p>
当然这也完全取决于每个人自己的习惯。
</p>

<p>
学习、获取信息和知识是在做加法，PKM里更多的应该是减法，<a href="https://dg.vandee.art/Sources/Articles/Stay-learn,-Stay-unlearn%EF%BD%9C%E8%AF%95%E8%A1%8C%E9%94%99%E8%AF%AF102">Learn and unlearn</a>。
</p>

<p>
整体配置、配置文件结构参考：<a href="https://github.com/craftzdog/dotfiles-public">craftzdog/dotfiles-public: My personal dotfiles</a> 。
</p>
</div>
<ul class="org-ul">
<li><a id="orga0be3aa"></a>Vimwiki<br>
<div class="outline-text-5" id="text-orga0be3aa">
<p>
Vimwiki提供了类似于org-roam的insert功能，选中文字直接Enter即可在配置的笔记目录下生成笔记。当然也可以 <code>/path/notes</code> 的形式在相对路径的文件夹里生成对应文件。
</p>

<p>
VImwiki这个相对路径直接生成文件的实现很重要。在ob里可以直接 <code>[[note1][[note1]]</code> 或 <code>[note1]</code> 引用 <code>note1</code> ，但这在其他笔记软件里是不支持的。许多md博客生成框架例如hugo，是不支持这种全局通过文件名引用的。Vimwiki支持 <code>[[note1][/pkm/note1]]</code> 这样的格式，保留了相对路径在以后兼容其他框架的时候修改起来就很方便。
</p>

<p>
然后就可以开始愉快的写md笔记了。反链暂时我使用正则对当前文件名搜索，得到其他引用文件。Lua还不是很熟，后面写一个脚本来打印出搜索的结果。这个在Emacs里可以通过embark在minibuffer里实现。
</p>

<ul class="org-ul">
<li><p>
Lazy安装：
</p>

<p>
<code>{'vimwiki/vimwiki'}</code>
</p>

<p>
官方文档里，没有直接写明Lazy的安装方式，我还以为不支持，其实是支持的。
</p></li>

<li><p>
配置笔记文件夹
</p>

<div class="org-src-container">
<pre class="src src-lua">-- vim
let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': 'md'}]
-- lua
vim.g.vimwiki_list = {
  {
    path = '~/vimwiki/',
    syntax = 'markdown',
    ext = 'md'
  }
}</pre>
</div></li>
</ul>
</div>
</li>

<li><a id="org6f5e582"></a>Bash - MD capture<br>
<div class="outline-text-5" id="text-org6f5e582">
<p>
我现在自用的bash脚本包括导航脚本和特定笔记脚本两种，根据这两个模板常用的笔记需求基本可以满足。基本复现org-capture里自定义模板、特定位置写入内容、指定文件生成位置。
</p>


<figure id="orgcb025ac">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/mdnotesbash.gif" class="img" width="50%" height="50%">

</figure>
</div>

<ul class="org-ul">
<li><a id="org0bbee80"></a>使用Bash脚本步骤<br>
<div class="outline-text-6" id="text-org0bbee80">
<ul class="org-ul">
<li>添加脚本文件夹环境全局访问： <code>.bash_profile</code>  or  <code>.bashrc</code> 文件里写入 <code>export PATH="~/path/my_scripts:$PATH"</code></li>

<li>添加脚本可执行权限：terminal里 <code>cd ~/path/my_scripts</code> 到脚本文件夹位置， <code>chmod +x script_name.sh</code></li>
<li>添加别名： <code>alias script_alias='path/my_scripts/script_name.sh'</code> ，然后 <code>source ~/.bash_profile</code>  or  <code>source ~/.bashrc</code></li>

<li>Nvim里打开terminal或直接打开系统terminal，输入脚本名字或别名。</li>

<li>如果使用的是Homebrew安装的Bash，在脚本里替换 <code>#!/bin/bash</code> 为 <code>#!/opt/homebrew/bin/bash</code></li>
</ul>
</div>
</li>
<li><a id="orgdcf9668"></a>脚本模板参考<br>
<div class="outline-text-6" id="text-orgdcf9668">
<ul class="org-ul">
<li><p>
导航脚本，选择创建笔记的类型：
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
# 设置退出脚本的陷阱
trap 'echo "退出脚本。"; exit' SIGINT
# 定义脚本目录
script_dir="$HOME/path/"
# 定义操作和对应的脚本
declare -A operations=(
  [1]="Journals.sh"
  [2]="NotesMD.sh"
  [3]="AtomicMD.sh"
  [4]="BlogMD.sh"
)
# 显示操作选择列表并提示用户输入
echo "请选择要执行的操作（输入序号）:"
for i in $(seq 1 ${#operations[@]}); do
  echo "$i. ${operations[$i]}"
done
echo "或者输入 'q' 退出脚本"
# 读取用户输入
read -p "输入序号: " choice
# 检查用户是否选择退出脚本
if [[ "$choice" == "q" ]]; then
  echo "退出脚本。"
  exit
fi
# 根据用户输入的序号执行相应的脚本
if [[ -n "${operations[$choice]}" ]]; then
  script_path="${script_dir}${operations[$choice]}"
  echo "执行 ${operations[$choice]} 脚本..."
  # 执行相应的脚本
  "$script_path"
else
  echo "无效的序号，请输入1到4之间的数字。"
  exit 1
fi
# 提醒用户已执行相应脚本
echo "已执行选择的脚本。"</pre>
</div></li>
<li><p>
Journal脚本，生成每天的日志：
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
# 设置系统语言环境为英文
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
# 设置绝对路径
base_path="$HOME/path/Journals"
# 获取当前年份
current_year=$(date +"%Y")
# 询问用户输入日期
read -p "Please enter the date (YYYY-MM-DD or MM-DD) [default: $(date +"%Y-%m-%d")], or 'q' to quit: " input_date
# 如果用户输入 'q'，则退出脚本
if [ "$input_date" == "q" ]; then
    echo "Exiting the script."
    exit 0
fi
# 如果用户没有输入日期，则使用当天日期
if [ -z "$input_date" ]; then
    input_date=$(date +"%Y-%m-%d")
fi
# 检查输入格式
if [[ $input_date =~ ^([0-9]{4})-([0-9]{2})-([0-9]{2})$ ]]; then
    # 完整的 YYYY-MM-DD 格式
    input_year=$(echo "$input_date" | cut -d'-' -f1)
    input_month=$(echo "$input_date" | cut -d'-' -f2)
    input_day=$(echo "$input_date" | cut -d'-' -f3)
elif [[ $input_date =~ ^([0-9]{2})-([0-9]{2})$ ]]; then
    # MM-DD 格式，使用当前年份
    input_year=$current_year
    input_month=$(echo "$input_date" | cut -d'-' -f1)
    input_day=$(echo "$input_date" | cut -d'-' -f2)
else
    echo "Invalid date format. Please use YYYY-MM-DD or MM-DD."
    exit 1
fi
# 生成 Journal 文件路径
journal_filename="Journal-$input_year.md"
journal_path="$base_path/$journal_filename"
# 检查文件是否已存在
if [ -f "$journal_path" ]; then
    echo "Journal file already exists: $journal_path"
    target_file="$journal_path"
else
    touch "$journal_path"
    echo "Journal file created: $journal_path"
    target_file="$journal_path"
fi
# 获取当前日期信息
current_date=$(date +"%Y-%m-%d")
current_month_name=$(date +"%b")
current_day_name=$(date +"%A")
# 使用 date 命令获取输入日期的月份和星期几的名称
input_month_name=$(date -j -f "%Y-%m-%d" "$input_year-$input_month-$input_day" +"%b")
input_day_name=$(date -j -f "%Y-%m-%d" "$input_year-$input_month-$input_day" +"%A")
# 检查当前年份头是否存在
if ! grep -q "# $input_year" "$target_file"; then
    echo "# $input_year" >> "$target_file"
    echo "Current year header inserted in $target_file: # $input_year"
else
    echo "Current year header already exists, no need to insert it again"
fi
# 检查当前月份头是否存在
if ! grep -q "## $input_year-$input_month $input_month_name" "$target_file"; then
    echo "## $input_year-$input_month $input_month_name" >> "$target_file"
    echo "Current month header inserted in $target_file: ## $input_year-$input_month $input_month_name"
else
    echo "Current month header already exists, no need to insert it again"
fi
# 检查当前日期头是否存在
if ! grep -q "### $input_year-$input_month-$input_day $input_day_name" "$target_file"; then
    echo "### $input_year-$input_month-$input_day $input_day_name" >> "$target_file"
    echo "Current day of the week header inserted in $target_file: ### $input_year-$input_month-$input_day $input_day_name"
    echo "" >> "$target_file"
    echo "- TODOs" >> "$target_file"
    echo "- Inbox" >> "$target_file"
    # 将光标定位在"- Inbox"这一行
    sed -i '' -e '/- Inbox/G' "$target_file"
else
    echo "Current day of the week header already exists"
fi
# 用Typora打开生成的日记文件
open -a Typora "$target_file"</pre>
</div></li>

<li><p>
Notes脚本，生成一般的笔记：
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
# 提示用户输入Markdown文件的名称，并检查是否输入了"q"以退出脚本
while true; do
  read -p "请输入Markdown文件的名称（不包含.md扩展名）或输入'q'退出: " filename
  if [[ "$filename" == "q" ]]; then
    echo "退出脚本。"
    exit
  fi
  # 如果用户没有输入任何内容，则使用当前日期和时间作为文件名
  filename=${filename:-$(date '+%Y%m%d%H%M%S')}
  # 检查输入是否有效，如果为空则继续询问
  if [ -z "$filename" ]; then
    echo "文件名不能为空，请输入文件名或输入'q'退出。"
    continue
  fi
  # 一旦获得有效输入，跳出循环
  break
done
# 检查是否已经存在该目录，如果不存在则创建
mdNotesDir="$HOME/path/"
if [ ! -d "$mdNotesDir" ]; then
  mkdir -p "$mdNotesDir"
fi
# 构建完整的文件路径
fullPath="${mdNotesDir}${filename}.md"
# 获取当前的日期和时间
current_date=$(date '+%Y-%m-%d')
current_date_yyyyMMddHHmmss=$(date '+%Y%m%d%H%M%S')
# 创建并写入 YAML 头信息到 Markdown 文件
cat > "$fullPath" <<EOF
---
UID: $current_date_yyyyMMddHHmmss
title: $filename
alias:
areas:
tags:
rank:
source:
type: Article
date: $current_date
---
EOF
# 提醒用户文件已创建
echo "Markdown 文件 '$fullPath' 已创建。"
# 使用 open 命令自动打开文件
open -a "typora" "$fullPath"</pre>
</div></li>
</ul>
</div>
</li>
</ul>
</li>


<li><a id="orgfc343bf"></a>ToggleTerm<br>
<div class="outline-text-5" id="text-orgfc343bf">

<figure id="org6e8f723">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/bash-quote.gif" class="img" width="50%" height="50%">

</figure>

<p>
<a href="https://github.com/akinsho/toggleterm.nvim">akinsho/toggleterm.nvim</a> 可以在Nvim里快速创建一个内置终端。结合Bash脚本，体验和Emacs里使用org-capture差不多。当然，org-capture可以结合org-protocol，还是要强大太多。
</p>

<ul class="org-ul">
<li><p>
安装：
</p>

<div class="org-src-container">
<pre class="src src-lua">  {
    -- amongst your other plugins
    {'akinsho/toggleterm.nvim', version = "*", config = true}
    -- or
    {'akinsho/toggleterm.nvim', version = "*", opts = {--[[ things you want to change go here]]}}
  }</pre>
</div></li>
<li><p>
参考配置：
</p>

<div class="org-src-container">
<pre class="src src-lua">local toggleterm = require("toggleterm")
  toggleterm.setup({
      size = 15, - 设置窗口大小
      open_mapping = "<C-\\>",
      start_in_insert = true,
      direction = "horizontal", - 设置窗口横向或竖向
      shell = vim.o.shell, - 设置需要使用的shell
  })
  - 在Terminal里使用vim的移动指令
  function _G.set_terminal_keymaps()
    local opts = { noremap = true }
    vim.api.nvim_buf_set_keymap(0, 't', '<esc>', [[<C-\><C-n>]], opts)
    vim.api.nvim_buf_set_keymap(0, 't', 'jk', [[<C-\><C-n>]], opts)
    vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>h]], opts)
    vim.api.nvim_buf_set_keymap(0, 't', '<C-j>', [[<C-\><C-n><C-W>j]], opts)
    vim.api.nvim_buf_set_keymap(0, 't', '<C-k>', [[<C-\><C-n><C-W>k]], opts)
    vim.api.nvim_buf_set_keymap(0, 't', '<C-l>', [[<C-\><C-n><C-W>l]], opts)
  end
  vim.cmd('autocmd! TermOpen term://* lua set_terminal_keymaps()')
  local Terminal = require("toggleterm.terminal").Terminal
  local lazygit = Terminal:new({ cmd = "lazygit", hidden = true })
  function _LAZYGIT_TOGGLE()
    lazygit:toggle()
  end
  local node = Terminal:new({ cmd = "node", hidden = true })
  function _NODE_TOGGLE()
    node:toggle()
  end
  local python = Terminal:new({ cmd = "python3", hidden = true })
  function _PYTHON_TOGGLE()
    python:toggle()
  end
  -- 为 Python 终端设置快捷键
  vim.api.nvim_set_keymap('n', '<leader>tp', ':lua _PYTHON_TOGGLE()<CR>', { noremap = true, silent = true })
  -- 快速打开Terminal
  vim.keymap.set("n", "<Leader>tt", function()
    require("toggleterm").toggle()
  end, { desc = "ToggleTerm" })
  -- end</pre>
</div></li>
</ul>
</div>
</li>

<li><a id="orgb63bfa2"></a>中英输入法问题<br>
<ul class="org-ul">
<li><a id="orgbb9c708"></a>im-select-nvim<br>
<div class="outline-text-6" id="text-orgbb9c708">
<p>
<a href="https://github.com/keaising/im-select.nvim">keaising/im-select.nvim</a> 这个插件可以在Nvim里让nomal模式下自动切换成英文输入，在insert模式下自动切换回中文输入。刚需。
</p>
<ul class="org-ul">
<li><p>
先安装im-select
</p>

<div class="org-src-container">
<pre class="src src-bash">Install
Download URL: https://github.com/daipeihust/im-select
Check installation in bash/zsh
# find binary
$ which im-select
# Get current im name
$ im-select
# Try to switch to English keyboard
$ im-select com.apple.keylayout.ABC
Check in NeoVim
:!which im-select</pre>
</div></li>

<li><p>
im-select-nvim的安装和配置
</p>

<div class="org-src-container">
<pre class="src src-lua">{
    "keaising/im-select.nvim",
    config = function()
        require('im_select').setup({
            -- IM will be set to `default_im_select` in `normal` mode
            -- For Windows/WSL, default: "1033", aka: English US Keyboard
            -- For macOS, default: "com.apple.keylayout.ABC", aka: US
            -- For Linux, default:
            --               "keyboard-us" for Fcitx5
            --               "1" for Fcitx
            --               "xkb:us::eng" for ibus
            -- You can use `im-select` or `fcitx5-remote -n` to get the IM's name
            default_im_select  = "com.apple.keylayout.ABC",
            -- Can be binary's name, binary's full path, or a table, e.g. 'im-select',
            -- '/usr/local/bin/im-select' for binary without extra arguments,
            -- or { "AIMSwitcher.exe", "--imm" } for binary need extra arguments to work.
            -- For Windows/WSL, default: "im-select.exe"
            -- For macOS, default: "im-select"
            -- For Linux, default: "fcitx5-remote" or "fcitx-remote" or "ibus"
            default_command = "/opt/homebrew/bin/im-select",
            -- Restore the default input method state when the following events are triggered
            set_default_events = { "VimEnter", "FocusGained", "InsertLeave", "CmdlineLeave" },
            -- Restore the previous used input method state when the following events
            -- are triggered, if you don't want to restore previous used im in Insert mode,
            -- e.g. deprecated `disable_auto_restore = 1`, just let it empty
            -- as `set_previous_events = {}`
            set_previous_events = { "InsertEnter" },
            -- Show notification about how to install executable binary when binary missed
            keep_quiet_on_no_binary = false,
            -- Async run `default_command` to switch IM or not
            async_switch_im = true
        })
    end,
},</pre>
</div></li>
</ul>

<p>
Ref:
</p>
<ul class="org-ul">
<li><a href="https://github.com/lei4519/blog/issues/85">完善 Rime Vim Mode：支持 Linux &amp; 自动切换回中文模式 · Issue #85 · lei4519/blog</a></li>
<li><a href="https://sspai.com/post/71322">Vim 的中文支持及解决思路 - 少数派</a></li>
<li><a href="https://jdhao.github.io/2021/02/25/nvim_ime_mode_auto_switch/">如何让 Neovim 中文输入时自动切换输入法 · Blowfish</a></li>
</ul>
</div>
</li>

<li><a id="org1e9daa3"></a>RIME<br>
<div class="outline-text-6" id="text-org1e9daa3">
<p>
如果说PKM是纸，那么输入法就是笔。
</p>

<p>
再次强烈推荐 <a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p>

<p>
一个巨坑，最近的RIME更新在<a href="https://github.com/rime/squirrel/releases/tag/1.0.0">Release 1.0.0 · rime/squirrel</a>版本里改变了候选词横向和竖向的设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">style/horizontal 將徹底移除，雖然本版程序仍支持，但會被新控件的默認值覆蓋
請使用 candidate_list_layout: stacked/linear 和 text_orientation: horizontal/vertical</pre>
</div>

<p>
而且最好直接在输入法外观的配置文件里，修改输入法外观的配置，而不是通用配置，反正我在通用设置里不起作用。
</p>

<p>
<b>下面是简单的安装步骤</b> ：
</p>

<div class="org-src-container">
<pre class="src src-bash">;; mac:
;; mac rime: https://rime.im/download/
Homebrew: brew install --cask squirrel
或者直接下载
;; mac rime-ice
使用东风破 plum 安装: https://github.com/rime/plum
curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash
安装 rime-ice:
℞ 安装或更新全部文件
bash rime-install iDvel/rime-ice:others/recipes/full
℞ 安装或更新所有词库文件（包含下面三个）
bash rime-install iDvel/rime-ice:others/recipes/all_dicts
℞ 安装或更新拼音词库文件（ cn_dicts/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
℞ 安装或更新英文词库文件（ en_dicts/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/en_dicts
℞ 安装或更新 opencc （ opencc/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/opencc
;;或使用 rime-auto-deploy：https://github.com/Mark24Code/rime-auto-deploy，这个和plum只用选一个。
=======================================================
;;Linux
ibus:
https://github.com/rime/home/wiki/RimeWithIBus
sudo apt-get install ibus-rime                   #ibus
fcitx5:
sudo pacman -Sy fcitx5-rime                      # Arch Linux
sudo apt update && sudo apt install fcitx5-rime  # Ubuntu / Debian / Deepin
sudo zypper install fcitx5-rime                  # OpenSUSE
sudo dnf install fcitx5-rime                     # Fedora
plum and rime-ice：
git clone --depth 1 https://github.com/rime/plum ~/plum
;; 切换到东风破的目录
cd ~/plum
;; 如果你使用Fcitx5，你需要加入参数，让东风破把配置文件写到正确的位置
rime_frontend=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full
;; 如果你是用IBus，则不需加参数，因为东风破默认是为IBus版的RIME打造。
bash rime-install iDvel/rime-ice:others/recipes/full</pre>
</div>


<p>
其他可以参考下面的文章:
</p>

<ul class="org-ul">
<li><a href="https://sspai.com/post/84373#!">自由输入法 RIME 简明配置指南 - 少数派</a></li>

<li><a href="https://sspai.com/post/89281">RIME + 雾凇拼音，打造绝佳的开源文字输入体验 - 少数派</a></li>

<li><a href="https://sspai.com/post/90068">让 RIME 体验更上一层楼：如何用 MediaWiki 扩展词库 - 少数派</a>  导入wiki</li>

<li><a href="https://github.com/gshang2017/rime-dict">gshang2017/rime-dict: RIME输入法(拼音)自用词库(包含英语，基础，维基，搜狗等词库)，词频基于腾讯AI向量词库逆序生成。</a>  自建词库，导入专业领域词汇</li>
</ul>
</div>
</li>
</ul>
</li>

<li><a id="org46fcb81"></a>MarkdownPreview<br>
<div class="outline-text-5" id="text-org46fcb81">
<p>
<a href="https://github.com/iamcco/markdown-preview.nvim">iamcco/markdown-preview.nvim</a>提供实时的markdown预览，对于经常写md的不是那么必须，拿不准的可以预览看看的整体效果。输入 <code>:MarkdownPreview</code> 就会在浏览器里打开预览。
</p>

<p>
当然，还有个更简单的办法，在Typora里打开:
</p>

<div class="org-src-container">
<pre class="src src-lua">
-- 定义一个函数,用于在 Typora 中打开当前缓冲区文件 --
local function open_with_typora()
    local current_file = vim.api.nvim_buf_get_name(0)
    vim.cmd('!open -a Typora "' .. current_file .. '"')
end
-- 将该函数绑定到 <leader>t 快捷键
vim.keymap.set('n', '<leader>fo', open_with_typora, { desc = 'Open current buffer in Typora' })
-- end</pre>
</div>

<ul class="org-ul">
<li><p>
安装
</p>

<p>
在Nvim里使用Lazy安装会报错，这个 <a href="https://github.com/iamcco/markdown-preview.nvim/issues/690">issue</a> 给出了解决办法：
</p>

<div class="org-src-container">
<pre class="src src-lua">  {
    -- Install markdown preview, use npx if available.
    "iamcco/markdown-preview.nvim",
    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
    ft = { "markdown" },
    build = function(plugin)
      if vim.fn.executable "npx" then
        vim.cmd("!cd " .. plugin.dir .. " && cd app && npx --yes yarn install")
      else
        vim.cmd [[Lazy load markdown-preview.nvim]]
        vim.fn["mkdp#util#install"]()
      end
    end,
    init = function()
      if vim.fn.executable "npx" then vim.g.mkdp_filetypes = { "markdown" } end
    end,
  },</pre>
</div></li>

<li><p>
配置
</p>

<p>
其他的基本不用怎么配置，下面是指定浏览器的配置：
</p>

<div class="org-src-container">
<pre class="src src-nil">Add the following to your Neovim init script:
Linux
  function OpenMarkdownPreview (url)
    execute "silent ! firefox --new-window " . a:url
  endfunction
  let g:mkdp_browserfunc = 'OpenMarkdownPreview'
Replace firefox with chrome if you prefer. Both browsers recognize the --new-window option.
macOS
  function OpenMarkdownPreview (url)
    execute "silent ! open -a Firefox -n --args --new-window " . a:url
  endfunction
  let g:mkdp_browserfunc = 'OpenMarkdownPreview'
Replace Firefox with Google\ Chrome or Brave\ Browser if you prefer. They all recognize the --new-window option.</pre>
</div></li>
</ul>
</div>
</li>

<li><a id="org238c648"></a>网页摘录和after-reading<br>
<div class="outline-text-5" id="text-org238c648">
<p>
利用org-capture，做剪藏和摘录很方便。现在保存在~clip.org~文件里，可以在agenda里按时间线回顾，由于agenda里只有标题，也起到了类似Anki卡片回顾的作用：
</p>

<p>
有一个JavaScript我一直在用，可以选定一个网页的特定内容，在翻译和剪藏的时候挺有用，同时也微微提升了一点阅读体验。我用 <a href="https://github.com/OwO-Network/DeepLX">DeepLX</a>  通过沉浸式翻译如果单次翻译内容太多会报错和限制，Deepl的中文翻译还是吊打其他的。
</p>

<p>
下面的代码保存到书签，单击书签就可以了：
</p>

<div class="org-src-container">
<pre class="src src-nil">javascript:(function(){var e=document.body;const n=document.head.appendChild(document.createElement("style"));n.textContent=".mainonly { outline: 2px solid red; }";const t=CSS.supports("selector(:has(*))");function o(n){n instanceof HTMLElement&&(e.classList.remove("mainonly"),(e=n).classList.add("mainonly"))}function s(e){o(e.target)}function a(o){if(o.preventDefault(),t)n.textContent=":not(:has(.mainonly), .mainonly, .mainonly *) { display: none; }";else{n.textContent=":not(.mainonly *, .mainonly-ancestor) { display: none; }";var s=e;do{s.classList.add("mainonly-ancestor")}while(s=s.parentElement)}l()}function i(n){n.preventDefault(),n.deltaY<0?o(e.parentElement):o(e.firstElementChild)}function l(){document.removeEventListener("mouseover",s),document.removeEventListener("click",a),document.removeEventListener("wheel",i)}document.addEventListener("mouseover",s),document.addEventListener("click",a),document.addEventListener("wheel",i,{passive:!1}),document.addEventListener("keydown",(function o(s){if("Escape"===s.key&&(n.remove(),document.removeEventListener("keydown",o),l(),e?.classList.remove("mainonly"),!t))for(const e of document.getElementsByClassName("mainonly-ancestor"))e.classList.remove("mainonly-ancestor")}))}())</pre>
</div>

<p>
after-reading我一直用的 <a href="https://docs.omnivore.app/zh/">Omnivore</a>，开源免费，支持RSS和Newsletter，可以自动同步高亮标注、摘录到Obsidian和Logseq。这部分用来做 <a href="https://www.vandee.art/posts/2024-06-18-%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BF%9D%E9%B2%9C%E6%9C%9F-%E6%B5%81%E5%8A%A8%E7%9F%A5%E8%AF%86%E7%9A%84%E6%A3%80%E7%B4%A2/">流动知识的检索</a>，文档+RAG现在的项目也越来越多了。用AI来过滤、总结这些信息流很巴适。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee's Blog</a>
</p>

<p>
有条件直接上 <a href="https://readwise.io/">Readwise</a>，配合Notion、Obsidian、Logseq都挺好用。<a href="https://getpocket.com/home?src=navbar">Pocket</a>、<a href="https://github.com/usememos/memos">memos</a> 也挺不错，可以把阅读整合到PKM里。
</p>

<p>
<a href="https://n8n.akashio.com/welcome">欢迎来到 n8n 中文教程 | 简单易懂的现代魔法</a>这里给出了一个 omnivore 到 notion 的 workflow。
</p>

<p>
最近<a href="https://www.vandee.art/posts/2024-07-24-start-to-get-readwies/">还是入坑了 Readwise</a>。
</p>
</div>

<ul class="org-ul">
<li><a id="orgc10a10d"></a>tools<br>
<div class="outline-text-6" id="text-orgc10a10d">
<ul class="org-ul">
<li><p>
网站：<a href="https://jina.ai/reader/">https://jina.ai/reader/</a>
</p>

<p>
Github：<a href="https://github.com/jina-ai/reader">https://github.com/jina-ai/reader</a>
</p>

<p>
它可以提取网页内容并转换为markdown格式，还支持直接搜索，支持API。
</p>

<p>
Reader does two things:
</p>

<ul class="org-ul">
<li><b>Read</b>: It converts any URL to an <b>LLM-friendly</b> input with <code>https://r.jina.ai/https://your.url</code>. Get improved output for your agent and RAG systems at no cost.</li>
<li><b>Search</b>: It searches the web for a given query with <code>https://s.jina.ai/your+query</code>. This allows your LLMs to access the latest world knowledge from the web.</li>
</ul>

<p>
添加下面代码到书签保存，点击书签就可以提取网页内容到markdown格式了。
</p>

<div class="org-src-container">
<pre class="src src-javascript">  javascript: var currentUrl = window.location.href;var newUrl = "https://r.jina.ai/" + currentUrl;window.open(newUrl, '_blank');window.history.pushState({}, '', currentUrl);</pre>
</div></li>
</ul>


<p>
以这个工具为跳板，就可以干许多有意思的事情了。
</p>

<ul class="org-ul">
<li><a href="https://github.com/JimmyLv/BibiGPT-v1">JimmyLv/BibiGPT-v1</a> 这个项目可以自己部署，总结B站、YouTube、抖音等等的视频内容，挺好用。</li>

<li><a href="https://sspai.com/post/89828">u-Sir/drag-to-preview</a>，最近发现一个Firefox浏览器插件，可以选中网页链接拖拽弹出单独的窗口预览网页，在窗口外区域鼠标点击即可关闭，很符合我的胃口。</li>
</ul>
</div>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orga36f44c" class="outline-3">
<h3 id="orga36f44c">PKM with LLM</h3>
<div class="outline-text-3" id="text-orga36f44c">
<p>
本地笔记的优势除了隐私性，再就是，数据在自己手上，就可以干很多事。把本地的笔记文档结合LLM做思维拓展，基于个人思维习惯更精确的问答。如果说有时候双链不足以串联整个思维链条，下面这些工具如虎添翼。
</p>

<p>
看到一个大佬已经用Ollama、RAG在MacBook Pro M3 Max上实现了基于obsidian的个人AI知识助手：<a href="https://lopespm.com/machine_learning/2024/06/24/personal-llm.html">个人本地 (Llama3 8B) LLM 使用 WhatsApp + Obsidian 数据扩展 - Byte Tank</a>，和我的思路基本一致。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee's Blog</a>
</p>

<p>
很久之前，看到一篇文章提出了一个观点：随着和LLM互动的增多，特别是现在各种LLM平台，ChatGPT、Claude、perplexity等等，查询、回顾、汇总这些问答是一个值得注意的点。
</p>

<p>
现在我的日常问答都在本地使用Open WebUI，可以导出聊天还有数据库可以直接备份，甚至还可以给对话打tag，当然也可以搜索。
</p>
</div>

<div id="outline-container-org2108ba9" class="outline-4">
<h4 id="org2108ba9">Ollama</h4>
<div class="outline-text-4" id="text-org2108ba9">
<p>
<a href="https://ollama.com/">Ollama</a> 可以本地部署大语言模型，目前GitHub 69.1k star，一直在用。obsidian，Emacs，Logseq都支持。如果说Cloudflare是赛博活菩萨，那ollama就是LLM筋斗云。
</p>

<p>
ollama支持主流的开源模型如llama3，所有支持模型可查看：
</p>

<p>
<b>Model library</b> ：Ollama supports a list of models available on <a href="https://ollama.com/library">ollama.com/library</a>
</p>

<p>
相关文章：
</p>

<ul class="org-ul">
<li><a href="https://blog.inoki.cc/2024/04/16/Ollama-cn/">Ollama 架构解析 | Inoki in the world</a></li>
</ul>
</div>
</div>


<div id="outline-container-org5b4d0da" class="outline-4">
<h4 id="org5b4d0da">Open WebUI</h4>
<div class="outline-text-4" id="text-org5b4d0da">
<p>
<a href="https://github.com/open-webui/open-webui">Open WebUI</a> 提供一个WebUI运行本地LLM，目前GitHub 31k star。良好的兼容ollama，聊天数据本地保存，可本地导入文档做RAG查询。
</p>

<p>
<a href="https://openwebui.com/#open-webui-community">社区</a>提供了插件和功能，质变的是：可以让本地LLM搜索web的内容。
</p>

<p>
Open WebUI 在2024-10-06的版本中<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes，不过只支持原生的HTML和CSS。还更新了Overview，可以在白板里展示对话的内容，太实用了，史诗级更新！
</p>

<p>
*其他主要功能*：
</p>

<ul class="org-ul">
<li>📚 本地 RAG 集成：通过突破性的检索增强生成 (RAG) 支持深入探索聊天交互的未来。此功能将文档交互无缝集成到您的聊天体验中。您可以将文档直接加载到聊天中或将文件添加到文档库中，在查询之前使用 <code>#</code> 命令轻松访问它们。</li>

<li>🔍 RAG 的网络搜索：使用 <code>SearXNG</code> 、 <code>Google PSE</code> 、 <code>Brave Search</code> 、 <code>serpstack</code> 、 <code>serper</code> 、 <code>Serply</code> 、 <code>DuckDuckGo</code> 和 <code>TavilySearch</code> 并将结果直接注入您的聊天体验中。</li>

<li>🌐 网页浏览功能：使用 <code>#</code> 命令后跟 URL，将网站无缝集成到您的聊天体验中。此功能允许您将网络内容直接合并到您的对话中，从而增强交互的丰富性和深度。</li>
</ul>

<p>
<b>docker部署相当简单</b> ：
</p>

<ul class="org-ul">
<li>CLI: <code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</code></li>

<li><p>
Docker compose: <a href="https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml">https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml</a>
</p>

<div class="org-src-container">
<pre class="src src-yaml">services:
    ollama:
      volumes:
        - ollama:/root/.ollama
      container_name: ollama
      pull_policy: always
      tty: true
      restart: unless-stopped
      image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    open-webui:
      build:
        context: .
        args:
          OLLAMA_BASE_URL: '/ollama'
        dockerfile: Dockerfile
      image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
      container_name: open-webui
      volumes:
        - open-webui:/app/backend/data
      depends_on:
        - ollama
      ports:
        - ${OPEN_WEBUI_PORT-3000}:8080
      environment:
        - 'OLLAMA_BASE_URL=http://ollama:11434'
        - 'WEBUI_SECRET_KEY='
      extra_hosts:
        - host.docker.internal:host-gateway
      restart: unless-stopped
  volumes:
    ollama: {}
    open-webui: {}</pre>
</div></li>

<li><a href="https://docs.openwebui.com/getting-started/updating"> Updating | Open WebUI</a></li>
</ul>

<p>
Ref：<a href="https://docs.openwebui.com/">Open WebUI 官方手册</a>
</p>
</div>
</div>


<div id="outline-container-orge3f8d71" class="outline-4">
<h4 id="orge3f8d71"><b>Kotaemon</b></h4>
<div class="outline-text-4" id="text-orge3f8d71">
<p>
从发现到现在差不多就一个多星期，GitHub直接飙升到10.9K star，win、mac、Linux都支持。边用边学习它的RAG构建框架，支持ollama，支持docker。
</p>

<p>
GitHub: <a href="https://github.com/Cinnamon/kotaemon">https://github.com/Cinnamon/kotaemon</a>
</p>

<p>
Hugging Face 在线体验: <a href="https://huggingface.co/spaces/cin-model/kotaemon-demo">https://huggingface.co/spaces/cin-model/kotaemon-demo</a>
</p>

<p>
官方介绍：
</p>

<p>
This project serves as a functional RAG UI for both end users who want to do QA on their documents and developers who want to build their own RAG pipeline.
</p>

<ul class="org-ul">
<li>For end users:
<ul class="org-ul">
<li>A clean &amp; minimalistic UI for RAG-based QA.</li>
<li>Supports LLM API providers (OpenAI, AzureOpenAI, Cohere, etc) and local LLMs (via <code>ollama</code> and ~llama-cpp-python`).</li>
<li>Easy installation scripts.</li>
</ul></li>
<li>For developers:
<ul class="org-ul">
<li>A framework for building your own RAG-based document QA pipeline.</li>
<li>Customize and see your RAG pipeline in action with the provided UI (built with <a href="https://github.com/gradio-app/gradio">Gradio</a>).</li>
<li>If you use Gradio for development, check out our theme here: <a href="https://github.com/lone17/kotaemon-gradio-theme">kotaemon-gradio-theme</a>.</li>
</ul></li>
</ul>
</div>
</div>
</div>
</div>

<div id="outline-container-org5b0f204" class="outline-2">
<h2 id="org5b0f204">Thanks</h2>
<div class="outline-text-2" id="text-org5b0f204">
<p>
这个手册会持续更新，如果对你有所帮助，我会很开心。
</p>

<p>
另见：<a href="https://www.vandee.art/2024-05-22-org-pkm-manual.html">PKM（个人知识管理）构建手册 - Emacs</a>
</p>

<p>
这里是我日常使用的实用小工具： <a href="https://www.vandee.art/2024-07-26-useful-tools-recommended.html">实用小玩意收集</a>
</p>

<p>
Imagining and creating！
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <link>https://www.vandee.art/blog/2024-08-02-nvim-pkm-manual.html</link>
  <guid>https://www.vandee.art/blog/2024-08-02-nvim-pkm-manual.html</guid>
  <pubDate>Fri, 02 Aug 2024 14:30:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[艺术的模仿游戏]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1689e83">模仿、游戏、亵渎</a></li>
<li><a href="#org8667701">艺术和模仿</a></li>
<li><a href="#org69a0c1c">创造力与记忆力</a></li>
<li><a href="#org9aca459">模仿游戏</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org1689e83" class="outline-2">
<h2 id="org1689e83">模仿、游戏、亵渎</h2>
<div class="outline-text-2" id="text-org1689e83">
<p>
<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>，RSS推送了这个订阅。如果你也喜欢思考，那么大概率你也会爱上这篇文章里提出的思考。
</p>

<p>
你可能会厌烦我在这类post里列举的大篇幅原文和我的原文，它们占据了页面里的许多篇幅，占用了你的注意力，让你现在就想赶紧滑过去看到下一个醒目的标题。你可能也会同样厌烦我在这些原文里留下的思维痕迹，没有提供给你一个纯净的思考空间。
</p>

<p>
对我而言，在写这些类似读书笔记的post时，它就像是一场无关时间和空间的另一个时间线可能存在的对话。这类post大多也没有具体行文的逻辑，因为这就是思考在最初的样子。我想尽力还原这个纯净的思考空间。
</p>

<blockquote>
<p>
除去用于维生所需，人每天还有大量能量剩余，有些人多到会溢出，必须加以消磨。有人因此思考自身处境，就有了宗教和艺术。有人因此考虑世界和存在，就有了哲学和科学。有人因此觉察到匆匆的时间之流，意识到自己只是一个个连续的此时此刻在不断流逝，因而想要抓住永恒，于是有了形形色色的创造物。一切都是易逝的，唯有回忆留存，创造物可以记录瞬间，可以唤起回忆，因此它是永恒的表征。溢出的能量让人去创造。而创造就是模仿。
</p>
</blockquote>

<p>
在<a href="https://www.vandee.art/2023-11-24-something-about-boring.html">都是因为无聊</a>里我从另一个角度也思考到了这个问题：
</p>

<blockquote>
<p>
无聊同样也是想象力的来源，人类进步的来源。
</p>

<p>
阿基米德洗澡的时候无聊，发现了浮力；牛顿在苹果树下面无聊（有争议），发现了万有引力；伽利略对着天空无聊，发明了天文望远镜进一步证实了哥白尼的日心说；达尔文喜欢对着动植物无聊，提出了自然选择；爱因斯坦对着时间无聊，想搞清楚时间到底是什么，提出了相对论；尼古拉・特斯拉对着黑夜无聊，做出了第一个交流电发动机（本人讨厌爱迪生）；
</p>

<p>
人对着木头无聊，点着了火。
</p>
</blockquote>

<p>
最近巴黎奥运开幕式国内外的争议很多。草草的浏览了国内外主流平台的新闻言论和一些关注的RSS推送，还是这篇最炙热，这些文字让我的大脑像火锅里被烫的猪脑一样炙热滚烫：
</p>

<blockquote>
<p>
就像是只要出现一张长条桌，再安排13个人坐在那里，亵渎的潜在可能性就已经产生了。因为13个人加一张长条桌，作为一种对于历史和宗教的模拟，已经被确定为特定的形式。有人借用这个形式重新模拟，构成一个游戏的一部分，那么就会和部分人的特定解读相互冲突。但是占据形式这个想法本身，不就是个很荒谬么？印度教徒或者佛教徒，不会宣布垄断打坐这个形式，不会因此有一只猫或者一个朋克摆出这个姿势就会让他们上火。从游戏的角度来看，感到亵渎或者愤怒本身就是游戏成功的象征。
</p>

<p>
因为一次模拟就是一种重构，就是一次重新解读，就是在回忆之海里投入一个新的锚标。模仿本身就具有一种邀约的姿态，邀请另外一个人来观看，从另外一个角度去观看他认为熟悉的事物。当这个人不愿意从他熟悉的事物上离开自己惯常的理解，碰撞就已经发生，游戏的使命其实已经完成。一个寂然无声，没有任何反馈的游戏才是失败的游戏。
</p>
</blockquote>

<p>
艺术就是对我来说最有趣的模仿游戏了。
</p>
</div>
</div>

<div id="outline-container-org8667701" class="outline-2">
<h2 id="org8667701">艺术和模仿</h2>
<div class="outline-text-2" id="text-org8667701">
<p>
《艺术的故事》和《现代艺术150年》这两本书从历史的角度，阐述了一个让我担忧的结论：艺术本身可能并不存在，存在的只是艺术品。
</p>

<p>
现代艺术更不用说，资本引导着艺术的潮流。与印象派起源的19世纪初期到现代艺术萌芽的20世纪初期相比，艺术的自由早就不复存在了。现在已经看不到在巴提诺格里斯大街11号（现为克里希大街9号）的咖啡馆里曾经热闹的景象。保罗·塞尚、埃德加·德加、莫奈等大佬们，数年来他们都聚在这里，讨论艺术和人生（在这个阶段他们常常被简称为“巴提诺格里斯小组”）。印象派之父马奈的工作室就在附近。印象派小分队的成员都拿各自的生涯作赌注，决定不理会学院的那套系统，最终宣起了印象派革命。
</p>

<p>
正是那个时候革命与机械化就催生了一个被称为资产阶级的新的社会阶层。路易斯·勒罗伊做梦也不会想到，他对莫奈的绘画《日出·印象》的苛刻评论竟然催生出了伟大的印象派。资本的这些规则是与艺术同在的另一个推动力，没有资本的规则艺术品的价值可能永远不会被推到现代艺术的高度。它们固然很可恶但也激发着真正的“艺术家”去完成超越资本规则的艺术品。
</p>

<p>
也更难看到马塞尔·杜尚幽默叛逆的《泉》、保罗·塞尚《圣维克多山》独特的双视角理念对视觉透视的颠覆、达达主义对于现实的嘲讽、梵高向日葵的橙黄的炙热与癫狂的深蓝、毕加索《亚维农的少女》粗狂的立体主义几何色块、萨尔瓦多·达利《记忆的永恒》重构的想象力。
</p>

<p>
我喜欢艺术的根本原因是 <b>我喜欢关于创造的一切</b> 。<a href="https://mp.weixin.qq.com/s/1Lz276s_RjdaSN3NXOIuHw">模仿、游戏和亵渎</a>的作者谈到：
</p>

<blockquote>
<p>
而创造就是模仿，以前我没想明白这个问题，认为存在两分法，90%的模仿和10%的独创。不是这样的，只有模仿。模仿自然界的实际存在，于是有了古代艺术，岩壁上的手绘野牛，或者古埃及墓穴壁画里的花园，乃至古希腊人创作出来的惟妙惟肖石雕，都是模仿。
</p>

<p>
人会睡去，人会遗忘，人会死亡，眼前的一切转眼成空，所以要模仿。通过模仿实际存在，模仿现实世界，一张画，一座雕塑，都可以对抗这种无尽的消逝。很多年前的某个下午早已过去，早已消逝，早已遗忘，但是通过人为创造物，人们又可以回到那个下午，一切如昨。这件事情很重要，人需要不断确定自己处于连续不断的生命之流里，需要确认自己是一种连续的存在，方法就是在回忆中流畅地沿着时间线回溯到任意一点。而每一点都是曾经的此时此刻，所有的此时此刻加在一起，就是自己存在的证据。
</p>
</blockquote>

<p>
我不想去承认创造就是模仿这个事实，就像我不想去承认艺术可能其实并不存在这个事实。语言的表达是非常有限的，所以我更喜欢艺术的表达和逻辑辩证的表达。“而创造就是模仿”这句话，结合全篇的文章你也无法说明作者真正想表达的意思是什么，因为这牵扯到作者一生的经历。
</p>

<p>
我更愿意换句话来表达：创造易是模仿，对大自然的模仿。我喜欢用“易”来指代“亦”，类似于文言文里的通假字。“就是”在逻辑上表示一个或非的判断，在大的论点里我不喜欢用逻辑上的判断来表达观点，这样的表达在缺失逻辑推理过程时，难免会让人质疑，也没有那么绝对的事情。
</p>

<p>
我其实不喜欢深究概念本身，就像我喜欢印象派和抽象派一样。没有绝对的真实，只有每个人不同的印象。这些抽象的印象更加真实，每一个客观事实的实例对于不同个体在不同时空的意义都不会是相同的。水对于原子世界是 H₂O，它也是“上善若水”，它也是农夫山泉，对于地球生命它是生命之源。所以水是什么？回答这个问题，或者这个问题本身不重要，这些概念只是我们思维的重构，只是我们对物质的反馈。这对于水来说是不公平的，你会喜欢别人随便给你起外号么？印象派对于自然就包容太多了，而抽象派、超现实主义则在概念上进一步解构和重构。
</p>

<p>
把话题缩小一些，艺术创造就是模仿么？所有的创造都可以看作是对大自然的模仿，特别是艺术方面的创造。黄金比例是人类从数学角度对自然拙劣的模仿、透视法是从几何角度对自然空间拙劣的模仿、色彩科学是从光谱角度对自然的拙劣模仿。这里的“模仿”更准确的逻辑语义表达可能是“重构”，重构我们人类对于物质的解释与反馈。用计算机语言来说就是，物质给予了一个输入，人类大脑本能的反馈输出，我们不可能避免这个过程，因为这是生命的脉动。
</p>

<p>
这些重构就根据不同的大脑结构分成了许多种：文学家写文学、科学家做研究、艺术家做艺术品。
</p>

<p>
所以我不喜欢深究概念，无常才是常，无序才是秩序。我们仅仅是在做自己生物结构擅长、喜欢做的事而已。基于每个差异化的个体，对于自然、物质世界实时的反馈。所以艺术就是模仿么？我更愿意说，艺术是所有物质世界信息与反馈的一个巨大巧合。
</p>

<p>
我相信量子力学在未来的研究里一定会颠覆现代科学的认知结构。
</p>
</div>
</div>

<div id="outline-container-org69a0c1c" class="outline-2">
<h2 id="org69a0c1c">创造力与记忆力</h2>
<div class="outline-text-2" id="text-org69a0c1c">
<p>
<a href="https://shwin.co/blog/creativity-fundamentally-comes-from-memorization">创造力从根本上来自记忆 &#x2014; Creativity Fundamentally Comes From Memorization</a>，正好看到这篇推送，和前几天的post主题挺契合，几个观点挺有意思：
</p>

<ul class="org-ul">
<li><p>
自治可以激发创造力
</p>

<blockquote>
<p>
Creativity comes to those who have internalized the patterns of their art &#x2013; they can see the connection or novelty because it's all in their head.
</p>

<p>
创造力属于那些已经内化了艺术模式的人——他们可以看到其中的联系或新奇之处，因为这一切都在他们的脑海中。
</p>

<p>
Therefore autonomy enables creativity, and a system helps achieve autonomy quicker.
</p>

<p>
因此，自治可以激发创造力，而系统有助于更快地实现自治。
</p>
</blockquote></li>

<li><p>
系统并不直接产生创造力，而只是激发创造力
</p>

<blockquote>
<p>
The key here is memorization's role in learning. We often tout the difference between memorization and true "understanding", which are indeed distinct. Memorizing the different methods of attacking mathematical integrations is different from being able to use the right one in the moment.
</p>

<p>
这里的关键是记忆在学习中的作用。我们经常吹捧记忆和真正的“理解”之间的区别，这确实是截然不同的。记住攻击数学积分的不同方法与能够立即使用正确的方法是不同的。
</p>

<p>
But I maintain that such pattern recognition is just another form of memorization, though often a more subconscious one. This is learned from repeated exposure, and what I'm attempting to do when I try to see a "breadth" of cases after learning the framework and available patterns to use.
</p>

<p>
但我坚持认为，这种模式识别只是记忆的另一种形式，尽管通常是一种更潜意识的形式。这是从反复接触中学到的，也是我在学习框架和可用模式后尝试查看“广泛”案例时尝试做的事情。
</p>

<p>
What this is really doing under the hood, is creating a heuristic and&#x2026; wait for it&#x2026; memorizing it!
</p>

<p>
这实际上在幕后做的事情是创建启发式并且&#x2026;&#x2026;等待它&#x2026;&#x2026;记住它！
</p>

<p>
Once this heuristic is internalized, it becomes a new primitive and we focus our attention to higher-level problems.
</p>

<p>
一旦这种启发式被内化，它就成为一个新的原语，我们将注意力集中在更高层次的问题上。
</p>

<p>
Once a dancer learns the fundamental movements of their specialization, they're able to improvise. So are pianists once they learn scales, and mathematicians (though sadly many of us never experience the joy of mathematical improvisation &#x2013; as Paul Lockhart covers in his <a href="https://worrydream.com/refs/Lockhart_2002_-_A_Mathematician's_Lament.pdf">Mathematician's Lament</a>).
</p>

<p>
一旦舞者学会了其专业的基本动作，他们就能够即兴创作。一旦钢琴家学习了音阶，数学家也是如此（尽管遗憾的是，我们中的许多人从未体验过数学即兴创作的乐趣——正如保罗·洛克哈特在他的《数学家的挽歌》中所提到的那样）。
</p>

<p>
The key is understanding that a system doesn't directly <b>make</b> creativity, it just <b>enables</b> it. Memorization’s role is similar.
</p>

<p>
关键是要理解系统并不直接产生创造力，而只是激发创造力。记忆的作用是类似的。
</p>

<p>
Another strategy that works well in both humor and famous EDM drops is "violating the expectation", but you need to know the expectation before you can violate it. Once you learn music theory, you're able to violate it in ways that resonate. Avant-garde art requires knowing what the establishment is to push the boundaries as orthogonally as possible.
</p>

<p>
另一种在幽默和著名 EDM 中都有效的策略是“违反期望”，但在违反期望之前您需要先了解期望。一旦你学习了音乐理论，你就能够以引起共鸣的方式违反它。前卫艺术需要了解其体系是什么，以尽可能正交地突破界限。
</p>
</blockquote></li>
</ul>
</div>
</div>



<div id="outline-container-org9aca459" class="outline-2">
<h2 id="org9aca459">模仿游戏</h2>
<div class="outline-text-2" id="text-org9aca459">
<p>
<a href="https://movie.douban.com/subject/10463953/">模仿游戏</a>是我很喜欢的一部电影，讲的是图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）制作密码破译机的故事。电影的名字和今天讨论的模仿游戏完全是一个巧合。只是在重复敲打模仿、游戏时，这个电影一直在我的脑子里窜来窜去，干脆把你放出来好了。黑客帝国也放出来好了，<a href="https://www.vandee.art/2023-02-23-blue-or-red.html">蓝色药丸还是红色药丸？</a> 🤣。
</p>

<p>
现在的LLM大语言模型同样是一个模仿游戏。LLM是一个巨大的ZIP文档，它是一个世界的快照，压缩了快照时间点互联网、人类知识的巨大信息，是现实世界最大的模仿游戏，往后更会是人类历史的一部分，它既是记录者也是开创者。
</p>

<p>
在这个游戏里，人类千万别输了。
</p>

<blockquote>
<p>
Being multidimensional means recognizing and nurturing the various aspects that make you who you are. Just like a prism splitting white light into different colors, imagine yourself to be made of those different "colors". You have a unique permutation of talents, and experiences. By accepting and practising these aspects of yourself, you can grow beyond the limits set by society's standard expectations.
</p>

<p>
多维意味着认识和培养使你成为你的各个方面。就像三棱镜把白光分成不同的颜色一样，想象一下你自己就是由这些不同的 "颜色 "组成的。你拥有独特的天赋和经验。接受并实践自己的这些方面，你就能超越社会标准期望所设定的限制，获得成长。
</p>

<p>
The most interesting part is: you get to define your own dimensions.
</p>

<p>
最有趣的是：你可以定义自己的维度。
</p>

<p>
<a href="https://maharshi.bearblog.dev/become-a-multidimensional-person/">Be multidimensional, anon | Maharshi's blog</a>
</p>
</blockquote>

<p>
我更喜欢艺术的模仿游戏。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/blog/2024-07-30-the-imitation-game-of-art.html</link>
  <guid>https://www.vandee.art/blog/2024-07-30-the-imitation-game-of-art.html</guid>
  <pubDate>Tue, 30 Jul 2024 21:15:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[实用小玩意收集]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge58a95c">My Favorites</a></li>
<li><a href="#org883d09e">Mac</a></li>
<li><a href="#org03213a6">Search</a></li>
<li><a href="#orgb91a0ed">论文</a></li>
<li><a href="#orgb356d2f">LLM Web Chat</a></li>
<li><a href="#org5f01e72">Others</a>
<ul>
<li><a href="#org1591121">PDF相关</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
汇总一些实用的工具、软件、网站，长期更新。
</p>

<p>
阮一峰的GitHub weekly issues： <a href="https://github.com/ruanyf/weekly/issues">https://github.com/ruanyf/weekly/issues</a> ，可以找到许多有意思的东西。
</p>

<p>
日常的搜集第一次整理之后有了工具汇总表格版：<a href="https://app.teable.io/share/shrlzO2q7vyCEJYvXqa/view">tools</a> ，这里做第二次筛选。
</p>

<div id="outline-container-orge58a95c" class="outline-2">
<h2 id="orge58a95c">My Favorites</h2>
<div class="outline-text-2" id="text-orge58a95c">
<ul class="org-ul">
<li><p>
<b>Vimium</b>
</p>

<p>
浏览器插件，可以用 Vim 模式来操作浏览器。最喜欢它的快速打开地址栏功能，兼并自定义搜索。在 Firefox 里，自定义了垂直标签栏，再加上这个，还要什么 Arc？
</p></li>
<li><p>
<b>RIME</b>
</p>

<p>
输入法就是笔。
</p>

<p>
<a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p></li>

<li><p>
<b>Napkin</b>
</p>

<p>
一个可以根据文字内容生成关系图的在线笔记编辑工具，目前还在beta测试阶段可以免费体验PRO的内容，生产力提高不是一点点。生成的关系图可以再详细编辑标题，图标等等，支持导出为PNG、SVG、PDF。
</p>

<p>
Url：<a href="https://www.napkin.ai/">https://www.napkin.ai/</a>
</p></li>
<li><p>
<b>Witsy</b>
</p>

<p>
这就是目前我用过最好的 LLM PC 客户端。
</p>

<p>
Url: <a href="https://github.com/nbonamy/witsy">https://github.com/nbonamy/witsy</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org883d09e" class="outline-2">
<h2 id="org883d09e">Mac</h2>
<div class="outline-text-2" id="text-org883d09e">
<ul class="org-ul">
<li><p>
FlashSpace: FlashSpace is a blazingly fast virtual workspace manager for macOS
</p>

<p>
Github: <a href="https://github.com/wojciech-kulik/FlashSpace">https://github.com/wojciech-kulik/FlashSpace</a>
</p>

<p>
一个简单易用的管理工作区的项目，自定义快捷键就可以切换不同的工作区。平常把 Emacs 和浏览器单独放一个，终端单独放一个。
</p></li>
<li><p>
Maccy：简单易用的剪切板管理工具
</p>

<p>
GitHub：<a href="https://github.com/p0deje/Maccy">https://github.com/p0deje/Maccy</a>
</p></li>
<li><p>
Pearcleaner: A free, source-available and fair-code licensed mac app cleaner
</p>

<p>
Github: <a href="https://github.com/alienator88/Pearcleaner">https://github.com/alienator88/Pearcleaner</a>
</p>

<p>
轻量的软件卸载工具。
</p></li>
<li><p>
<b>PixPin</b>
</p>

<p>
Mac的终于出来了。这是我用过最好用的截图软件了。
</p>

<p>
Url: <a href="https://pixpinapp.com/">https://pixpinapp.com/</a>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org03213a6" class="outline-2">
<h2 id="org03213a6">Search</h2>
<div class="outline-text-2" id="text-org03213a6">
<ul class="org-ul">
<li><p>
<b>Gemini-Search</b>
</p>

<p>
Perplexity style AI Search engine clone built with Gemini 2.0 Flash and Grounding
</p>

<p>
<a href="https://github.com/ammaarreshi/Gemini-Search">https://github.com/ammaarreshi/Gemini-Search</a>
</p></li>
<li><p>
<b>OpenSearch GPT</b>
</p>

<p>
A personalised AI search engine that learns about you and your interests as you browse the web.It's like a perplexity / searchGPT clone, but for <b>you</b>.
</p>

<p>
开源AI 搜索引擎，使用了mem0来存储记忆。部署在Cloudflare上，作者仅用了一天制作完成。
</p>

<p>
Url: <a href="https://opensearch-ai.pages.dev/">https://opensearch-ai.pages.dev/</a>
</p>

<p>
GitHub: <a href="https://github.com/supermemoryai/opensearch-ai">https://github.com/supermemoryai/opensearch-ai</a>
</p>

<p>
Twitter: <a href="https://x.com/DhravyaShah/status/1818469911490162784">https://x.com/DhravyaShah/status/1818469911490162784</a>
</p>

<p>
<a href="https://github.com/Dhravya/cloudflare-saas-stack">https://github.com/Dhravya/cloudflare-saas-stack</a>  这是作者的之前的Cloudflare全栈方案。
</p></li>

<li><p>
<b>Perplexica</b>
</p>

<p>
GitHub: <a href="https://github.com/ItzCrazyKns/Perplexica">https://github.com/ItzCrazyKns/Perplexica</a>
</p>

<p>
perplexity的开源平替，GitHub 11.4K Star。可docker部署，支持ollama本地模型。由于它的网络搜索依赖于SearXNG，等于还附送了一个SearXNG的本地实例。
</p></li>

<li><p>
<b>Grep</b>
</p>

<p>
一个快速从GitHub仓库查找内容的网站，支持正则，可以直接搜索代码内容
</p>

<p>
Url: <a href="https://grep.app/">https://grep.app/</a>
</p></li>

<li><p>
<b>devv.ai</b>
</p>

<p>
程序员搜索利器
</p>

<p>
<a href="https://devv.ai/zh">https://devv.ai/zh</a>
</p></li>

<li><p>
<b>mwmbl</b>
</p>

<p>
一个可以由用户提供爬取源的开源搜索引擎，github 文档里还介绍了其他许多优秀的搜索引擎
<a href="https://mwmbl.org/">https://mwmbl.org/</a>
</p>

<p>
GitHub: <a href="https://github.com/mwmbl/mwmbl">https://github.com/mwmbl/mwmbl</a>
</p></li>

<li><p>
<b>SearchGPT</b>
</p>

<p>
OpenAI推出的搜索。
</p>

<p>
<a href="https://openai.com/index/searchgpt-prototype/">https://openai.com/index/searchgpt-prototype/</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgb91a0ed" class="outline-2">
<h2 id="orgb91a0ed">论文</h2>
<div class="outline-text-2" id="text-orgb91a0ed">
<ul class="org-ul">
<li><p>
alphaxiv：斯坦福大学的学生做的一个论文讨论平台。可以理解为基于arXiv论文的Twitter，可以对论文评论，讨论。
</p>

<p>
If you find a paper on arXiv that you’d like to discuss, simply replace arxiv.org with alphaxiv.org in the URL.
</p>

<p>
Url：<a href="https://www.alphaxiv.org/">https://www.alphaxiv.org/</a>
</p></li>

<li><a href="https://www.aminer.cn/">AI论文检索平台 aminer</a></li>

<li><p>
<a href="https://paperswithcode.com/">paper with code</a>
</p>

<p>
这是一个论文和对应工程实现（含代码、数据集、测试方法等）的索引工具。下次你看到别人推荐优质论文时，可以直接用它去找代码实现
</p></li>

<li><a href="https://www.connectedpapers.com/">Connected Papers | Find and explore academic papers</a></li>

<li><a href="https://briefgpt.xyz/">BriefGPT - AI 论文速递</a>  一个中文论文推送网站，还可以</li>

<li><p>
Intro: 一个非常好用的AI论文阅读工具：TXYZ
</p>

<p>
Source:  <a href="https://www.txyz.ai/">https://www.txyz.ai/</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgb356d2f" class="outline-2">
<h2 id="orgb356d2f">LLM Web Chat</h2>
<div class="outline-text-2" id="text-orgb356d2f">
<ul class="org-ul">
<li><p>
<b>DuckDuckGo AI Chat</b>
</p>

<p>
DuckDuckGo推出的AI聊天网页。已更新GPT-4o。
</p>

<p>
<a href="https://duckduckgo.com/?q=DuckDuckGo&amp;ia=chat&amp;atb=v409-1">https://duckduckgo.com/?q=DuckDuckGo&amp;ia=chat&amp;atb=v409-1</a>
</p></li>

<li><p>
<b>HuggingChat</b>
</p>

<p>
HuggingFace推出的AI聊天网页，支持最新的Llama 3.1-405B。
</p>

<p>
<a href="https://huggingface.co/chat/">https://huggingface.co/chat/</a>
</p></li>

<li><p>
<b>POE</b>
</p>

<p>
一个聚合LLM聊天网站，可选择的模型很多，Flux也有。
</p>

<p>
<a href="https://poe.com/">https://poe.com/</a>
</p></li>

<li><p>
<b>delve</b>
</p>

<p>
一个可以根据回答内容递进搜索的AI聊天网页。
</p>

<p>
<a href="https://delve.a9.io/">https://delve.a9.io/</a>
</p></li>

<li><p>
<b>WinGPT</b>
</p>

<p>
一个仿window风格的AI聊天网页，免费GPT-4o。
</p>

<p>
<a href="https://wingpt.vercel.app/">https://wingpt.vercel.app/</a>
</p></li>

<li><p>
<b>ChatGPT-Next-Web</b>
</p>

<p>
很早一批开始做GPT生意的了，他们这还可以买KEY。
</p>

<p>
A cross-platform ChatGPT/Gemini UI (Web / PWA / Linux / Win / MacOS). 一键拥有你自己的跨平台 ChatGPT/Gemini 应用。
</p>

<p>
在 1 分钟内使用 Vercel **免费一键部署**个人的GPT聊天实例。
</p>

<p>
GitHub: <a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web">https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web</a>
</p></li>

<li><p>
<b>Open WebUI</b>
</p>

<p>
Open WebUI 是一个可扩展、功能丰富且用户友好的自托管 WebUI，旨在完全离线操作。它支持各种 LLM 运行程序，包括 Ollama 和 OpenAI 兼容的 API。
</p>

<p>
docker轻松部署。
</p>

<p>
GitHub: <a href="https://github.com/open-webui/open-webui">https://github.com/open-webui/open-webui</a>
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org5f01e72" class="outline-2">
<h2 id="org5f01e72">Others</h2>
<div class="outline-text-2" id="text-org5f01e72">
<p>
另见：表格版 <a href="https://app.teable.io/share/shrlzO2q7vyCEJYvXqa/view">tools</a>
</p>

<ul class="org-ul">
<li><p>
Intro: 一个电子书翻译工具，7K star.利用大语言模型（如 ChatGPT、Claude 等）对文件和图书进行多语言翻译的制作，支持的格式有 epub、txt 以及 srt 等。最近，作者将之前吴恩达老师开源的翻译工作流整合到项目中，使得翻译的效果更加好。
</p>

<p>
Source: <a href="https://github.com/yihong0618/bilingual_book_maker">https://github.com/yihong0618/bilingual_book_maker</a>
</p></li>

<li><p>
GitHub 上一个开源的终端 AI 助手 AI Shell。
</p>

<p>
在终端命令行界面（CLI）上，可通过自然语言转换为对应执行的 Shell 命令，类似于 GitHub Copilot X CLI。
</p>

<p>
GitHub：<a href="https://github.com/BuilderIO/ai-shell">https://github.com/BuilderIO/ai-shell</a>
</p></li>

<li><p>
Stirling-PDF
</p>

<p>
一个本地的处理 PDF 的工具，界面是 Web UI，可以支持 Docker 部署。
</p>

<p>
各种主要的 PDF 操作都可以支持。比如拆分、合并、转换格式、重新排列、添加图片、旋转、压缩等等。这个本地托管的网络应用最初完全由 ChatGPT 制作，后来逐渐发展，增加了许多功能，以满足你对 PDF 的各种需求。
</p>

<p>
Stirling PDF 不会对外发送任何数据以进行记录或跟踪。
</p>

<p>
所有的文件和 PDF 要么只在客户端处理，要么只在服务器内存中暂存，用于执行任务，或者仅在执行任务时保存在临时文件中。一旦用户下载了文件，那些文件就会从服务器上删除。
</p>

<p>
<a href="https://github.com/Stirling-Tools/Stirling-PDF">https://github.com/Stirling-Tools/Stirling-PDF</a>
</p></li>

<li><p>
部署deeplx到cloudflare，比部署到docker方便
</p>

<p>
<a href="https://github.com/ifyour/deeplx-for-cloudflare">https://github.com/ifyour/deeplx-for-cloudflare</a>
</p></li>

<li><p>
功能颇为强大的 GPT 学术优化开源项目 GPT Academic，目前 60.2k Star！
</p>

<p>
GitHub: <a href="https://github.com/binary-husky/gpt_academic">https://github.com/binary-husky/gpt_academic</a>
</p></li>

<li><p>
Intro: 开源离线Notion,支持本地LLM，JavaScript自定义功能
</p>

<p>
Source: <a href="https://github.com/mayneyao/eidos">https://github.com/mayneyao/eidos</a>  、 <a href="https://eidos.space">https://eidos.space</a>
</p></li>
</ul>
</div>

<div id="outline-container-org1591121" class="outline-3">
<h3 id="org1591121">PDF相关</h3>
<div class="outline-text-3" id="text-org1591121">
<p>
PDF转Markdown 方案
</p>

<ol class="org-ol">
<li>document-convert（开源）：<a href="https://github.com/multimodal-art-projection/MAP-NEO/tree/main/Matrix/document-convert">https://github.com/multimodal-art-projection/MAP-NEO/tree/main/Matrix/document-convert</a></li>
<li>Ragflow（开源）：<a href="https://github.com/infiniflow/ragflow">https://github.com/infiniflow/ragflow</a></li>
<li>gptpdf（开源）：<a href="https://github.com/CosmosShadow/gptpdf">https://github.com/CosmosShadow/gptpdf</a></li>
<li>百度云Textmind（闭源）：<a href="https://cloud.baidu.com/product/textmind.html">https://cloud.baidu.com/product/textmind.html</a></li>
<li>doc2x（闭源）：<a href="https://doc2x.noedgeai.com/">https://doc2x.noedgeai.com</a></li>
<li>腾讯云文档解析（闭源）：<a href="https://cloud.tencent.com/document/product/1759/107504">https://cloud.tencent.com/document/product/1759/107504</a></li>
<li>marker（开源）：<a href="https://github.com/VikParuchuri/marker">https://github.com/VikParuchuri/marker</a></li>
<li>PDF-Extract-Kit（开源）：<a href="https://github.com/opendatalab/PDF-Extract-Kit">https://github.com/opendatalab/PDF-Extract-Kit</a></li>
<li>zerox（开源）：<a href="https://github.com/getomni-ai/zerox">https://github.com/getomni-ai/zerox</a></li>
<li>OminiParse（开源）：<a href="https://github.com/adithya-s-k/omniparse">https://github.com/adithya-s-k/omniparse</a></li>
<li>MinerU（开源）：<a href="https://github.com/opendatalab/MinerU">https://github.com/opendatalab/MinerU</a></li>
</ol>
</div>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-tool.html">Tool</a> <a href="https://www.vandee.art/tag-useful.html">Useful</a> </div>]]></description>
  <category><![CDATA[Tool]]></category>
  <category><![CDATA[Useful]]></category>
  <link>https://www.vandee.art/blog/2024-07-26-useful-tools-recommended.html</link>
  <guid>https://www.vandee.art/blog/2024-07-26-useful-tools-recommended.html</guid>
  <pubDate>Fri, 26 Jul 2024 13:42:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[PKM（个人知识管理）构建手册 - Emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3727709">Intro</a></li>
<li><a href="#orge7c22da">Manual</a>
<ul>
<li><a href="#orgfd3da07">Prerequisites</a></li>
<li><a href="#org2d9c967">PKM</a>
<ul>
<li><a href="#orgedf1ccf">Principles</a></li>
<li><a href="#org2bf6285">Methods</a></li>
</ul>
</li>
<li><a href="#org53cf2a7">PKM with LLM</a>
<ul>
<li><a href="#org1b2c75f">Ollama</a></li>
<li><a href="#org32b6d0a">Open WebUI</a></li>
<li><a href="#org9279577">Aider</a></li>
<li><a href="#org075cb9a">gptel</a></li>
<li><a href="#org7390a7c">Kotaemon</a></li>
<li><a href="#orgc7fcdda">Chipper</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgc1c5bf7">ChangeLog</a></li>
<li><a href="#org72ace8f">Thanks</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org3727709" class="outline-2">
<h2 id="org3727709">Intro</h2>
<div class="outline-text-2" id="text-org3727709">
<blockquote>
<p>
For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin. <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a>
</p>

<p>
对我来说，做笔记有助于确保我真正认真思考其中的内容。如果我不同意这本书，有时需要花很长时间才能读完这本书，因为我在页边空白处写了太多内容。—比尔·盖茨
</p>
</blockquote>

<p>
这段时间关于PKM（个人知识管理）的构建起起伏伏，究其原因大概是我的思维工具跟不上思维了，工具用起来不顺手了。好在一些关键的问题都解决了，现在总结梳理成册，提供一个我个人觉得还比较靠谱，能有效的组织思维、呈现思维、扩展思维的PKM手册，也是一个模板。
</p>

<p>
从2022年开始用Notion，那个时候还不知道PKM是什么，就随心所欲的乱记一通。历经了Obsidian、Logseq，再到现在的Emacs，org-mode，通过做笔记和折腾这些笔记软件，不断深入了解这些软件的作者、笔记软件的设计理念，我觉得我的思维、认知、学习方法、写作、表达都有了质的提升。工欲善其事，必先利其器，对我而言，一个称手的笔记工具是很必须的。这个PKM方法就是我披荆斩棘的那个柳条，张三丰的太极，有形易于无形。这也就是在说，一个工具能发挥出多大效果，取决于使用者。爱因斯坦不需要记笔记，他的笔记直接就发表了🤣。对于PKM和做笔记，你可以不用，但我喜欢我有。
</p>

<p>
一个科学的，适合自己的PKM对思维的提升就好像，擎天柱组合了扩展装甲。再加上AI越来越易用，形成一些思维的语料通过LLM来拓展思维一定会是未来更有效的学习模式。而这个「PKM-base」库，就是我的扩展装甲。逐渐的，PKM这个工具和我的思维已经又融为一体，对于这个进展我很兴奋，似乎我离我的<a href="https://www.vandee.art/posts/2023-12-06-learn-all-the-time/">太极</a>又近了一步。
</p>

<p>
作为思维的另一个同步的呈现，以一生来度量，这个手册也会一直更新。
</p>

<p>
对于数字笔记来说，Markdown很实用，可读性也很强，兼容性和扩展性更不用说，而Org更有个性，更符合我现在的需求，在Emacs里，想实现的个性化功能，基本上都可以使用Elisp语言自己写函数来搞定，awesome！
</p>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。Notion、Logseq、Obsidian、Roam Research、Heptabase，未来还会有更多的笔记软件，适合自己的才是最好的，选择一个笔记软件、笔记工具就是在选择一个生态、一个系统，下一个笔记软件，何必是笔记软件。
</p>

<p>
现在的PKM（个人知识管理）体系还有许多需要完善的地方，我也肯定还会有我的下一个笔记软件，它也一定不是一个笔记软件。
</p>
</div>
</div>

<div id="outline-container-orge7c22da" class="outline-2">
<h2 id="orge7c22da">Manual</h2>
<div class="outline-text-2" id="text-orge7c22da">
<p>
这是一个以 <a href="https://zh.wikipedia.org/wiki/Emacs">Emacs</a> 为基础编辑器、文件管理的Org-mode本地笔记PKM。
</p>

<p>
至于Emacs是什么，流传着一句话：Emacs是神的编辑器，Vim是编辑器之神。
</p>

<p>
本手册包括：
</p>

<ul class="org-ul">
<li>Prerequisites：开始构建本PKM需要的工具和准备工作</li>
<li>PKM：本PKM的构建原则和具体方法、org-mode的具体使用、org-capture与org-roam、Zotero、网页摘录与after-reading、中英混合输入的输入法配置与RIME</li>
<li>PKM-with-LLM：PKM和大语言模型结合的使用、ollama、RAG(待更新)</li>
</ul>
</div>

<div id="outline-container-orgfd3da07" class="outline-3">
<h3 id="orgfd3da07">Prerequisites</h3>
<div class="outline-text-3" id="text-orgfd3da07">
<p>
Start with：<a href="https://git-scm.com/download">Git</a>，<a href="https://www.gnu.org/software/emacs/">GNU Emacs</a>，<a href="https://github.com/doomemacs/doomemacs">doomemacs</a>，<a href="https://orgmode.org/">Org mode for GNU Emacs</a>，<a href="https://www.orgroam.com/">Org-roam</a>。
</p>

<p>
开始你可能需要对Emacs、Org-mode、Git有一些了解，这些可以帮助到你：
</p>

<ul class="org-ul">
<li><a href="https://github.com/doomemacs/doomemacs/tree/master">GitHub - doomemacs/doomemacs: An Emacs framework for the stubborn martian hacker</a></li>

<li><a href="https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#on-windows">doomemacs/docs/getting_started.org at master · doomemacs/doomemacs · GitHub</a></li>

<li><a href="https://www.gnu.org/software/emacs/manual/">GNU Emacs Manuals Online</a></li>

<li><a href="https://orgmode.org/manuals.html">Manuals Org mode</a></li>

<li><a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>

<li><a href="https://emacs-china.org/">Emacs China</a></li>

<li><a href="https://emacsdocs.org/">Emacs Docs</a></li>

<li><a href="https://emacs.readthedocs.io/en/latest/index.html">Emacs readthedocs</a></li>
</ul>

<p>
配置参考：
</p>

<ul class="org-ul">
<li><a href="https://github.com/purcell/emacs.d">GitHub - purcell/emacs.d: An Emacs configuration bundle with batteries included</a></li>

<li><a href="https://github.com/redguardtoo/emacs.d">GitHub - redguardtoo/emacs.d: Fast and robust Emacs setup.</a></li>

<li><a href="https://github.com/MatthewZMD/.emacs.d">GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-featured GNU Emacs configuration distribution</a></li>

<li><a href="https://github.com/manateelazycat/lazycat-emacs">manateelazycat/lazycat-emacs: Andy Stewart's emacs</a></li>

<li><a href="https://github.com/xenodium/dotsies">xenodium/dotsies: Dot files, Emacs config, etc</a></li>
</ul>

<p>
如何安装和基本的配置，上面都可以解决。如果你止步在了这里，直接放弃或许是更好的选择，或者使用<a href="https://obsidian.md/">obsidian</a>、<a href="https://logseq.com/">Logseq</a>这样的Markdown笔记工具，更或者使用Logseq的org编辑模式，用Logseq来管理org文档（不推荐长期这么做），适合自己的才是最好的。
</p>

<p>
强烈建议用 purcell 大神的配置作为高档毛坯房的开始。在开始上手的时候，DoomEmacs 的体验是很好的，但是 DoomEmacs 有许多自己的宏和类似语法糖的语句和原生 Emacs 是不通用的，许多适配的细节也不好自己调整，长期使用 Emacs 当然还是原生的好折腾一些。包管理用 <code>use-package</code> 和 <code>git submodule</code> 就挺方便的了。
</p>

<p>
现在我也从 DoomEmacs 转为自己配置了，这是我之前的doomemacs<a href="https://github.com/VandeeFeng/doomemacs">配置</a>，这个手册的配置代码示例是基于 DoomEmacs 的，所以原生 Emacs 和不使用 <code>use-package</code> 的部分需要修改。
</p>

<p>
这是现在的 config：<a href="https://github.com/VandeeFeng/emacs.d">VandeeFeng/emacs.d</a> ,在主题和使用习惯上加了亿点点细节。黑白灰的配色基调，加上了梵高经典星空蓝，向日葵橙黄，莫兰迪牛油果深绿等等这些自己喜欢的颜色。
</p>

<p>
摄影领域有一句话，一个最愿意拿起来的相机就是最好的相机。同样，一个最愿意打开和使用的笔记本，就是最好的笔记本。
</p>


<figure id="org9838fb6">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/new-emacs3.png" class="img" width="50%" height="50%">

</figure>
</div>
</div>

<div id="outline-container-org2d9c967" class="outline-3">
<h3 id="org2d9c967">PKM</h3>
<div class="outline-text-3" id="text-org2d9c967">
<p>
整体的笔记文件管理结构，还是<a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/ACCESS%E7%AC%94%E8%AE%B0%E6%B3%95">ACCESS</a>，可以选择不用。有文件夹和没有文件夹是两种不同的管理模式，例如ob和Logseq。这个手册里更主要的是分享我在构建PKM的过程中迭代的一些原则和方法，以供参考，形成、巩固自己的方法才是这个手册真正的目的，remember：有形易于无形。具体可以参看：<a href="https://dg.vandee.art/Atlas/MOC/%C2%A7Vandee%E7%9A%84PKM">§Vandee的PKM</a>
</p>

<p>
Januarys用来记录每天的日志，作为简单明了的回顾和展开。如果你不喜欢文件夹管理，我觉得这个是很有必要的。
</p>

<p>
使用org-capture和org-roam-capture来创建，插入新的笔记和条目，在org-roam里也就是node节点。
</p>

<p>
<b>example</b> ：
</p>


<figure id="org42b42ba">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/January.gif" class="img" width="50%" height="50%">

</figure>

<p>
核心：原子笔记 + 双链。
</p>

<p>
你可能需要了解「原子笔记」（或者常青笔记，whatever）：<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a>。
</p>

<p>
双链和反链让笔记之间的关联更加直观，当原子笔记很多的时候，反链可以直观的反应出和当前笔记相关的其他笔记。它应该同步于思维的链条。
</p>

<p>
Zettelkasten 其实并不那么重要。
</p>

<p>
Stay foolish，stay simple。
</p>

<p>
关于同步：
</p>

<p>
本地笔记没有在线笔记软件方便的地方就是多端同步与预览。我的本地笔记已经上传到了GitHub仓库，通过Git同步。临时需要修改的直接在GitHub仓库里就修改了。预览方面，我的笔记输出到了 <a href="https://wiki.vandee.art">Vandee — Wiki</a>
</p>
</div>

<div id="outline-container-orgedf1ccf" class="outline-4">
<h4 id="orgedf1ccf">Principles</h4>
<div class="outline-text-4" id="text-orgedf1ccf">
<ul class="org-ul">
<li><a href="https://dg.vandee.art/Cards/%E4%B8%80%E4%B8%AA%E8%89%AF%E5%A5%BD%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E6%A3%80%E7%B4%A2%E9%80%BB%E8%BE%91">一个良好的知识循环系统，应该有优秀的检索逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E6%98%AF%E6%80%9D%E7%BB%B4%E7%9A%84%E5%91%88%E7%8E%B0%EF%BC%8C%E5%AE%83%E5%BA%94%E8%AF%A5%E6%98%AF%E7%9F%A2%E9%87%8F%E7%9A%84">笔记是思维的呈现，它应该是矢量的</a>，当然也是<a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">原子化</a>的</li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%B2%E8%81%94%E5%BA%94%E8%AF%A5%E5%AE%8C%E5%85%A8%E4%BE%9D%E9%9D%A0%E4%B8%8E%E6%80%9D%E7%BB%B4%E7%9A%84%E5%90%8C%E6%AD%A5">笔记之间的串联应该完全依靠与思维的同步</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E8%AE%A9%E7%9F%A5%E8%AF%86%E6%B5%81%E5%8A%A8%E8%B5%B7%E6%9D%A5">笔记应该让知识流动起来</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E5%BA%94%E8%AF%A5%E6%9C%89%E4%BC%98%E7%A7%80%E7%9A%84%E5%B1%82%E7%BA%A7%E9%80%BB%E8%BE%91">笔记应该有优秀的层级逻辑</a></li>
<li><a href="https://dg.vandee.art/Cards/%E7%AC%94%E8%AE%B0%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E5%A2%9E%E6%8F%B4%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%87%AA%E5%B7%B1">笔记的核心价值在于增援未来的自己</a></li>
</ul>

<p>
无思维不笔记，PKM不做本末倒置的事，让它帮助自己拓展思维，提升思维、学习、认知的效率，<a href="https://dg.vandee.art/Cards/%E6%89%BE%E5%88%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E7%BC%9D%E9%9A%99">找到知识的缝隙</a>，更好的认知世界、认知自我才是本质。
</p>

<blockquote>
<p>
把人自身的思维看作一个向量，它有自己的方向和属性，在大脑里让它们串联起来的是一个个神经元和突触，在笔记里就是双链和索引。因此，要在PKM里最大程度复现大脑思维的流动，我认为，最自然的方式就是让笔记向量与思维最自然的习惯同步。
</p>

<p>
例如我们的语言系统，我们不会在用母语表达一些简单想法的时候还费力思考，笔记也应该是一样。当我大脑里现在想到一个概念，需要在笔记里找到相应的内容，脱口而出时，就应该只需要按照思维本来的习惯检索到笔记。
</p>

<p>
<a href="https://www.vandee.art/posts/2024-05-13-abandon-note-software-cli-nb/">脱离笔记软件，CLI 笔记工具 —nb</a>
</p>

<p>
对于信息传播者来说，立体化的信息载体无疑可以包含更多信息的元素，对于信息接受者来说，当然理论上就可以接收到更多的信息。问题是出现在信息接收之后，也就是调动认知的这个过程。
简单来说：信息损耗率 + 认知调动率 = 新认知迭代率
</p>

<p>
<a href="https://www.vandee.art/posts/2023-09-18-read-or-listen/">读或听或看？</a>
</p>
</blockquote>
</div>
</div>


<div id="outline-container-org2bf6285" class="outline-4">
<h4 id="org2bf6285">Methods</h4>
<div class="outline-text-4" id="text-org2bf6285">
<p>
在最开始需要构建的关键体系就是检索的逻辑。
</p>

<p>
在双链部分由于原则上已经和思维高度同步，因此不需要做额外的增加思维成本的检索，只要在记录原子笔记的时候，顺其自然，高度提炼出明确、简洁的一句话概念即可。
</p>

<p>
在标签tags部分，我习惯把标签当作是一个object的二、三级属性来看待。例如《黄金时代》这本书，它的基础属性是book，我不会再重复标注它，而是写在property里，记下~Type: book~方便我通过函数来列举所有的书目，tag则记下文学、王小波。我习惯用单数来强调它是个属性，区别与复数的category集合的概念。
</p>

<p>
我看过许多博客和PKM，许多情况下，他们的tags在语义概念上都混用了，我习惯把tags和categories分开，分类就是分类，标签就是标签。category、property、tag还是需要在逻辑里有自然的分类，理清楚一个概念的内涵与外延。混用会导致tags越来越多，成百上千的tags反而会增加检索的成本，过个几年，大多数的tags你已经忘了当时为什么记下了，单独再去整理标签无疑是个巨大的工程，tags也失去了应当有的作用。tags的构建同样应当同步与自身的思维习惯，自身对概念、语义的记忆。
</p>

<p>
当然这也完全取决于每个人自己的习惯。
</p>

<p>
学习、获取信息和知识是在做加法，PKM里更多的应该是减法，<a href="https://dg.vandee.art/Sources/Articles/Stay-learn,-Stay-unlearn%EF%BD%9C%E8%AF%95%E8%A1%8C%E9%94%99%E8%AF%AF102">Learn and unlearn</a>。
</p>

<p>
可以参考我的思路：<a href="https://dg.vandee.art/Spaces/Studys/org/org-mode-pkm">org-mode-pkm</a>
</p>

<p>
example：
Emacs，org-roam，模板创建Daily和note：
</p>


<figure id="org3d2f66b">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-roam.gif" class="img" width="50%" height="50%">

</figure>
</div>

<ul class="org-ul">
<li><a id="org80dfdb4"></a>Org-tag<br>
<div class="outline-text-5" id="text-org80dfdb4">
<p>
org里的标签功能也很全面，支持多个分组，可以自动补全，还支持自定义标签的快捷键。这很好的保证了之前所说的 <b>标签的统一性</b> ，大小写或者单复数不统一会很麻烦。
</p>

<p>
在org的任意标题之后加上 <code>:TAG1::TAG2:</code> 就打上了标签。
</p>

<p>
<b>进阶用法</b> 如下：
</p>

<p>
在Org Mode中，你可以通过按下快捷键来为项目或任务添加预定义的标签。以下是具体的步骤：
</p>

<ol class="org-ol">
<li>光标定位：将光标移动到你想要添加标签的项目或任务上。</li>
<li><b>添加标签：按下快捷键 <code>C-c C-q</code> ，org-set-tags-command，这将打开标签过滤器。可以直接在标题的最后输入标签。在输入冒号后，M-TAG</b> 提供了标签的自动补全和选择功能。</li>
<li>使用快捷键：在标签过滤器中，输入你为标签分配的字符常量作为快捷键。例如，如果你为 <code>@work</code> 标签分配了字符 <code>w</code> ，那么在标签过滤器中输入 <code>w</code> 。</li>
<li>确认添加：按下 <code>Enter</code> 键，这将为项目或任务添加相应的标签。</li>
</ol>

<p>
默认情况下，org 模式使用标准的 minibuffer 来输入标签 。然而，emacs 还提供了另外一种叫做 <b>fast tag selection</b> 的快速标签选择方式。在这种方式下可以仅用一个键来完成标签的选择和反选。要想使用这种方式，首先要为常使用的标签分配一个唯一字符。这个字符可以通过配置 <b>org-tag-alist</b> 来设置。比如，需要在很多文件中为很多项添加 '<b>:home:</b>' 标签。在这种情况下，可以这样设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">(setq org-tag-alist '(("@work" . ?w) ("@home" . ? h ) ("@laptop" . ?l)))</pre>
</div>

<p>
如果标签仅仅和当前使用的文件相关，那么可以像下面这样在文件中添加 <b>TAGS</b> 选项：
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)</pre>
</div>

<p>
标签接口会在一个 splash windows 中显示可用的标签。如果想在一个特定的标签后换行，需要在标签列表中插入一个 '<b>\n</b>' 。
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t) \n laptop(l) pc(p)</pre>
</div>

<p>
或者将他们写成两行
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: @work(w) @home(h) @tennisclub(t)
#+TAGS: laptop(l) pc(p)</pre>
</div>

<p>
也可以像下面这样用大(花)括号手动将标签进行分组
</p>

<div class="org-src-container">
<pre class="src src-nil">#+TAGS: { @work(w) @home(h) @tennisclub(t) } laptop(l) pc(p)</pre>
</div>

<p>
在这种情况下， <code>@work(w) @home(h) @tennisclub(t)</code> 三个标签最多同时选择一个
</p>

<p>
org 也允许多个分组。当光标在这些行上的时候，不要忘了按 <b>C-c C-c</b> 来激活其它修改。
</p>

<p>
如果要在 <b>org-tags-alist</b> 中设置排它的标签组，必需要用 <b>:startgroup</b> 和 <b>:endgroup</b> 标签对，而不是用大括号。类似的，可以用 <b>:newline</b> 来声明一个新行。上面的例子也可以用下面的方式进行设置：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-tag-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      ("@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p))</pre>
</div>


<p>
Ref:
</p>

<ul class="org-ul">
<li><a href="https://orgmode.org/manual/Tags.html#:~:text=Org%20mode%20has%20extensive%20support%20for%20tags.%20Every,by%20a%20single%20colon%2C%20e.g.%2C%20%E2%80%98%20%3Awork%3A%20%E2%80%99.">Tags (The Org Manual)</a></li>
<li><a href="https://www.cnblogs.com/btea/p/4412375.html">emacs org mode 中的标签全参考 - 咖啡加茶 - 博客园</a></li>
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster's Blog</a></li>
</ul>
</div>
</li>

<li><a id="orgfa959e9"></a>Org-agenda<br>
<div class="outline-text-5" id="text-orgfa959e9">
<p>
最开始是不打算用org-agenda的，因为没有太多TODO要去管理。用 <code>#TODO</code> 来标注TODO搜索也并不麻烦。但是考虑到时间久了，agenda也可以通过标注时间戳来回顾非TODO项，还是启用了。和org-roam配合，可以很清晰的回顾一个星期内重要的笔记。以后需要清除掉这些时间戳也很方便，一个正则搞定。
</p>

<p>
之前考虑到和其他笔记软件通用的问题，journal全部以单独的文件按照年份生成，现在改为集中在一个 <code>journal.org</code> 文件里。要不然以后org-agenda每次要扫描几年的journal文档会很头疼，现在改为每年一个单独的 <code>20xx-journal.org</code> 文件。
</p>

<p>
需要注意的是：在最开始设置好org-agenda要包括的文件或文件夹
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 单独的文件
(setq org-agenda-files '("~/your/path/to/1.org" "~/your/path/to/2.org"))
;; 文件夹
;; 这样会把目录下包括子文件夹的文件都添加进去 https://emacs-china.org/t/org-txt-agenda/13506/5
(setq org-agenda-files (directory-files-recursively "~/your/directory/" "\\.org$"))
;; 文件夹但不包括子文件夹
(setq org-agenda-directory "~/your/agenda/directory/")</pre>
</div>

<p>
这是现在的样子：
</p>

<figure id="org29e61de">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/%E6%88%AA%E5%B1%8F2024-06-15%2011.28.09.png" class="img" width="50%" height="50%">

</figure>
</div>
</li>

<li><a id="org19c876a"></a>TODOs<br>
<div class="outline-text-5" id="text-org19c876a">
<ul class="org-ul">
<li><p>
你可以通过在TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对已经完成的任务有个大致的了解，你可以在标题的任何地方插入 <code>[/]</code> 或者 <code>[%]</code> 。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。
</p>

<div class="org-src-container">
<pre class="src src-nil">  * TODO Organize party [1/3]
    - [-] call people [1/2]
      - [ ] Peter
      - [X] Sarah
    - [X] order food
    - [ ] think about what music to play</pre>
</div>

<p>
Org mode 允许定义进入状态和离开状态时的额外动作，可用的动作包含两个:
</p>

<ul class="org-ul">
<li>添加笔记和状态变更信息(包括时间信息)，用"@"表示</li>
<li>只添加状态变更信息，用"!"表示</li>
</ul>

<p>
这个通过定义带快速选择键的关键词时，在快速选择键后用"X/Y"来表示，X表示进入该状态时的动作，Y表示离开该状态时的动作。对于一个状态(以"DONE"为例)，以下形式都是合法的:
</p>

<div class="org-src-container">
<pre class="src src-nil">  DONE(d@)       ; 进入时添加笔记
  DONE(d/!)      ; 离开时添加变更信息
  DONE(d@/!)     ; 进入时添加笔记，离开时添加变更信息</pre>
</div>

<ul class="org-ul">
<li><p>
除了基于 headline 的任务管理外，Org mode 还提供基于列表的任务管理，即将每个列表项作为任务，方法是在列表标记与列表项内容之间添加一个 "[ ]" 标记(注意中间包含一个字符的预留位置)，这个标记在 Org mode 中被称为 <b>checkbox</b> 。这种任务只有三种状态(待办、进行中和完成)，分别用 <code>[ ]</code>, <code>[-]</code> 和 <code>[X]</code> 表示。
</p>

<p>
若要将用 checkbox 标记的任务标记为完成，将光标移动到对应的行，然后使用快捷键 "C-c C-c"  即可。对于包含子任务的任务，如果其子任务未全部完成，用此快捷键更改其子任务状态时，该任务的状态会自动设置为  "进行中([-])"，表示子任务未全部完成；当用快捷键将所有子任务标记为完成时，它会自动更新为完成状态。
</p>

<p>
用"TODO"等关键词标记为headline为任务时，使用的快捷键同样适用于checkbox，不过略有不同:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">快捷键</th>
<th scope="col" class="org-left">功能</th>
<th scope="col" class="org-left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-S-return</td>
<td class="org-left">在当前列表项的内容后面建立一个同级列表项，标记为 "[ ]"</td>
<td class="org-left">无列表项时不创建</td>
</tr>

<tr>
<td class="org-left">M-S-return</td>
<td class="org-left">在当前列表项后建立一个同级列表项，标记为 "[ ]"</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
使用 <code>shift+← →方向键</code> 也可以快速更改TODO的状态。
</p></li>

<li><p>
TODO sequence
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">
   (setq org-todo-keywords
         '((sequence "TODO(t)" "DOING(i)" "|" "DONE(d@)")))
   (setq org-log-done 'time) ;; 每次当你将一个项从 TODO (not-done) 状态变成任意的 DONE 状态时，那么，它就会自动在标题的下面插入一行下面的内容：CLOSED: [timestamp]</pre>
</div></li>
</ul></li>
</ul>

<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-agenda/26755">新人提问，org格式中，重复任务在某一天完成后，却不能在agenda正确显示。。。 - Emacs-general - Emacs China</a></li>
<li><a href="https://github.com/AbstProcDo/Master-Emacs-From-Scratch-with-Solid-Procedures/blob/master/06.Emacs-as-Agenda-by-Org.org">Master-Emacs-From-Scratch-with-Solid-Procedures/06.Emacs-as-Agenda-by-Org</a></li>
<li><a href="https://orgmode.org/manual/Agenda-Views.html">Agenda Views (The Org Manual)</a></li>
<li><a href="https://emacsist.github.io/emacsist/orgmode/orgmode%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html#org6796967">emacsist.github.io/emacsist/orgmode/orgmode手册学习笔记.html</a></li>
<li><a href="https://www.zmonster.me/2015/07/15/org-mode-planning.html">强大的 Org mode(2): 任务管理 · ZMonster's Blog</a></li>
<li><a href="https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html#sec-5">Org-mode 简明手册 - open source - 博客园</a></li>
</ul>
</div>
</li>

<li><a id="orgdd8d257"></a>Org-capture<br>
<div class="outline-text-5" id="text-orgdd8d257">
<p>
<a href="https://orgmode.org/manual/Capture.html">Org-capture</a> 是org-mode做笔记比较核心的功能，结合capture-templates可以在不离开当前buffer的情况下，快速记录、捕捉特定的内容到特定的文件和位置。加上时间戳还可以在agenda里以时间线回顾。
</p>

<p>
目前PKM里的Journal-日志、clip-剪藏、task-TODO等都是用org-capture处理的。
</p>

<p>
一定要在最开始先设置好org的默认笔记目录： <code>(setq org-directory "~/your/path/org/")</code>
</p>

<p>
需要注意的是：对于Doom-Emacs，需要在 <code>(after！org)</code> 里写上关于org的配置来覆盖Doom-Emacs的默认配置。
</p>

<p>
如果常规的org-capture参数不足以满足你的需求，这个函数可能对你有帮助：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; org-capture支持自定义函数，通过function来执行
(defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
(add-to-list 'org-capture-templates
            '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                my-org-goto-last-todo-headline)</pre>
</div>



<p>
下面是org-capture的模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(after! org
  ;; (server-start)
  ;; (require 'org-protocol)
  (org-link-set-parameters "zotero" :follow
                           (lambda (zpath)
                             (browse-url
                              ;; we get the "zotero:"-less url, so we put it back.
                              (format "zotero:%s" zpath))))
  (setq org-agenda-files '("~/Vandee/pkm/org/Journal.org" "~/Vandee/pkm/org/clip.org"))
  ;; (setq org-agenda-include-diary t)
  ;; (setq org-agenda-diary-file "~/Vandee/pkm/org/Journal.org")
  (setq org-directory "~/Vandee/pkm/org/")
  (global-set-key (kbd "C-c c") 'org-capture)
  ;;(setq org-default-notes-file "~/Vandee/pkm/inbox.org")
  (setq org-capture-templates nil)
  ;; (add-to-list 'org-capture-templates
  ;;              '("j" "Journal" entry (file+datetree  "~/Vandee/pkm/Journals/Journal.org")
  ;;                "* [[file:%<%Y>/%<%Y-%m-%d>.org][%<%Y-%m-%d>]] - %^{heading} %^g\n %?\n"))
  (add-to-list 'org-capture-templates
               '("j" "Journal" entry (file+datetree "~/Vandee/pkm/org/Journal.org")
                 "* TODOs\n* Inbox\n- %?"))
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file+datetree "~/Vandee/pkm/org/Inbox.org")
                 "* %U - %^{heading} %^g\n %?\n"))
  (defun my-org-goto-last-todo-headline ()
    "Move point to the last headline in file matching \"* Notes\"."
    (end-of-buffer)
    (re-search-backward "\\* TODOs"))
  (add-to-list 'org-capture-templates
               '("t" "Task" entry (file+function "~/Vandee/pkm/org/Journal.org"
                                                 my-org-goto-last-todo-headline)
                 "* TODO %i%? \n%T"))
  (add-to-list 'org-capture-templates '("c" "Collections"))
  (add-to-list 'org-capture-templates
               '("cw" "Web Collections" item
                 (file+headline "~/Vandee/pkm/org/websites.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("ct" "Tool Collections" item
                 (file+headline "~/Vandee/pkm/org/tools.org" "实用")
                 "%?"))
  (add-to-list 'org-capture-templates
               '("cc" "Clip Collections" entry
                 (file+headline "~/Vandee/pkm/org/clip.org" "Clip")
                 "* %^{heading} %^g\n%T\nSource: %^{source}\n%?"))</pre>
</div>


<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://www.zmonster.me/2018/02/28/org-mode-capture.html">强大的 Org mode(4): 使用 capture 功能快速记录 · ZMonster's Blog</a></li>
<li><a href="https://orgmode.org/manual/Capture.html">Capture (The Org Manual)</a></li>
</ul>
</div>
</li>

<li><a id="org4d48c92"></a>Org-roam<br>
<div class="outline-text-5" id="text-org4d48c92">
<p>
<a href="https://www.orgroam.com/">Org-roam</a> 是Emacs的一个包，也是org-mode 的扩展，可以简单的实现双链，通过org-roam-ui直观的预览。
</p>


<figure id="org48d9aed">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/org-roam-ui-2024-05-22%2013.31.40.png" class="img" width="50%" height="50%">

</figure>

<p>
也不是必须，只需要解决双链的查看就可以了。
</p>

<p>
org-roam也有它的capture，可以直接生成org笔记。而org-roam的「 node-insert 」可以快速在文档里直接插入新的笔记。与常规的org-mode <code>.org</code> 文件不同的是，它可以通过带id的node「 节点 」链接来实现org-mode里的双链功能。每一个org-roam笔记都有唯一的id。
</p>

<p>
其他属性和使用基本与org-mode一致，也是生成 <code>.org</code> 文件。同样也需要配置org-roam的capture-templates。原来用org-roam创建Journal日志文件，现在已经用org-capture替代。
</p>

<p>
org-roam-ui也有和Logseq一样的网点图谱「 Graph View 」，也提供大纲结构视图，对于我来说用起来很亲切。如果你觉得org-mode可读性不强，那么org-roam-ui一定会让你喜欢。org-roam-ui是在浏览器里通过 <code>org-roam-protocol</code> 访问，需要在配置加上 <code>(require 'org-roam-protocol)</code> 。
</p>

<p>
同样也需要在最开始设置好org-roam笔记的文件夹： <code>(setq org-roam-directory "~/your/roam/directory/")</code>
</p>

<p>
有一个坑，org-roam会自动生成一个 <code>.orgids</code> 文件来记录生成的每个org-roam笔记的id，如果不设置会在系统根目录下自动生成。加上 <code>(org-id-locations-file "~/your/path/to/.orgids"</code>)即可。在一开始我一度认为我的电脑是不是哪里出了问题🤣，这个文件冷不丁的就冒出来了，删了重启又有了。官方文档和各大论坛里都没有这个设置，困扰了我很久，还是GPT帮我解决了。
</p>

<p>
下面是模板和相关配置：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; (setq org-roam-dailies-directory "~/Vandee/pkm/Journals/")
(setq org-export-with-toc nil) ;;禁止生成toc
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  ;; (org-roam-dailies-capture-templates
  ;;  '(("d" "daily" plain "* %<%Y-%m-%d>\n* TODO\n- \n* Inbox\n- %?"
  ;;     :if-new (file+head "%<%Y>/%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n"))))
  (org-roam-directory "~/Vandee/pkm/roam/")
  (org-id-locations-file "~/Vandee/pkm/roam/.orgids")
  (org-roam-capture-templates
   ~(("n" "note" plain "%?"
      :if-new (file+head "${title}.org"
                         "#+TITLE: ${title}\n#+UID: %<%Y%m%d%H%M%S>\n#+FILETAGS: \n#+TYPE: \n#+SOURCE: \n#+DATE: %<%Y-%m-%d>\n")
      :unnarrowed t))
   )
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n c" . org-roam-capture)
         ;; ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         ;; :map org-roam-dailies-map
         ;; ("Y" . org-roam-dailies-capture-yesterday)
         ;; ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)
  )</pre>
</div>

<p>
<b>org-roam-capture模板分组</b>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; org-roam-capture模板分组
(setq org-roam-capture-templates
      '(
        ("d" "default" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("g" "group")
        ("ga" "Group A" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")
        ("gb" "Group B" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+roam_alias:\n\n")))</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/org-roam-v2-backlinks-buffer-headlines/23368/3">org-roam v2 的 backlinks buffer 能否显示指向当前文件的所有 headlines 的反链 - Org-mode - Emacs China</a></li>
<li>org-roam的官方论坛：<a href="https://org-roam.discourse.group/">Org-roam - discourse</a></li>
<li><a href="https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/">https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/</a></li>
<li><a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">使用 org-roam 构建自己的知识网络 · ZMonster's Blog</a></li>
<li><a href="https://d12frosted.io/tags/org-roam.html">Boris Buliga - org-roam</a></li>
<li><a href="https://emacs-china.org/t/org-roam-v2-org-roam-ui-emacs-29-sqlite/17806">Org-roam(v2) 以及 org-roam-ui 的使用姿势（已支持Emacs 29 内置的 sqlite) - Org-mode - Emacs China</a></li>
</ul>
</div>
</li>

<li><a id="org04da85c"></a>Org-export<br>
<div class="outline-text-5" id="text-org04da85c">
<p>
单独导出成MD、HTML或其他格式，Org-mode里就可以，也可以使用这些<a href="https://orgmode.org/zh-CN/tools.html">工具</a> 。批量导出，由于每个人的排版和格式习惯不同，还是自己用自己熟悉的语言，写几个正则，搞个脚本。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 当前buffer下，替换markdown的链接和标题格式到org-mode的格式，排除图片的转换、替换代码块格式。
(defun my-markdown-to-org ()
  (interactive)
  (save-excursion
    ;; 转换Markdown标题为Org-mode标题
    (goto-char (point-min))
    (while (re-search-forward "^\s*\\(#+\\) \\(.*\\)" nil t)
      (let ((level (length (match-string 1)))
            (title1 (match-string 2)))
        (replace-match (concat (make-string level ?*) " " title1)))))
  ;; 转换Markdown链接为Org-mode链接,但是跳过图片链接
  (goto-char (point-min))
  (while (re-search-forward "\\[[\(.*?\][\(.*?\)\]])" nil t)
    (let ((title (match-string 1))
          (url (match-string 2)))
      (unless (and (string-match "\\(jpeg\\|png\\|svg\\)" url)
                   (string-match "https" url))
        (replace-match (format "[[%s][%s]]" url title)))))
  ;; 转换Markdown代码块为Org-mode代码块
  (goto-char (point-min))
  (while (re-search-forward "^~~~" nil t)
    (if (looking-back "^~~~")
        (progn
          (replace-match "#+begin_src")
          (re-search-forward "^~~~" nil t)
          (if (looking-back "^~~~")
              (replace-match "#+end_src"))))))</pre>
</div>


<ul class="org-ul">
<li><p>
<b>Markdown to org-mode</b>:
</p>

<p>
Pandoc转换md到org会有小问题，批量转换还是悠着点。
</p>

<p>
<a href="https://emacs-china.org/t/markdown-to-org-pandoc-filter/26424">一个改善 Markdown to Org 转换的 Pandoc Filter 脚本 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format">How to migrate Markdown files to Emacs org mode format - Emacs Stack Exchange</a>
</p></li>
</ul>

<p>
Ref：<a href="https://orgmode.org/manual/Exporting.html">Exporting (The Org Manual)</a>、<a href="https://orgmode.org/zh-CN/tools.html">工具 | Org mode</a>
</p>
</div>
</li>

<li><a id="org550cc31"></a>Org with Zotero<br>
<div class="outline-text-5" id="text-org550cc31">
<p>
书和论文的PDF文件，我现在全部放在<a href="https://www.zotero.org/">Zotero</a>。快速复制单个笔记到org-mode也挺简单：
</p>

<p>
通过下载这个<a href="https://raw.githubusercontent.com/Zotero-ODF-Scan/zotero-odf-scan/master/attic/Zotero%20Select%20Item.js">文件</a>到 zotero 资料目录下的 translators 文件下，将其命名为 <code>Zotero Select Item.js</code> ，重启 Zotero 后在编辑-&gt; 首选项中配置便捷复制的 Item Format 为 Zotero Select Item:
</p>

<p>
这样就可以自定义复制粘贴过去的格式了。
</p>


<div class="org-src-container">
<pre class="src src-js">{
"translatorID":"76a79119-3a32-453a-a0a9-c92640e3c93b",
"translatorType":2,
"label":"Zotero Select Item",
"creator":"Scott Campbell, Avram Lyon",
"target":"html",
"minVersion":"2.0",
"maxVersion":"",
"priority":200,
"inRepository":false,
"lastUpdated":"2012-07-17 22:27:00"
}
function doExport() {
        var item;
        while(item = Zotero.nextItem()) {
                Zotero.write("zotero://select/items/");
                var library_id = item.libraryID ? item.libraryID : 0;
                Zotero.write(library_id+"_"+item.key);
        }
}</pre>
</div>

<p>
然后在Emacs的配置文件里加上：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(org-link-set-parameters "zotero" :follow
                        (lambda (zpath)
                        (browse-url
                            ;; we get the "zotero:"-less url, so we put it back.
                            (format "zotero:%s" zpath))))</pre>
</div>

<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/">https://hsingko.pages.dev/post/2022/07/04/zotero-and-orgmode/</a></li>
<li><a href="https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/">https://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/</a></li>
</ul>
</div>
</li>

<li><a id="org1b81b3c"></a>Org-mode美化<br>
<div class="outline-text-5" id="text-org1b81b3c">
<p>
我觉得原生的就挺好看，可读性也还好。
</p>

<ul class="org-ul">
<li><a href="https://github.com/minad/org-modern">minad/org-modern: :unicorn: Modern Org Style</a></li>
<li><a href="https://emacs-china.org/t/org/19458/3?page=3">想向各位道友收集一下美化 org 的配置 - Org-mode - Emacs China</a></li>
<li><a href="https://github.com/coldnew/pangu-spacing">coldnew/pangu-spacing：emacs minor-mode用于在中文/日文/韩文和英文字符之间添加空格</a></li>
<li><a href="https://remacs.fun/posts/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E6%88%91%E4%BB%AC%E6%80%8E%E4%B9%88%E7%8E%A9emacs1.-%E4%B8%AD%E8%8B%B1%E6%96%87%E8%BE%93%E5%85%A5%E6%97%B6%E7%9A%84%E7%A9%BA%E6%A0%BC/">大模型时代我们怎么玩Emacs：1. 中英文输入时的空格 | remacs的世界</a> 比pangu实用。</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 设置标题大小
(after! org
  (custom-set-faces!
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold))
  (custom-set-faces!
    '(org-document-title :height 1.2)))
;;字体，设置正文大小
(setq doom-font (font-spec :family "霞鹜文楷等宽" :weight 'regular :size 14))
;; 设置行内make up，直接显示*粗体*，/斜体/，=高亮=，~代码~
(setq org-hide-emphasis-markers t)
;; 盘古，中英文混合排版美化
;;https://github.com/coldnew/pangu-spacing
(use-package pangu-spacing)
(add-hook 'org-mode-hook
          '(lambda ()
             (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))</pre>
</div>
</div>
</li>

<li><a id="org39a2c6b"></a>Org-protocol<br>
<div class="outline-text-5" id="text-org39a2c6b">
<p>
Org-protocol可以在Emacs里更方便的剪藏网页内容，做after reading。也不是必须，多切换一次窗口也还好。
</p>

<ul class="org-ul">
<li><p>
protocol
</p>

<p>
<a href="https://emacs-china.org/t/org-capture/14190">求助: 在网页剪藏时用org-capture模板生成独立文件名 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-mode/8189/7">用org-mode做网页书签的可以进来看一下 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://emacs-china.org/t/org-protocol/8684">什么样才是正确的org-protocol姿势 - Org-mode - Emacs China</a>
</p>

<p>
<a href="https://www.orgroam.com/manual.html#Mac-OS">Org-roam User Manual-org-protocol</a>
</p></li>

<li><p>
插入网页连接：
</p>

<p>
<a href="https://emacs-china.org/t/emacs-firefox-org-link/23661">技巧分享：在 emacs 中获取 firefox 当前标签页并生成 org link</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-protocol-capture-html">org-protocol-capture-html </a>
</p>

<p>
或利用org-roam-capture-ref： <a href="https://www.zmonster.me/2020/06/27/org-roam-introduction.html">https://www.zmonster.me/2020/06/27/org-roam-introduction.html</a>
</p>

<p>
或者使用浏览器插件：<a href="https://github.com/k08045kk/CopyTabTitleUrl">k08045kk/CopyTabTitleUrl</a>
</p>

<p>
Firefox这个反骨仔，经常不适配各种系统。比如不支持mac的applescript。
</p></li>
</ul>
</div>
</li>

<li><a id="org504480e"></a>网页摘录和after-reading<br>
<div class="outline-text-5" id="text-org504480e">
<p>
利用org-capture，做剪藏和摘录很方便。现在保存在 <code>clip.org</code> 文件里，可以在agenda里按时间线回顾，由于agenda里只有标题，也起到了类似Anki卡片回顾的作用：
</p>


<figure id="org464606c">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/clip.gif" class="img" width="50%" height="50%">

</figure>

<p>
有一个JavaScript我一直在用，可以选定一个网页的特定内容，在翻译和剪藏的时候挺有用，同时也微微提升了一点阅读体验。我用 <a href="https://github.com/OwO-Network/DeepLX">DeepLX</a>  通过沉浸式翻译如果单次翻译内容太多会报错和限制，Deepl的中文翻译还是吊打其他的。
</p>

<p>
下面的代码保存到书签，单击书签就可以了：
</p>

<div class="org-src-container">
<pre class="src src-javascript">javascript:(function(){var e=document.body;const n=document.head.appendChild(document.createElement("style"));n.textContent=".mainonly { outline: 2px solid red; }";const t=CSS.supports("selector(:has(*))");function o(n){n instanceof HTMLElement&&(e.classList.remove("mainonly"),(e=n).classList.add("mainonly"))}function s(e){o(e.target)}function a(o){if(o.preventDefault(),t)n.textContent=":not(:has(.mainonly), .mainonly, .mainonly *) { display: none; }";else{n.textContent=":not(.mainonly *, .mainonly-ancestor) { display: none; }";var s=e;do{s.classList.add("mainonly-ancestor")}while(s=s.parentElement)}l()}function i(n){n.preventDefault(),n.deltaY<0?o(e.parentElement):o(e.firstElementChild)}function l(){document.removeEventListener("mouseover",s),document.removeEventListener("click",a),document.removeEventListener("wheel",i)}document.addEventListener("mouseover",s),document.addEventListener("click",a),document.addEventListener("wheel",i,{passive:!1}),document.addEventListener("keydown",(function o(s){if("Escape"===s.key&&(n.remove(),document.removeEventListener("keydown",o),l(),e?.classList.remove("mainonly"),!t))for(const e of document.getElementsByClassName("mainonly-ancestor"))e.classList.remove("mainonly-ancestor")}))}())</pre>
</div>

<p>
after-reading我一直用的 <a href="https://docs.omnivore.app/zh/">Omnivore</a>，开源免费，支持RSS和Newsletter，可以自动同步高亮标注、摘录到Obsidian和Logseq。这部分用来做 <a href="https://www.vandee.art/posts/2024-06-18-%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BF%9D%E9%B2%9C%E6%9C%9F-%E6%B5%81%E5%8A%A8%E7%9F%A5%E8%AF%86%E7%9A%84%E6%A3%80%E7%B4%A2/">流动知识的检索</a>，文档+RAG现在的项目也越来越多了。用AI来过滤、总结这些信息流很巴适。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee's Blog</a>
</p>

<p>
有条件直接上 <a href="https://readwise.io/">Readwise</a>，配合Notion、Obsidian、Logseq都挺好用。<a href="https://getpocket.com/home?src=navbar">Pocket</a>、<a href="https://github.com/usememos/memos">memos</a> 也挺不错，可以把阅读整合到PKM里。
</p>

<p>
<a href="https://n8n.akashio.com/welcome">欢迎来到 n8n 中文教程 | 简单易懂的现代魔法</a>这里给出了一个 omnivore 到 notion 的 workflow。
</p>

<p>
最近<a href="https://www.vandee.art/posts/2024-07-24-start-to-get-readwies/">还是入坑了 Readwise</a>。
</p>
</div>

<ul class="org-ul">
<li><a id="orgb1c86a6"></a>tools<br>
<div class="outline-text-6" id="text-orgb1c86a6">
<ul class="org-ul">
<li><p>
网站：<a href="https://jina.ai/reader/">https://jina.ai/reader/</a>
</p>

<p>
Github：<a href="https://github.com/jina-ai/reader">https://github.com/jina-ai/reader</a>
</p>

<p>
它可以提取网页内容并转换为markdown格式，还支持直接搜索，支持API。
</p>

<p>
Reader does two things:
</p>

<ul class="org-ul">
<li><b>Read</b>: It converts any URL to an <b>LLM-friendly</b> input with <code>https://r.jina.ai/https://your.url</code>. Get improved output for your agent and RAG systems at no cost.</li>
<li><b>Search</b>: It searches the web for a given query with <code>https://s.jina.ai/your+query</code>. This allows your LLMs to access the latest world knowledge from the web.</li>
</ul>

<p>
添加下面代码到书签保存，点击书签就可以提取网页内容到markdown格式了。
</p>

<div class="org-src-container">
<pre class="src src-javascript">  javascript: var currentUrl = window.location.href;var newUrl = "https://r.jina.ai/" + currentUrl;window.open(newUrl, '_blank');window.history.pushState({}, '', currentUrl);</pre>
</div></li>
</ul>


<p>
以这个工具为跳板，就可以干许多有意思的事情了。
</p>

<ul class="org-ul">
<li><a href="https://github.com/JimmyLv/BibiGPT-v1">JimmyLv/BibiGPT-v1</a> 这个项目可以自己部署，总结B站、YouTube、抖音等等的视频内容，挺好用。</li>

<li><a href="https://sspai.com/post/89828">u-Sir/drag-to-preview</a>，最近发现一个Firefox浏览器插件，可以选中网页链接拖拽弹出单独的窗口预览网页，在窗口外区域鼠标点击即可关闭，很符合我的胃口。</li>
</ul>
</div>
</li>
</ul>
</li>

<li><a id="org2d045a2"></a>输入法设置<br>
<div class="outline-text-5" id="text-org2d045a2">
<p>
由于使用了evil，如果使用系统的输入法，每次在 <code>:w</code> 保存的时候，需要来回切换中英。推荐两种解决方案：SIS和pyim。
</p>
</div>

<ul class="org-ul">
<li><a id="orgb41c30b"></a>SIS<br>
<div class="outline-text-6" id="text-orgb41c30b">
<p>
<a href="https://github.com/laishulu/emacs-smart-input-source">emacs-smart-input-source</a> 是一个可以自动切换输入法的Emacs包。
</p>

<p>
之前在配置SIS的时候，可能是mac系统的问题，安装macism之后，Emacs一直弹窗辅助功能设置，最近突然好了。SIS比pyim方便，不需要再内置输入法，可以直接用系统的输入法。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package sis
  ;; :hook
  ;; enable the /context/ and /inline region/ mode for specific buffers
  ;; (((text-mode prog-mode) . sis-context-mode)
  ;;  ((text-mode prog-mode) . sis-inline-mode))
  :config
  ;; For MacOS
  (sis-ism-lazyman-config
   ;; English input source may be: "ABC", "US" or another one.
   ;; "com.apple.keylayout.ABC"
   "com.apple.keylayout.ABC"
   ;; Other language input source: "rime", "sogou" or another one.
   ;; "im.rime.inputmethod.Squirrel.Rime"
   "im.rime.inputmethod.Squirrel.Hans")
  ;; enable the /cursor color/ mode
  ;; (sis-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  (sis-global-respect-mode t)
  ;; enable the /context/ mode for all buffers
  (sis-global-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  (sis-global-inline-mode t)
  )</pre>
</div>
</div>
</li>



<li><a id="org53911d9"></a>pyim<br>
<div class="outline-text-6" id="text-org53911d9">
<p>
<a href="https://github.com/tumashu/pyim">pyim</a> 也可以达到相同的效果。只是这个输入法是Emacs内置的。
</p>

<p>
可能是由于我用Homebrew安装的Emacs-plus，再加上使用的doomemacs，emacs报错：编译时无法找到 <code>emacs-module.h</code> ，一直无法在Emacs里加载 <a href="https://github.com/DogLooksGood/emacs-rime">emacs-rime</a> 。Emacs-rime的<a href="https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org#%E7%BC%96%E8%AF%91%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0-emacs-moduleh-">文档</a>里写加上 <code>(rime-emacs-module-header-root "~/emacs/include")</code> ，我试了所有的Emacs可能的路径都不行。我在Linux-Ubuntu虚拟机里，没有任何问题。
</p>

<p>
这个输入法是Emacs里内置的，如果没有指定内置的输入法，会使用系统自带的。把内置的输入法设置好，同时也解决了中英混合输入的问题，在写代码的时候，来回切换输入法太磨叽了。
</p>

<p>
不知道是什么没设置好，每次新打开一个buffer都需要重新激活pyim，暂时先加了一个org-mode的hook，在org-mode里自动激活pyim。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))</pre>
</div>



<p>
<b>pyim 设置</b> ：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;;输入法 https://github.com/tumashu/pyim
(global-set-key (kbd "C-\\") 'toggle-input-method)
(use-package pyim
  :init
  :config
  (pyim-default-scheme 'xiaohe-shuangpin)
  (setq default-input-method "pyim")
  )
(use-package pyim-basedict
  :config
  (pyim-basedict-enable))
(add-hook 'org-mode-hook
          (lambda ()
            (toggle-input-method)
            (setq default-input-method "pyim")))
;; 设置 pyim 探针
;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
;; 我自己使用的中英文动态切换规则是：
;; 1. 光标只有在注释里面时，才可以输入中文。
;; 2. 光标前是汉字字符时，才能输入中文。
;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
(setq-default pyim-english-input-switch-functions
              '(;; pyim-probe-dynamic-english
                pyim-probe-isearch-mode
                ;; pyim-probe-program-mode
                pyim-probe-org-structure-template
                pyim-probe-evil-normal-mode
                ))
(setq-default pyim-punctuation-half-width-functions
              '(pyim-probe-punctuation-line-beginning
                pyim-probe-punctuation-after-punctuation))
;; 键位绑定，解绑，转换
;; 修改默认键位映射，取消command键位
(setq mac-option-modifier 'meta)</pre>
</div>



<p>
Ref：
</p>

<ul class="org-ul">
<li><a href="https://emacs-china.org/t/os-smart-input-source/13436">（重新设计）中英文混打：OS输入法管理包 smart-input-source - Emacs-general - Emacs China</a></li>
</ul>
</div>
</li>

<li><a id="org21ce18c"></a>RIME<br>
<div class="outline-text-6" id="text-org21ce18c">

<figure id="org773b56c">
<img src="https://pic.vandee.art/images/rime.png" class="img" width="50%" height="50%">

</figure>

<p>
如果说PKM是纸，那么输入法就是笔。
</p>

<p>
再次强烈推荐 <a href="https://rime.im/">RIME | 中州韻輸入法引擎</a>，配合 <a href="https://github.com/iDvel/rime-ice">iDvel/rime-ice: Rime 配置：雾凇拼音 | 长期维护的简体词库</a>，多平台多端同步。已经使用了几年，非常巴适，手机端也可以同步配置。
</p>

<p>
以前输入法就各种偷偷记录用户输入习惯，现在各个输入法又还要内置AI再记录一遍。本地配置、不需要联网的输入法是我的刚需，更何况，rime还可以自挂词库。
</p>

<p>
一个巨坑，最近的RIME更新在<a href="https://github.com/rime/squirrel/releases/tag/1.0.0">Release 1.0.0 · rime/squirrel</a>版本里改变了候选词横向和竖向的设置：
</p>

<div class="org-src-container">
<pre class="src src-nil">style/horizontal 將徹底移除，雖然本版程序仍支持，但會被新控件的默認值覆蓋
請使用 candidate_list_layout: stacked/linear 和 text_orientation: horizontal/vertical</pre>
</div>

<p>
而且最好直接在输入法外观的配置文件里，修改输入法外观的配置，而不是通用配置，反正我在通用设置里不起作用。
</p>

<p>
<b>下面是简单的安装步骤</b> ：
</p>

<div class="org-src-container">
<pre class="src src-bash">;; mac:
;; mac rime: https://rime.im/download/
Homebrew: brew install --cask squirrel
或者直接下载
;; mac rime-ice
使用东风破 plum 安装: https://github.com/rime/plum
curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash
安装 rime-ice:
℞ 安装或更新全部文件
bash rime-install iDvel/rime-ice:others/recipes/full
℞ 安装或更新所有词库文件（包含下面三个）
bash rime-install iDvel/rime-ice:others/recipes/all_dicts
℞ 安装或更新拼音词库文件（ cn_dicts/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/cn_dicts
℞ 安装或更新英文词库文件（ en_dicts/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/en_dicts
℞ 安装或更新 opencc （ opencc/ 目录内所有文件）
bash rime-install iDvel/rime-ice:others/recipes/opencc
;;或使用 rime-auto-deploy：https://github.com/Mark24Code/rime-auto-deploy，这个和plum只用选一个。
=======================================================
;;Linux
ibus:
https://github.com/rime/home/wiki/RimeWithIBus
sudo apt-get install ibus-rime                   #ibus
fcitx5:
sudo pacman -Sy fcitx5-rime                      # Arch Linux
sudo apt update && sudo apt install fcitx5-rime  # Ubuntu / Debian / Deepin
sudo zypper install fcitx5-rime                  # OpenSUSE
sudo dnf install fcitx5-rime                     # Fedora
plum and rime-ice：
git clone --depth 1 https://github.com/rime/plum ~/plum
;; 切换到东风破的目录
cd ~/plum
;; 如果你使用Fcitx5，你需要加入参数，让东风破把配置文件写到正确的位置
rime_frontend=fcitx5-rime bash rime-install iDvel/rime-ice:others/recipes/full
;; 如果你是用IBus，则不需加参数，因为东风破默认是为IBus版的RIME打造。
bash rime-install iDvel/rime-ice:others/recipes/full</pre>
</div>


<p>
其他可以参考下面的文章:
</p>

<ul class="org-ul">
<li><a href="https://sspai.com/post/84373#!">自由输入法 RIME 简明配置指南 - 少数派</a></li>

<li><a href="https://sspai.com/post/89281">RIME + 雾凇拼音，打造绝佳的开源文字输入体验 - 少数派</a></li>

<li><a href="https://sspai.com/post/90068">让 RIME 体验更上一层楼：如何用 MediaWiki 扩展词库 - 少数派</a>  导入wiki</li>

<li><a href="https://github.com/gshang2017/rime-dict">gshang2017/rime-dict: RIME输入法(拼音)自用词库(包含英语，基础，维基，搜狗等词库)，词频基于腾讯AI向量词库逆序生成。</a>  自建词库，导入专业领域词汇</li>
</ul>
</div>
</li>
</ul>
</li>

<li><a id="orgebc13f8"></a>Others<br>
<div class="outline-text-5" id="text-orgebc13f8">
<ul class="org-ul">
<li><a href="https://github.com/lijigang/100-questions-about-orgmode">lijigang/100-questions-about-orgmode: It's all about <b>orgmode</b> !</a></li>

<li><a href="https://emacs-china.org/t/emacs-immersive-translate-emacs/24990">emacs-immersive-translate: Emacs 版本的沉浸式翻译（支持多个翻译后端） - Emacs-general - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/org-ql-columnview-org-roam-org-capture-org-super-links/21599">混用 org-ql、columnview、org-roam、org-capture、org-super-links 塑造我的笔记流程 - Org-mode - Emacs China</a></li>

<li><a href="https://emacs-china.org/t/emacs-package/19922">我想分享一下我的emacs配置和学习思路，并向大家介绍一些我觉得有用的package - Emacs-general - Emacs China</a></li>

<li><p>
<a href="https://emacs-china.org/t/ekg-flomo/27505/12">https://emacs-china.org/t/ekg-flomo/27505/12</a>
</p>

<p>
<a href="https://github.com/ahyatt/ekg">https://github.com/ahyatt/ekg</a>
</p>

<p>
ekg：提供一个类似obsidian里dataview的查询汇总功能
</p></li>

<li><p>
<a href="https://github.com/protesilaos/denote">https://github.com/protesilaos/denote</a>
</p>

<p>
denote：提供类似org-roam的双链，快速插入等功能
</p></li>

<li><p>
Emacs里的其他笔记相关使用包
</p>

<p>
<a href="https://github.com/yibie/org-supertag">yibie/org-supertag: Make tag system great again, based on org-mode.</a>
</p>

<p>
<a href="https://github.com/meedstrom/org-node">meedstrom/org-node: A notetaking system like Roam using Emacs Org-mode</a>
</p>

<p>
<a href="https://github.com/jrblevin/deft">jrblevin/deft: Deft for Emacs</a>
</p>

<p>
<a href="https://github.com/caiorss/org-wiki">caiorss/org-wiki: Wiki for Emacs org-mode built on top of Emacs org-mode.</a>
</p>

<p>
<a href="https://github.com/Kungsgeten/org-brain">Kungsgeten/org-brain: Org-mode wiki + concept-mapping</a>
</p>

<p>
<a href="https://github.com/weirdNox/org-noter">weirdNox/org-noter: Emacs document annotator, using Org-mode</a>
</p>

<p>
<a href="https://github.com/toshism/org-super-links">toshism/org-super-links: Package to create links with auto backlinks</a>
</p>

<p>
<a href="https://github.com/alphapapa/org-ql">alphapapa/org-ql: A searching tool for Org-mode.</a>
</p>

<p>
<a href="https://www.armindarvish.com/post/web_omni_search_in_emacs_with_consult-web/">Web/Omni Search In Emacs with consult-web or Ditching the Browser's Default Search Engine</a>
</p></li>

<li><a href="https://mischavandenburg.com/zet/neovim-zettelkasten/">我的 Neovim Zettelkasten：我如何使用 Vim 和 Bash 在 Markdown 中做笔记 |米沙·范登伯格</a> 很强，之前用bash来生成md笔记的思路一下子扩展了。使用CLI来做笔记是一个很终极的方案。</li>
</ul>
</div>
</li>
</ul>
</div>
</div>



<div id="outline-container-org53cf2a7" class="outline-3">
<h3 id="org53cf2a7">PKM with LLM</h3>
<div class="outline-text-3" id="text-org53cf2a7">
<p>
本地笔记的优势除了隐私性，再就是，数据在自己手上，就可以干很多事。把本地的笔记文档结合LLM做思维拓展，基于个人思维习惯更精确的问答。如果说有时候双链不足以串联整个思维链条，下面这些工具如虎添翼。
</p>

<p>
看到一个大佬已经用Ollama、RAG在MacBook Pro M3 Max上实现了基于obsidian的个人AI知识助手：<a href="https://lopespm.com/machine_learning/2024/06/24/personal-llm.html">个人本地 (Llama3 8B) LLM 使用 WhatsApp + Obsidian 数据扩展 - Byte Tank</a>，和我的思路基本一致。
</p>

<p>
简单写了一个python用来直接获取高亮摘录并与本地LLM问答：<a href="https://www.vandee.art/posts/2024-07-08-omnivore-with-llm-in-python/">RSS 订阅和本地 LLM 结合的初步尝试 - 流动知识检索 | Vandee's Blog</a>
</p>

<p>
很久之前，看到一篇文章提出了一个观点：随着和LLM互动的增多，特别是现在各种LLM平台，ChatGPT、Claude、perplexity等等，查询、回顾、汇总这些问答是一个值得注意的点。
</p>

<p>
现在我的日常问答都在本地使用Open WebUI，可以导出聊天还有数据库可以直接备份，甚至还可以给对话打tag，当然也可以搜索。
</p>


<figure id="org0e2f4e5">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/PixPin_2024-10-09_11-05-50.png" class="img" width="50%" height="50%">

</figure>

<p>
需要联网搜索的内容现在基本在perplexity了，碰巧的是，最近搜索到了自己博客的内容🤣，纪念一下：
</p>


<figure id="orgbfa10fb">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/PixPin_2024-10-09_11-08-41.png" class="img" width="50%" height="50%">

</figure>
</div>

<div id="outline-container-org1b2c75f" class="outline-4">
<h4 id="org1b2c75f">Ollama</h4>
<div class="outline-text-4" id="text-org1b2c75f">
<p>
<a href="https://ollama.com/">Ollama</a> 可以本地部署大语言模型，目前GitHub 69.1k star，一直在用。obsidian，Emacs，Logseq都支持。如果说Cloudflare是赛博活菩萨，那ollama就是LLM筋斗云。
</p>

<p>
ollama支持主流的开源模型如llama3，所有支持模型可查看：
</p>

<p>
<b>Model library</b> ：Ollama supports a list of models available on <a href="https://ollama.com/library">ollama.com/library</a>
</p>

<p>
相关文章：
</p>

<ul class="org-ul">
<li><a href="https://blog.inoki.cc/2024/04/16/Ollama-cn/">Ollama 架构解析 | Inoki in the world</a></li>
</ul>
</div>
</div>


<div id="outline-container-org32b6d0a" class="outline-4">
<h4 id="org32b6d0a">Open WebUI</h4>
<div class="outline-text-4" id="text-org32b6d0a">
<p>
<a href="https://github.com/open-webui/open-webui">Open WebUI</a> 提供一个WebUI运行本地LLM，目前GitHub 31k star。良好的兼容ollama，聊天数据本地保存，可本地导入文档做RAG查询。
</p>

<p>
<a href="https://openwebui.com/#open-webui-community">社区</a>提供了插件和功能，质变的是：可以让本地LLM搜索web的内容。
</p>

<p>
Open WebUI 在2024-10-06的版本中<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes，不过只支持原生的HTML和CSS。还更新了Overview，可以在白板里展示对话的内容，太实用了，史诗级更新！
</p>


<figure id="org8dcf993">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/PixPin_2024-10-09_10-56-03.png" class="img" width="50%" height="50%">

</figure>


<figure id="org9f69834">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/PixPin_2024-10-09_10-56-41.png" class="img" width="50%" height="50%">

</figure>

<p>
<b>其他主要功能</b> ：
</p>

<ul class="org-ul">
<li>📚 本地 RAG 集成：通过突破性的检索增强生成 (RAG) 支持深入探索聊天交互的未来。此功能将文档交互无缝集成到您的聊天体验中。您可以将文档直接加载到聊天中或将文件添加到文档库中，在查询之前使用 <code>#</code> 命令轻松访问它们。</li>

<li>🔍 RAG 的网络搜索：使用 <code>SearXNG</code> 、 <code>Google PSE</code> 、 <code>Brave Search</code> 、 <code>serpstack</code> 、 <code>serper</code> 、 <code>Serply</code> 、 <code>DuckDuckGo</code> 和 <code>TavilySearch</code> 并将结果直接注入您的聊天体验中。</li>

<li>🌐 网页浏览功能：使用 <code>#</code> 命令后跟 URL，将网站无缝集成到您的聊天体验中。此功能允许您将网络内容直接合并到您的对话中，从而增强交互的丰富性和深度。</li>
</ul>

<p>
<b>docker部署相当简单</b> ：
</p>

<ul class="org-ul">
<li>CLI: <code>docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</code></li>

<li><p>
Docker compose: <a href="https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml">https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml</a>
</p>

<div class="org-src-container">
<pre class="src src-ymal">  services:
    ollama:
      volumes:
        - ollama:/root/.ollama
      container_name: ollama
      pull_policy: always
      tty: true
      restart: unless-stopped
      image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    open-webui:
      build:
        context: .
        args:
          OLLAMA_BASE_URL: '/ollama'
        dockerfile: Dockerfile
      image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
      container_name: open-webui
      volumes:
        - open-webui:/app/backend/data
      depends_on:
        - ollama
      ports:
        - ${OPEN_WEBUI_PORT-3000}:8080
      environment:
        - 'OLLAMA_BASE_URL=http://ollama:11434'
        - 'WEBUI_SECRET_KEY='
      extra_hosts:
        - host.docker.internal:host-gateway
      restart: unless-stopped
  volumes:
    ollama: {}
    open-webui: {}</pre>
</div></li>

<li><a href="https://docs.openwebui.com/getting-started/updating"> Updating | Open WebUI</a></li>
</ul>

<p>
Ref：<a href="https://docs.openwebui.com/">Open WebUI 官方手册</a>
</p>
</div>
</div>

<div id="outline-container-org9279577" class="outline-4">
<h4 id="org9279577">Aider</h4>
<div class="outline-text-4" id="text-org9279577">
<p>
<a href="https://github.com/Aider-AI/aider">Aider</a> 最近挺火的一个CLI AI助手，开源，GitHub 20.3K Star，基本可以支持市面上的所有模型。当然也支持ollama，在Emacs里有个大佬做了个<a href="https://github.com/tninja/aider.el">aider.el</a>。
</p>

<p>
可以像cursor一样有diff，修改代码，比之前看到的许多CLI AI助手（例如 <a href="https://github.com/ErikBjare/gptme">gtpme</a>、<a href="https://github.com/BuilderIO/ai-shell">ai-shell</a> 、<a href="https://github.com/cline/cline">cline</a> 、<a href="https://github.com/Doriandarko/claude-engineer">claude-enginner</a>）全面许多。
</p>

<p>
先在本机的Python环境里<a href="https://aider.chat/docs/install.html">Install aider</a>，我用的conda，在terminal里：
</p>

<div class="org-src-container">
<pre class="src src-bash">conda activate yourenv
python -m pip install -U aider-chat</pre>
</div>

<p>
实测在doomEmacs里要使用ollama的本地模型需要这样写：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package aider
  :config
  (setq aider-args '("--model" "ollama/llama3.1"))
  (setenv "OLLAMA_API_BASE" "http://127.0.0.1:11434")
  (global-set-key (kbd "C-c a") 'aider-transient-menu)
  )</pre>
</div>

<p>
另外在package.el里的安装：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(package! aider
  :recipe (:host github :repo "tninja/aider.el" :files ("aider.el")))</pre>
</div>

<p>
在Emacs里激活conda环境正常运行Aider.el。
</p>

<p>
Ref：<a href="https://emacs-china.org/t/ai-aider-emacs-aider-el/28064/15">抛砖引玉: 介绍命令行AI编程工具aider以及emacs集成aider.el - Emacs-general - Emacs China</a>
</p>

<p>
又有一个大佬制作了 <a href="https://github.com/MatthewZMD/aidermacs">aidermacs</a> ,功能更加全面。
</p>
</div>
</div>
<div id="outline-container-org075cb9a" class="outline-4">
<h4 id="org075cb9a">gptel</h4>
<div class="outline-text-4" id="text-org075cb9a">
<p>
<a href="https://github.com/karthink/gptel">gptel: A simple LLM client for Emacs</a> 是Emacs的一个包，可以在Emacs里直接和LLM对话，目前在用。
</p>


<figure id="orge79656d">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/ollama-emacs.gif" class="img" width="50%" height="50%">

</figure>

<p>
<b>最近更新了</b> ，可以支持直接添加文件、文本到上下文，awesome！居然还支持转换MD格式到Org？
</p>


<figure id="org3b04fb1">
<img src="https://testingcf.jsdelivr.net/gh/vandeefeng/gitbox@main/img/gptel-summary.gif" class="img" width="50%" height="50%">

</figure>

<p>
您可以使用 gptel 的查询包含其他文本区域、缓冲区或文件。这个附加上下文是“实时”的，而不是快照。添加后，将在每次查询时扫描并包含区域、缓冲区或文件。
</p>

<p>
您可以从菜单中将选定的区域、缓冲区或文件添加到 gptel 的上下文中，或调用 <code>gptel-add</code> 。 （要添加文件，请在 Dired 中使用 <code>gptel-add</code> 或使用专用的 <code>gptel-add-file</code> 命令。）
</p>

<p>
Ref: <a href="https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests">https://github.com/karthink/gptel?tab=readme-ov-file#include-more-context-with-requests</a>
</p>


<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">To add context 添加上下文</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">gptel-add</td>
<td class="org-left">Add/remove a region or buffer to gptel’s context.  Add/remove marked files in Dired. 在 gptel 上下文中添加/删除区域或缓冲区。在 Dired 中添加/删除标记的文件。</td>
</tr>

<tr>
<td class="org-left">gptel-add-file</td>
<td class="org-left">Add a (text-readable) file to gptel’s context.  Also available from the transient menu. 将（文本可读）文件添加到 gptel 的上下文中。也可以从瞬态菜单中获得。</td>
</tr>
</tbody>
</table>



<div class="org-src-container">
<pre class="src src-emacs-lisp">;; 基本配置
(use-package! gptel
 :config
 (setq! gptel-api-key "your key"))
;; or
;; :key can be a function that returns the API key.
(gptel-make-gemini "Gemini" :key "YOUR_GEMINI_API_KEY" :stream t)
;; or
;; Perplexity offers an OpenAI compatible API
(gptel-make-openai "Perplexity"         ;Any name you want
  :host "api.perplexity.ai"
  :key "your-api-key"                   ;can be a function that returns the key
  :endpoint "/chat/completions"
  :stream t
  :models '(;; has many more, check perplexity.ai
            "pplx-7b-chat"
            "pplx-70b-chat"
            "pplx-7b-online"
            "pplx-70b-online"))
;; or
;; Ollama
(gptel-make-ollama "Ollama"             ;Any name of your choosing
  :host "localhost:11434"               ;Where it's running
  :stream t                             ;Stream responses
  :models '("mistral:latest"))          ;List of models</pre>
</div>
</div>
</div>


<div id="outline-container-org7390a7c" class="outline-4">
<h4 id="org7390a7c">Kotaemon</h4>
<div class="outline-text-4" id="text-org7390a7c">
<p>
从发现到现在差不多就一个多星期，GitHub直接飙升到10.9K star，win、mac、Linux都支持。边用边学习它的RAG构建框架，支持ollama，支持docker。
</p>

<p>
GitHub: <a href="https://github.com/Cinnamon/kotaemon">https://github.com/Cinnamon/kotaemon</a>
</p>

<p>
Hugging Face 在线体验: <a href="https://huggingface.co/spaces/cin-model/kotaemon-demo">https://huggingface.co/spaces/cin-model/kotaemon-demo</a>
</p>

<p>
官方介绍：
</p>

<p>
This project serves as a functional RAG UI for both end users who want to do QA on their documents and developers who want to build their own RAG pipeline.
</p>

<ul class="org-ul">
<li>For end users:
<ul class="org-ul">
<li>A clean &amp; minimalistic UI for RAG-based QA.</li>
<li>Supports LLM API providers (OpenAI, AzureOpenAI, Cohere, etc) and local LLMs (via <code>ollama</code> and ~llama-cpp-python`).</li>
<li>Easy installation scripts.</li>
</ul></li>
<li>For developers:
<ul class="org-ul">
<li>A framework for building your own RAG-based document QA pipeline.</li>
<li>Customize and see your RAG pipeline in action with the provided UI (built with <a href="https://github.com/gradio-app/gradio">Gradio</a>).</li>
<li>If you use Gradio for development, check out our theme here: <a href="https://github.com/lone17/kotaemon-gradio-theme">kotaemon-gradio-theme</a>.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgc7fcdda" class="outline-4">
<h4 id="orgc7fcdda">Chipper</h4>
<div class="outline-text-4" id="text-orgc7fcdda">
<p>
Github: <a href="https://github.com/TilmanGriesel/chipper">https://github.com/TilmanGriesel/chipper</a>
</p>

<p>
其实很早就关注了这个项目，但是一直没有尝试。这个项目基于 Elasticsearch 来实现文档搜索和 RAG。LLM 的提供支持 ollama 和 huggingface。提供脚本一键 docker 部署很方便。
</p>

<p>
我看重的功能是：它可以提供一个 ollama 的代理。也就是使用这个项目的 ollama 代理之后，就可以直接调用项目的文档 RAG 了，而这个项目管理文档 RAG 很方便。这样就可以把它当作是一个文档搜索引擎了。
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc1c5bf7" class="outline-2">
<h2 id="orgc1c5bf7">ChangeLog</h2>
<div class="outline-text-2" id="text-orgc1c5bf7">
<ul class="org-ul">
<li><p>
2024-09-13: 校对文档。在使用了Nvim做MD笔记一个月之后，还是割舍不了org-mode的编辑体验，还有agenda。lisp的可玩性比lua还是高一些，比如<a href="https://github.com/jwiegley/dot-emacs/blob/master/lisp/org-roam-logseq.el">dot-emacs/lisp/org-roam-logseq.el at master · jwiegley/dot-emacs</a>这是一个把org-roam和Logseq联用的el。
</p>

<p>
<a href="https://nicholas.carlini.com/writing/2024/how-i-use-ai.html">How I Use "AI"</a> 许多远古大佬还是在用Emacs，这点就足够我继续探索lisp的语言哲学了。<a href="https://x.com/oran_ge/status/1834253705149133225">orange.ai on X: "采访《汉语新解》作者李继刚：为什么会用 Lisp？ </a>,最近大火的汉语新解的prompt就是lisp语法写的。
</p></li>

<li><p>
2024-10-09：更新了输入法设置，加入sis的配置方案。Open WebUI最近<a href="https://github.com/open-webui/open-webui/releases/tag/v0.3.31">更新</a>了，支持类似Claude artifacts的artifacts: <b>🎨 Artifacts Feature</b>: Render web content and SVGs directly in the interface, supporting quick iterations and live changes.
</p>

<p>
还有一大堆新更新。
</p></li>

<li>2024-10-13: 增加了 Aider (一个CLI AI编程助手)在 Emacs 里的安装。最近开源的从代码到部署的 <a href="https://github.com/stackblitz/bolt.new">bolt.new</a>  也很强，还有 Pythagora 的 <a href="https://github.com/Pythagora-io/gpt-pilot">gpt-pilot</a>， AI 辅助编程的项目越来越多了，感谢 cursor 带来了这么多的竞争者。</li>
<li>2024-10-24: 将 MD 文档转换成 org 文档的校对，删除了部分不必要的介绍。</li>
<li>2024-11-12: 从 DoomEmacs 转向原生 Emacs 自己<a href="https://github.com/VandeeFeng/emacs.d">配置</a>。</li>
<li>2025-02-09: 增加 chipper。</li>
<li>2025-02-13：增加 aidermacs.</li>
<li>2025-05-11: 增加 org-supertag, org-node.</li>
</ul>
</div>
</div>
<div id="outline-container-org72ace8f" class="outline-2">
<h2 id="org72ace8f">Thanks</h2>
<div class="outline-text-2" id="text-org72ace8f">
<p>
这个手册会持续更新，如果对你有所帮助，我会很开心。
</p>

<p>
另见：<a href="https://www.vandee.art/2024-08-02-nvim-pkm-manual.html">PKM（个人知识管理）构建手册 - Nvim</a>
</p>

<p>
这里是我日常使用的实用小工具： <a href="https://www.vandee.art/2024-07-26-useful-tools-recommended.html">实用小玩意收集</a>
</p>

<p>
Imagining and creating！
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-pkm.html">PKM</a> <a href="https://www.vandee.art/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[PKM]]></category>
  <category><![CDATA[Emacs]]></category>
  <link>https://www.vandee.art/blog/2024-05-22-org-pkm-manual.html</link>
  <guid>https://www.vandee.art/blog/2024-05-22-org-pkm-manual.html</guid>
  <pubDate>Wed, 22 May 2024 19:47:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[也说说艺术的价值]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9e234de">《现代艺术150年》</a></li>
<li><a href="#org3800921">艺术简史</a></li>
<li><a href="#orge766264">艺术的价值</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org9e234de" class="outline-2">
<h2 id="org9e234de">《现代艺术150年》</h2>
<div class="outline-text-2" id="text-org9e234de">
<p>
<a href="https://www.bilibili.com/video/BV1ax4y1z7Tr/">拍卖网站上盲买了一幅毕加索，只为告诉你什么叫做艺术之殇</a> ，刷到了这个视频。
</p>

<p>
先闲聊几句养号。这个概念是一年前在一个帖子里看到，大概意思是：大数据和AI分析用户数据是不可避免的，既然这样就利用这个机制，让它来养号，一个号专门学习，只搜索哪些内容。抖音已经很久没用了，并不是内容的问题，根本原因是不方便我RSS订阅，再加上开屏自动播放突然出现的声音和画面让我比较反感。在Twitter建了几个分类的关注列表，B站上面因为长年搜索艺术、哲学、音乐相关的内容，主动获取信息的时候基本上大数据推的也是这些，再加上被动的RSS订阅定期推送关注的大佬的博客和newsletter，目前信息源就养成了这样。
</p>

<p>
回到这个视频，作者在视频里提到：
</p>
<blockquote>
<p>
毕加索远不是我个人喜欢的那一类艺术家，因为他太不纯粹了，虽然毕加索对于现代艺术的贡献是毋庸置疑的，但是他的创作真的太多太杂也太乱了，并且我可以说他那些作品里面95%以上都是没有任何艺术价值的商品。
</p>

<p>
威尔贡培兹的现代艺术150年，我感觉挺有意思的，就也买来看了看，里面提到了一个很有趣的观点，他说销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。贡培兹的意思很明确，那就是在现代社会的语境下，在资本主义的运作下，一栋房子好不好，一件艺术品美不美其实并没有那么重要，所谓的价值只不过是纯纯的附加值罢了。
</p>

<p>
但我只想说，时代造就艺术，所以艺术的问题就是时代的问题，我不愿意过多地去妄断这些艺术，现代艺术也好，当代艺术也好，是因为不管他们有什么千奇百怪的问题，最终都会反噬到我们这个社会，反射到我们每一个个体上面。
</p>
</blockquote>

<p>
<a href="https://book.douban.com/subject/26854318/">《现代艺术150年》</a>已经加入书单，再顺便提一嘴<a href="https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram">https://zh.singlelogin.re，z-library最新可用的域名，我用到现在最快最准确的还是他们官方的telegram</a> bot，会更新最新的可用域名，网上查到的许多都是钓鱼网站。这也是没法，他们天天要和FBI躲猫猫。（支持正版！）
</p>

<p>
现代艺术商业性远大于艺术性，时代造就艺术，所以说，艺术的问题就是时代的问题。很赞同作者的看法，另外我也不太喜欢毕加索过于商业化的一面，但这并不妨碍我对毕加索是个天才的定论。不吹不黑，相比之下，梵高、高更、塞尚这些差不多同世纪的艺术画家，确实纯粹一些。窦唯现在好像只倾心于北京的京酱面，彻底修仙了。
</p>

<p>
今天思考的问题是，艺术价值与纯粹的问题。
</p>
</div>
</div>

<div id="outline-container-org3800921" class="outline-2">
<h2 id="org3800921">艺术简史</h2>
<div class="outline-text-2" id="text-org3800921">
<p>
我不是什么艺术科班学生，也没有特别出众的艺术特长，更没有什么实际的艺术运作经历，只是一个艺术爱好者，平常拍拍照、唱唱歌、录录音（写谱还在学，AI赶紧出个自动写谱的！），纯粹是瞎聊。有一个概念是<a href="https://wangyurui.com/posts/si-wei-mo-xing-04-si-xiang-shi-yan-5744df28">思想实验</a>，我就勉强把自己的瞎想往上面靠了。在想象力方面，我还是对自己有信心的。
</p>

<p>
现阶段我对于价值的思考的底层逻辑，很大一部分来源于马克思的《资本论》，勉强看懂了开头。再加上一点点曼昆的《经济学原理》、亚当·斯密的《国富论》柏拉图的《理想国》。而对于艺术的理论认知也仅仅来源于《艺术与视知觉》、《艺术的故事》、原研哉的《设计中的设计》（强烈推荐）。
</p>

<p>
在比较认真的谈论一个具体事情的时候，摆出自己观点之前，阐明自己的理论和来源，我认为是很有必要的，观点都是有倾向性和局限性的。
</p>

<p>
下面正式开始，先简单过一遍艺术的发展史（主要是绘画史，比较可考，音乐能固定下来那是太近代的事了，许多艺术风格概念的来源也是绘画）。
</p>

<p>
从艺术的诞生开始说起的话，史前时期的原始部落会做一些人偶和泥巴雕塑，到了古埃及时期，法老陵墓里的壁画，艺术风格或者说艺术形式开始出现雏形。当时艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描 绘成从偶然碰上的角度看到的样子。他们是**根据记忆作画**，所遵循的一些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。
</p>

<blockquote>
<p>
这大概跟他们的绘画必须为另一种目的服务有关系。当时最关紧要的不是好看不好看，而是完整不完整。艺术家的任务是要尽可能清楚、尽可能持久地把一切事物都保留下来，所以他们并不打算把自然描绘成从偶然碰上的角度看到的样子。他们是根据记忆作画，所遵循的一 些严格的规则使他们能把要进入画面的一切东西都绝对清楚地表现出来。事实上，他们的做法很像画地图，不像作画。埃及人处理这个问题时内心没有任何不安。他们会径直把池塘画成 从上面看、把树木画成从侧面看的样子。然而池塘里的鱼禽若从上面看则很难辨认，所以就把它们画成侧面图。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
古埃及时期，艺术创作更多的服务于目的，到了希腊和罗马时期，艺术家开始更多的表达自己想表达的内容，肖像画和雕塑中人的肖像体现的很明显，古埃及时期和希腊时期的肖像都没有具体的表情和神态，因为那个时期艺术服务于具体的目的，肖像更像是一种象征，象征神和君王，但到了罗马，艺术家开始注重这些细节，并敢于在作品里呈现。而在希腊时期，画家们有一项压倒一切的伟大发现，即发现了短缩法 （foreshortening），希腊艺术家使用衣饰去标出人体的主要分界，这类手法仍然表明他们是多么注重关于形式的知识，并且希腊时期的艺术家开始研究肌肉、骨骼进一步运用知识来创作，这正是严格地循规蹈矩和寓变化于规矩之中二者所达到的平衡。许多现代的艺术手法依然能在其中找到影子。
</p>

<p>
简单来说，随着人类认知的提升，艺术创作的目的、过程、技术、手法，都在发生着微妙的变化。以古埃及到古罗马时期为例，艺术家从根据记忆作画，尽可能的保留记忆中重要的画面，目的更多的是记录，到后来逐渐开始运用知识来重新定义表现的形式与重点。
</p>

<p>
中间经历了伟大的文艺复兴和宗教改革，经过19世纪晚期的印象派（主要是想提一提梵高），来到了20世纪前半叶，表现主义（蒙克-尖叫，石版画）、抽象派和立体主义（蒙德里安-红，黑，蓝，黄和灰的构图、毕加索Pablo Picasso-小提琴和葡萄），再到超现实主义（萨尔瓦多·达利Salvador Dali-永恒的记忆）。其实纵观艺术的历史，和思想史差不多，艺术风格的演变基本围绕着：现实和虚拟这两个对立面。
</p>

<p>
古埃及时期，其实也是为了写实才画出埃及壁画上的侧身人面像，到了中世纪开始涌现大量宗教题材的作品，巴洛克和宗教改革之后，18世纪中晚期画家基本就是皇家御用的肖像画照相机了，到了19世纪工业革命时期，因为出现了大量的没有灵魂的流程化工业艺术加工品，在加上对学院派过于循规蹈矩和各个学院派系之间的争斗（就好像我哈佛的就是瞧不起剑桥的），艺术家们逐渐在以巴黎蒙马特区（Montmartre）的咖啡馆中开始讨论新的艺术概念。居斯塔夫·库尔贝（Gustave Courbet, 1819-1877）1855年，在巴黎的一座棚屋里开个人画展的时候，给画展取名为（现实主义——G·库尔贝画展》（Le Realisme, G·Courbet），“现实主义”革命开始，这个现实主义主要的意思是要展现自然真实的光影，而不是学院派过于追求技法的那种在画室内纯写实却忽略了自然里的各种不可用公式固定下来的自然变化，学院期望艺术家们以神话、宗教形象、历史或者古典 风俗习惯为基础，用一种把主题理想化的风格来创作他们的作品，印象派艺术家从室内走向室外，通过拆除工作室与实际生活之间的壁垒而改变了游戏规则。之后以爱德华·马奈（Édouard Manet, 1832—1883）、克劳德·莫奈（Claude Monet, 1840-1926）为代表，印象派开始萌芽。
</p>

<p>
从现实主义革命开始，现代艺术的风格就一直在争斗，这个时期的市场经济也发达许多，资本主义也逐渐成熟，艺术家们自己也比较迷茫，参照传统的艺术风格吧，印象派已经说明太传统的技法反而不能反映出时时都在变化的大自然环境，不符合人眼最直观的“印象”，创新一些吧，大佬就那么几个可以迎合市场需求的。到了现代的超现实主义之后，我个人感觉，艺术风格已经是一个非常宽泛的概念了，主流的传统艺术风格已经在各派的争斗当中演变成许多叫不出名的分支。引用《艺术的故事》里作者感叹：
</p>

<blockquote>
<p>
在这里，我们终于回到我们的出发点。实际上根本没有艺术其物。 只有艺术家，他们是男男女女，具有绝佳的天资，善于平衡形状和色彩 以达到“合适”的效果；更难得的是，他们是具有正直性格的人，绝不肯在半途止步，时刻准备放弃所有省事的效果，放弃所有表面上的成 功，去经历诚实的工作中的辛劳和痛苦。我们相信永远都会有艺术家诞生。但是会不会也有艺术？这在同样大的程度上也有赖于我们自己，亦即艺术家的公众。通过我们的冷漠或我们的关心，通过我们的成见或们的理解，我们还是可以决定事情的结局。恰恰是我们自己，必须保证传统的命脉不致中断，保证艺术家仍然有机会去丰富那串宝贵的珍珠， 那是往昔留给我们的传家之宝。
</p>

<p>
来源：《艺术的故事》
</p>
</blockquote>

<p>
艺术好像其实从来就不存在，我们日常所说的艺术、艺术的价值，演变为了，艺术品的商品价格、公众和时代对于艺术家、艺术品的风评与潮流。被时代认可的风格，才能成为历史中叫得出名字的艺术，存在的是艺术品，而不是艺术。
</p>
</div>
</div>

<div id="outline-container-orge766264" class="outline-2">
<h2 id="orge766264">艺术的价值</h2>
<div class="outline-text-2" id="text-orge766264">
<p>
确实，到了现在，如同开始提到的那个视频里所说，销售高端艺术和销售高端房产，在本质上其实是一样的，决定一栋房子价值的是地段地段地段，而决定一件艺术品价值的是出处出处出处。资本也在很大程度上影响着艺术。
</p>

<p>
到这里，悖论就显而易见了：如果说艺术家是追求纯粹的表达，但艺术作品的价值体现从来就不是一个可以纯粹的过程，那现实里存在纯粹的艺术么？如果说艺术家不是追求纯粹的表达，那艺术作品的价值是从什么而抽象出来的？随意一个有一定劳动价值的作品就可以称作为艺术品，并附加上艺术品的价值么？（严格区分艺术、艺术家、艺术作品这三个概念）
</p>

<p>
我现在的想法是：艺术创作肯定是劳动的一种，既然是劳动的一种，按照马克思《资本论》里关于价值的理论，这种自由的、自发的劳动的价值，一定会对象化到一个对象上（暂时称作 <b>art object</b> ），对于商品，劳动者的劳动价值就对象化到了商品的价值也就是货币。无论在那个时代，art object是一直都存在的，从远古时代到现代，它提供的美的欣赏的价值一直没有变化，创造这个过程本身的价值也没有发生变化。人类创造这个art object是自然自发的行为，来源于生存需求之上的审美需求以及想象力、想象的表达，一部分也来自于无聊。无聊的时候，人就会找事情做，让自己不无聊。人类如果没有艺术创作，没有艺术真的会无聊死的。我无法想象，没有音乐、没有绘画、没有艺术设计的世界，就好像一切突然都失去了色彩，只剩下空洞和死板。
</p>

<p>
但艺术家也要生存，所以，art object 的一部分对象化到商品与货币上是天经地义的。更何况最开始，艺术家根本不存在，做雕塑和画像也没有特定的艺术创作目的，只是在工作和劳动。人类不同时代的认知决定了不同的艺术形式与概念，艺术品的商业价值、商品价值更是如此。艺术品的art object 和艺术品的拍卖价格这两个价值也其实并不冲突，拍卖价格是社会共同价值规律形成的，这同样是艺术的一部分。无法流通到社会的艺术品，独有自己的art object也就无法被社会共同价值衡量。
</p>

<p>
因此，简单来说：art object是对个人的美的价值，而艺术品的商品价值是对外的社会共同价值。说人话就是，我喜欢什么是我的事，它之多钱是它的事，这也正是艺术自由的地方，人人都可以保有自己的art object。
</p>

<p>
写到这里突然让我想到了电影《私人定制》里，王宝强那个弹棉花的章节。李成儒扮演的大导演为了摆脱俗，追求极致的雅，和王宝强换血，最后去弹棉花去了。无法被人欣赏的艺术品，也就是失去了社会共同价值，可能也就不能称作为一个艺术品了，因为艺术品是需要欣赏对象的，艺术家和欣赏对象共同加起来才是艺术品。我一个人天天在街上拿着一幅画喊，我邻居画的这幅画可好看了！喊到喉咙破了，也涨不了几毛钱。
</p>

<p>
最后，
</p>

<p>
我认为，这些壁画、雕塑、工艺品、摄影、音乐等等劳动品能够在人类认知的发展中逐渐统一起来有了一个共同的称呼：艺术，是因为它们都有一个共同的object： <b>填补真实与虚拟之间的空隙</b> 。这个art object从来独立于它可以卖多少钱，也与这个附加价值并不冲突，也不会让它变得不纯粹，美一直是纯粹的，不纯粹的是社会共同价值规律。
</p>

<p>
这也是我现阶段对于艺术的定义。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-art.html">Art</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Art]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2024-05-05-the-value-of-art.html</link>
  <guid>https://www.vandee.art/blog/2024-05-05-the-value-of-art.html</guid>
  <pubDate>Sun, 05 May 2024 21:29:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[三颗大包菜]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org588b252">书的香味</a></li>
<li><a href="#orga58d99d">三颗大包菜的分量</a></li>
</ul>
</div>
</nav>

<figure id="orgeb43bb0">
<img src="https://s2.loli.net/2024/03/15/bUw5MqRz639pIHs.jpg" class="img ：height 50%" width="50%">

</figure>

<div id="outline-container-org588b252" class="outline-2">
<h2 id="org588b252">书的香味</h2>
<div class="outline-text-2" id="text-org588b252">
<p>
好几天没吃有机娃娃菜了，思来想去，还是它在一大堆乱七八糟的食物中脱引而出。买完菜回来路上，看到一个摆着许多书的大摊子，支棱起来的简陋的棚子上面挂着一个牌子，醒目的写着：全场图书，买二本送三本。
</p>

<p>
老实说，不是这个牌子，我今天是应该不会走过去的。我也一贯没觉得自己的热爱足以给我不加思考就不自觉行动的动力。如果我是因为热爱读书，喜欢看王小波的书，在白嫖完电子版之后我应该早就在书店买了精装版，而现在却是在一个图书大甩卖的街边小摊，而且很可能是盗版。开始写标题和日期的时候才发现，今天正好是315。
</p>

<p>
就看书这个事，有必要多写几句。我不是一个爱看书的人，从我看过的书那少的可怜的数量就足以说明。但是走过路过书店，总是会不自觉看一眼，但又很少走进去。为数不多的进去书店的时候，也只是翻看翻看书皮，正过来看又反过来看，回忆起来真不知道自己当时是在干嘛。只记得，印刷书的油墨味道好闻，把书捧在手里的感觉巴适，还有把纸张翻页过去，手指摩擦纸面的触感，这些总在我看到书的时候不自觉的被调动起来。如此说来，我对书的兴趣从一开始就不是因为书的内容和书这个承载知识的载体本身，这个兴趣的源头极有可能是因为<a href="https://www.vandee.art/2023-11-24-something-about-boring.html">无聊</a>。
</p>
</div>
</div>

<div id="outline-container-orga58d99d" class="outline-2">
<h2 id="orga58d99d">三颗大包菜的分量</h2>
<div class="outline-text-2" id="text-orga58d99d">
<p>
买了时代三部曲和其他几本看过的觉得不错的就走了，一共140元。
</p>

<p>
这六本还是有点沉的，大约是三颗大包菜的重量。四舍五入，一个时代，一个人的一生现在也就约等于三个大包菜。
</p>

<p>
在那个书摊上，还有许多很有分量的书，比如：《穷查理宝典》、《纳瓦尔宝典》、中国四大名著、《白夜行》等东野圭吾小说，再就是儿童图书和一些畅销书。整个书摊大概三百本左右，如此分量，一个简陋的书摊架子足以，因为书摊架子只会不自觉的提供向上的支持力平衡书的重力，这对于铁架子加上厚木板的组合太轻松了。
</p>

<p>
也因为书架不会看书，所以只能本能的、不自觉的提供材料的支持力和张力，感受到书本的物理重量；而我会看书，除了提供把书拿起来、翻页之外好像也没多少其他我这个材料本能的、不自觉的力量，况且三个大包菜的重量我已经觉得沉了。因此我远不如一个三百本也不费吹灰之力的书架。但在路过书店这个事上，我比书架做得好，我自觉的就像不自觉一样，这是书架做不到的。
</p>

<p>
王小波的书放在书摊里不起眼，这个不起眼有三：和中国四大名著放一起的不起眼，和《穷查理宝典》、《纳瓦尔宝典》，还有和育儿、儿童书放一起的不起眼。四大名著自不用说，这是正统文学文化根基的分量，《穷查理宝典》这是教人致富的财富分量、名人典型的分量，育儿、儿童书、畅销书这是生活消遣、童趣的分量（今天书摊里看的人最多的也是这一块）。对于我这种没有看书“不自觉”的人来说，更不起眼，很可能以前在书店已经路过王小波的书许多次了。
</p>

<p>
我今天买这些书的行为可能在我读了这些文字的时候就已经决定了，一个作家、文学创作者，跳出了艺术创作的体裁本身，这正是我现在在思考和践行的过程。我既想看看王小波的答案，更想找到新的自己的答案。
</p>
<blockquote>
<p>
<b>没有科学知识的人比有科学知识的人更容易犯错误；但没有艺术修养的人就没有这个缺点，他还有容易满足的好处。假如一个社会里，人们一点文学修养都没有，那么任何作品都会使他们满意。</b> 举个例子说， 美国人是不怎么读文学书的，一部《廊桥遗梦》就可以使他们如痴如狂。相反，假如在某个国家里，欣赏文学作品是他们的生活方式，那就只有最好的作品才能使他们得到满足。我想，法国最有资格算作这类国家。一部《情人》曾使法国为之轰动。大家都知道，这本书的作者是刚去世不久的杜拉斯。这本书有四个中文译本，其中最好的当属王道乾先生的译本。我总觉得读过了《情人》，就算知道了现代小说艺术；读过道乾先生的译笔，就算知道什么是现代中国的文学语言了。
</p>

<p>
有位作家朋友对我说，她很喜欢《情人》那种自由的叙事风格。她以为《情人》是信笔写来的，是自由发挥的结果。我的看法则相反，我 认为这篇小说的每一个段落都经过精心的安排：第一次读时，你会感到极大的震撼；但再带着挑剔的眼光重读几遍，就会发现没有一段的安排经不起推敲。从全书第一句“我已经老了”，给人带来无限的沧桑感开 始，到结尾的一句“他说他爱她将一直爱到他死”，带来绝望的悲凉终，感情的变化都在准确的控制之下。 <b>叙事没有按时空的顺序展开，但有另一种逻辑作为线索，这种逻辑我把它叫做艺术——这种写法本身就是种无与伦比的创造</b> 。我对这件事很有把握，是因为我也这样写过：把小说的文件调入电脑，反复调动每一个段落，假如原来的小说足够好的话，逐渐就能找到这种线索；花上比写原稿多三到五倍的时间，就能得到一篇新小说，比旧的好得没法比。事实上，《情人》也确实是这样改过，一直改到改不动，才交给出版社。《情人》这种现代经典与以往小 说的不同之处，在于它需要更多的心血。我的作家朋友听了以后感觉有点泄气：这么写一本书，也不见得能多赚稿费，不是亏了吗？但我以为，我们一点都不亏。现在世界上已经有了杜拉斯，有了《情人》，这位作家和她的作品给我们一个范本，再写起来已经容易多了。 <b>假如没范本，让你凭空去创造这样一种写法，那才是最困难的事</b> ：六七十年代，法国有一批新小说作家，立意要改变小说的写法，作品也算是好 看，但和《情人》是没法比的。有了这样的小说，阅读才不算是过时的 陋习——任凭你有宽银幕、环绕立体声，看电影的感觉终归不能和读这 样的小说相比。
</p>

<p>
引自“用一生来学习艺术”收录于《沉默的大多数》—王小波
</p>
</blockquote>

<p>
《黄金时代》、《白银时代》、《青铜时代》、《黑铁时代》，真想看看王小波写的这个时代。
</p>

<p>
<a href="https://lizhi.turkyden.com">李志</a>被禁言了，《黄金时代》王小波被删减了，我们这个时代的最后是几颗大包菜不起眼的躺在书架上呢。
</p>


<figure id="orge206386">
<img src="https://s2.loli.net/2024/03/15/yIuJ2pEOVnZ1MA7.jpg" class="img ：height 50%" width="50%">

</figure>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <link>https://www.vandee.art/blog/2024-03-15-the-weight-of-three-cabbages.html</link>
  <guid>https://www.vandee.art/blog/2024-03-15-the-weight-of-three-cabbages.html</guid>
  <pubDate>Fri, 15 Mar 2024 14:26:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[摇树枝的猴子]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgeb49b4d">摇树枝的猴子</a></li>
<li><a href="#org1f3eda1">开源的知识</a></li>
<li><a href="#orgd02b5fb">幸福</a></li>
<li><a href="#orgf59966c">跬步与千里</a></li>
</ul>
</div>
</nav>
<p>
我觉得自己是个不会种地的农民，总是赶不上节气。 —王小波《黄金时代》
</p>


<figure id="org2505338">
<img src="https://s2.loli.net/2024/03/03/GVe18fzdCjXF5Ra.jpg" class="img" width="50%" height="50%">

</figure>


<div id="outline-container-orgeb49b4d" class="outline-2">
<h2 id="orgeb49b4d">摇树枝的猴子</h2>
<div class="outline-text-2" id="text-orgeb49b4d">
<blockquote>
<p>
这场访谈聊开后，许志远在猝不及防的问宁浩，你最大的弱点是什么呢？
宁浩这才回答，&#x2026;但我觉得我怯懦，
</p>

<p>
或许在这个意义价值普遍被消解的时代，荒诞与发疯已经成为常态，已经成为了人们一种自我保护的方式。
</p>

<p>
在宁浩的办公室门前有一尊斗战胜佛像，对此他解释，每个人的人生都像孙悟空一样，走过一个被规范了的过程。
</p>

<p>
最后他讲了一个猴子摇树枝的故事，有人曾经问宁浩你为什么拍电影，他说小时候老看见动物园里有一只猴子被关在笼子里，没事就晃树枝，他想知道为什么，意义是什么。过了几个月之后再去看，他发现那只猴子还在那晃树枝。宁浩突然明白这只猴子能怎么样呢，他觉得自己晃树枝晃得比别的猴子晃得好，它就瞬间产生了一个意义，就是它不晃树枝又做什么呢。那我们就是要去找到我们人生中的各种意义，拍拍电影，晃晃树枝。
</p>

<p>
或许对于宁浩来说，如今拍电影就是在笼子里晃树枝。这让我想到红毯先生最后一幕，刘维持在封闭的大楼里，踩着平衡车来来回回兜圈子，搭上时代的车无意义的回旋，最重要的好像是学会站稳好了。
</p>

<p>
来源：<a href="https://www.bilibili.com/video/BV1f4421A7yU/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=670">吃了这些真瓜，更懂《红毯先生》 【精准空降到 11:10】 </a>
</p>
</blockquote>

<p>
经常看到网上的这类话，大致意思是：人生或许本来就没有意义，是人类赋予了生命意义、追寻这个“没有意义的人生”就是意义、这个没有意义本身就是意义，诸如此类。
</p>

<p>
在前几年我或许还会赞同一些，但现在只是不反对。混淆哲理和哲学是个老问题，在生活中问题不大，混为一谈甚至还有诸多好处，哲学的学术语义也逐渐被日常口语语义哲理所覆盖，古典哲学的内涵也早就演变成了分析哲学和语言哲学，如此说来也无可厚非。
</p>

<p>
人生意义这个问题，就好像，一定体积的水被放在一个既定外形的容器内，
哲理的意思是：水本来没有特别意义，装在瓶子里，有了容器，就有了形状，我们喝水，这个水于是有了被喝意义，人生也是如此。很显然这和哲学没有一点关系。
</p>

<p>
我是物质决定意识的拥护者，
</p>
<blockquote>
<p>
不，我们身上没有任何东西可以逃过自然法则。假如真有那样的东西，那我们早该发现了。我们身上并没有违背事物自然表现的东西。整个现代科学，从物理学到化学，从生物学到神经科学，都在巩固我们的这一认知。这个困惑的解答在别处。当我们认为自己很自由的时候，我们确实做得到，因为我们的行为由身体内部的大脑决定，不受外部因素左右。但是自由并不意味着我们的行为不受自然规律的支配，而是说明自然规律通过大脑的运作来决定我们的行为。我们的自由决定，是我们大脑中数十亿个神经元相互作用的结果，其交互极为丰富，无比迅速。 <b>我们的抉择固然自由，但却不可能超出神经元的相互作用。</b> 这是否意味着当我做出决定的时候，那个决定的人就是“我”呢？ 对，当然是这样，难道“我”还能做出与我的神经元不同的决定吗？那也太荒谬了。 <b>正如7世纪荷兰哲学家斯宾诺莎（Baruch Spinoza ）极为清楚地认识到的那样，这二者是一回事。其实并没有“我”和“我大脑的神经元”之分，这两者本是一码事。一个人就是一个程序，复杂而又极其完备。</b>
</p>

<p>
—卡洛·罗韦利《七堂极简物理课》
</p>
</blockquote>

<p>
笛卡尔的<a href="https://wangyurui.com/posts/wo-si-gu-wo-zai-9f4374ba">我思故我在</a>，现在仍然可以是人类的强心剂。我一直抱有一个观点：哲学唯物唯心的答案在我们找到外星人(不低于人类的高等文明)之后自然会有结论，内禀的矛盾还得参照系统外部。即便是物质决定的意识，我们人类所反应出的意识也只是宇宙里并不唯一的版本，只不过我们统治了地球的生态。我们在物质绝对规律（科学）所反馈的意识下，来演绎、归纳物质的规律，这本身从源头开始就是矛盾的，因此我也一直更愿意把这些称为“发现”而不是“发明”。
</p>

<p>
康德的先验理论、黑格尔的绝对精神和形而上学放在现在一定是违背现代科学理论体系的，但谁又能完全否定物质就是不那个“神”呢？我们掌握了物质的绝对的全部奥秘就能掌控我们自己的人生，人类的文明么？犹太人第一个说不，薛定谔第二个。
</p>

<p>
<b>不怀疑和否定存在，就无法肯定存在</b> 。作为物质来说，人类、人类文明必然是没有意义的（熵是老大），物质就是现代文明，现代科学的“神”，但臣服于物质的一定不是人类，人类也一定不会臣服于物质，因为“我思故我在”，因为在同一个物质体系中人类文明一直延续到了现在，因为人类的爱和非理性就是这个无秩序的物质世界带来秩序和无序的最大变数。
</p>

<p>
许多生物都会繁殖、生殖，但只有人类说，爱。
</p>

<p>
宁浩可能正处于笛卡尔怀疑自己的那个阶段，我很喜欢宁浩，很想再看到疯狂的石头、疯狂的赛车这样的作品。我们就是摇树枝的猴子，爱就完事了，毫无意义又怎样？只因为，我们存在。（并没有存在是意义本身的意思）
</p>
</div>
</div>

<div id="outline-container-org1f3eda1" class="outline-2">
<h2 id="org1f3eda1">开源的知识</h2>
<div class="outline-text-2" id="text-org1f3eda1">
<blockquote>
<p>
这几天被收藏最多的链接之一，一定有这个飞书文档。
</p>

<p>
一群年轻人用手工协作的方式，一砖一瓦的砌成了可能是中文互联网里最好的AI知识库，然后本着开源的理念把文档共享给所有人。
</p>

<p>
说实话，这让我有点依稀感觉到维基百科的古典文化了，文档的主要创作者刚刚开了一场直播，讲他们是怎么打造这项宏大工程，以及在欠缺回报的预期下，为何这么多人愿意参与到共建行为里。
</p>

<p>
在过去，这本来不会构成一个问题，因为互联网的起源，就始于一台主机与另一台主机的连接，任何信息的交换，都伴随着数据的上传和下载，上世纪九十年代马化腾和雷军作为志愿者主动维护的FidoNET，也承载着饱含热情的共享兴趣，再往后「做一个有种的男人」，也见证了BT与电驴的浪潮兴衰。
</p>

<p>
商业化在某种程度上破坏了互联网的初衷，虽然未必应当批判市场的选择，但是利用而非填平信息鸿沟的做法泛滥起来，终究是让人失望的，就像OpenAI自己都还在研究Sora，关于如何精通Sora的付费课程已经齐刷刷的上市了，好笑的背后，其实充满了悲哀。
</p>

<p>
所以看到年轻人赤手空拳的打破围栏，重新拽回「我为人人、人人为我」的互联网精神，让AI的知识得到普惠传递，这份拾光筑梦的本色，真的值得记录下来。
</p>

<p>
来源：<a href="https://weibo.com/1560906700/O37SZek39">https://weibo.com/1560906700/O37SZek39</a>
</p>
</blockquote>

<p>
就是这个<a href="https://waytoagi.feishu.cn/wiki/QPe5w5g7UisbEkkow8XcDmOpn8e">通往AGI之路-飞书文档</a> 了，再看看<a href="https://www.thepaper.cn/newsDetail_forward_137600">李一舟</a>。
</p>

<p>
<a href="https://www.vandee.art/2023-12-06-learn-all-the-time.html">Learn All The Time</a> 里我提到了认知盈余，以及价值的一些思考。
</p>

<blockquote>
<p>
因此知识的交换，互联网信息的共享，认知盈余这种价值的形成是一定的。
</p>

<p>
我相信那些固有价值一直都是还是存在的。也就是马克思所说的劳动、劳动品价值或者商品的使用价值。 <b>它们不应该在现在习以为常的资本和货币华丽耀眼的盛装舞蹈中被渐渐淡忘。知识和认知更是这样。</b> 并不是所有价值都能在货币里的得到应有的体现，也并不是所有价值都能够或应该参与货币的这场变装游戏，并不是所有的价值最后都会被披上货币的外衣。固有的价值，在其他对象化的形式之中，也一样会展现出它自身的价值。
</p>
</blockquote>

<p>
我认为真正的“知识”就应该是开源的，它是人类历史文明延续的结晶，有着自身固有的价值，不是个人和个体的体量可以承载的。
</p>

<p>
<a href="https://www.thepaper.cn/newsDetail_forward_26530853">马斯克状告OpenAI，称自己被骗惨了，要求赔钱、开源</a>，看马斯克继续打怪。
</p>
</div>
</div>

<div id="outline-container-orgd02b5fb" class="outline-2">
<h2 id="orgd02b5fb">幸福</h2>
<div class="outline-text-2" id="text-orgd02b5fb">
<p>
<a href="https://1q43.blog/post/5322">幸福的积分 – 虹线</a>，这篇文章很长，我也没有读完，但很有价值。<a href="https://mp.weixin.qq.com/s/COs1bul0aCiMFAw4OT9q6Q">中国可能在经历一波“文艺复兴”</a>，九边最近也发了一篇。
</p>

<p>
这两篇都和幸福有关，感兴趣的可以看看。
</p>

<p>
这个话题太大，现在也没什么特别的想法，只觉得：假如说，人得到自己希求的东西就是幸福，那就言之成理。倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的。
</p>
<blockquote>
<p>
罗素在讨论伦理问题时曾经指出，人人都希求幸福。假如说，人得到自己希求的东西就是幸福，那就言之成理。倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的。谁也不是因为吃是幸福的才饿的呀。幸福的来源，就是不计苦乐、不计利弊、自然存在的需要，这种需要的种类、分量，都不是可以任意指定的。
</p>

<p>
—王小波《沉默的大多数》
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orgf59966c" class="outline-2">
<h2 id="orgf59966c">跬步与千里</h2>
<div class="outline-text-2" id="text-orgf59966c">
<blockquote>
<p>
说起来，这是我的问题。我活在一个巨大的错觉里。我曾经以为大家达成了很多基本共识，但并没有。我曾经以为很多常识性的观念只有历史价值，但也不是。就像王小波的杂文，我一度觉得写得很有趣，但是内容都是老生常谈而已。我这么想也并非没有理由。当时整个社会对王小波的杂文都是一边倒地赞赏，但并没引发太大的争论。四平八稳的常识能引发什么争论呢？
</p>

<p>
但是，现在如果再爆出《花拉子模信使问题》、《思维的乐趣》《积极的结论》这样的文章，就很可能引发争论，很多人就会不认可，甚至会骂。我猜想，以后有些年轻人再读王小波，甚至可能会受到思想上的震撼：原来还可以这样思考问题！
我并没有贬低人家的意思。这是没有办法的事情，我们就是要不断发现常识，不断重申一些简单得不能再简单的道理，不断将老生常谈谈了又谈。王小波常读常新，已经灌过一百次的醍醐随时准备灌第一百零一次。有人可能会觉得这是原地打转，但要想保持原地打转，都需要付出艰巨的努力。这个过程就是西西弗斯推石头一样。它考验的不是智力。这不需要太高的智力，它考验的是耐心和勇气。大家都觉得中国式父母唠叨，但他们再唠叨也唠叨不过咱们的常识输出者。他们必须不停地说，不停地说，把同样的道理用不同方式说了又说。可是他们真的不能停下来。
</p>

<p>
这让我想起《爱丽丝镜中奇缘》里，红皇后对爱丽丝说的一句话。她说：“在这个世界上，你必须不停地奔跑，才能保持在原地。”
</p>

<p>
来源：<a href="https://mp.weixin.qq.com/s/IMCnW_6sZPIZlsFwj_QF6g">关于莫言的争论，让我有种巨大的荒谬感</a>
</p>
</blockquote>

<p>
也是看到王小波这三个字才看完的，作者中肯的态度也挺喜欢，
</p>

<p>
“在这个世界上，你必须不停地奔跑，才能保持在原地。”这话，说的挺好。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> </div>]]></description>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Thinking]]></category>
  <link>https://www.vandee.art/blog/2024-03-03-a-Monkey-shaking-the-branch.html</link>
  <guid>https://www.vandee.art/blog/2024-03-03-a-Monkey-shaking-the-branch.html</guid>
  <pubDate>Sun, 03 Mar 2024 14:41:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[羊好可怜]]></title>
  <description><![CDATA[



<div id="outline-container-orgc36b96f" class="outline-2">
<h2 id="orgc36b96f">羊好可怜</h2>
<div class="outline-text-2" id="text-orgc36b96f">
<p>
最近爱上了家附近的一家羊肉粉，很还原贵阳的风味。羊肉片的薄厚适中，量也不多不少，粉快见底了，肉也差不多吃完，辣椒面更是香而不呛喉。这种凝结于劳动实践中的精确剂量，比任何公式都要准确，随手一抓每次我吃来都刚刚好。虽然这样同样我也是被“算计者”，却全然没有被大数据计算的那种厌烦感。
</p>

<p>
吃了差不多有两个月了，本来每次都吃的香香的，全身暖和，直到今天。
</p>

<p>
从地铁出来，走过两个红绿灯，直行500米之后，我和往常一样又点了一碗。正夹起一片羊肉，突然听到身后一个小女孩说：妈妈，妈妈，羊好可怜啊。妈妈没说话，然后是小女孩的重复。
</p>

<p>
我没有回过头去看他们是不是还是点了一碗，也没有听清女孩妈妈最后说的什么，也许是她还是没想好怎么解释，也许是对店员的一个点头，可能是直接走远了所以听不到，可能是我注意力还是在香香的羊肉上选择性过滤了。我可以确定的是，她一定说了话，而我在一瞬间思考的空白之后，吃的还是挺香。
</p>
</div>
</div>

<div id="outline-container-org92e5e8b" class="outline-2">
<h2 id="org92e5e8b">困扰</h2>
<div class="outline-text-2" id="text-org92e5e8b">
<p>
路上无数个关于善恶、佛教信仰、素食环保的问题相互纠结，后悔没仔细听听女孩妈妈是怎么回答的，这样我可能可以知道一个正确的答案或者排除一个错误的。不想清楚这个问题到不是很困扰我想以后小孩教育的事，最要紧的是这会直接影响我下一次吃粉的体验。我知道下一次我再吃的时候，一定又会再想这个问题。
</p>

<p>
困扰我的不是人应不应该吃羊的事；也不是是不是吃羊了就是大恶人，不吃就又日行了一善，少吃了一片就又积了一德。因为凭我现在的道行是一定回答不了的，所以干脆先丢到一边。
</p>

<p>
让我现在能困扰，又还能接着想想的是：我小时候究竟有没有问过这个问题（模糊的印象里我肯定说过）；为什么听到小女孩这个问题的时候，心里还是有犹豫。如果我是那个问题答案的任意一边，我都应该不会犹豫，我不知道我犹豫的是什么。我只想吃羊肉的时候还是香香的。
</p>

<p>
这让我突然想到超市猪肉包装上的卡通猪logo、电梯里最近的猪肉广告，是不是其实他们还是会心存愧疚，要不然为什么要把这个东西画的这么可爱，好像那个健康快乐的猪的形象可以让消费者联想到这个猪肉很健康，让我们从开始就觉得吃着这个健康快乐的卡通猪是一个也会让很快乐的事，就像电梯广告里卡通猪说的：我吃的健康，肉味更香（画面是一个微笑的大猪脸）。
</p>

<p>
小女孩的问题我可能会这样回答：我也这么认为，羊是真挺可怜的，你看替罪羔羊这个成语，羊也被用来祭祀和献祭。但《圣经》里也有说：“次日，约翰看见耶稣来到他那里，就说，看哪，神的羔羊，除去（或作背负）世人罪孽的。”（约翰福音1:29），同样也是基督教动物象征符号，象征耶稣及其追随者。
</p>

<p>
我知道，这次我又会是局外人了。因为，虽然下一次我还会再想这个问题，我也还是会吃的很香。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-局外人.html">局外人</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[局外人]]></category>
  <link>https://www.vandee.art/blog/2024-02-01-poor-sheep.html</link>
  <guid>https://www.vandee.art/blog/2024-02-01-poor-sheep.html</guid>
  <pubDate>Thu, 01 Feb 2024 14:52:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[胡萝卜和驴]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgbe9770b">宇宙探索编辑部</a></li>
<li><a href="#orgc47b457">胡萝卜和驴</a></li>
<li><a href="#org1324c73">壁垒</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgbe9770b" class="outline-2">
<h2 id="orgbe9770b">宇宙探索编辑部</h2>
<div class="outline-text-2" id="text-orgbe9770b">
<p>
很久之前就想看<a href="https://movie.douban.com/subject/34941536/">宇宙探索编辑部 (2021)</a>，郭帆监制，还出镜客串了一下。
</p>

<p>
电影的故事很简单，魔幻荒诞、有点黑色幽默，很是喜欢。剧情就不细说了：
</p>

<blockquote>
<p>
唐志军（杨皓宇 饰）是一家诞生于上世纪八十年代的科幻杂志——《宇宙探索》编辑部的主编。现如今的杂志社日渐式微，唐志军也终成落魄潦倒，鳏寡孤独之人。但他却依然几十年如一日的痴迷于寻找地外文明。终于有一天，他接收到了一个疑似来自宇宙深处的异常信号，于是他召集同是天涯沦落人的伙伴们，带着那一个困惑他终生的问题，再一次踏上寻找外星人的旅途。
</p>

<p>
<a href="https://www.bilibili.com/video/BV1cu4y1Z7Jx/">37天拍出年度最佳国产科幻电影！120分钟告诉你宇宙的终极答案！《宇宙探索编辑部》</a>
</p>
</blockquote>

<p>
在未来的我与过去的我这两条时间线里，我准时准点的看了这个电影。以第三人称视角来看，如不是这样，我就不存在了，我不可能在某个特定的时间既看了这部电影又没看，这是我区别与其他任何在发生的事情的不在场证明。
</p>

<p>
但诸如此类的许多如此确定的事，我们却往往无法证明：比如，台湾是中国的一部分，但现在就是处于既是又不是的状态。人们总爱说时间会证明一切，但它就像一个河边垂钓的老头，除了沉默的看着你，你也看着它之外，它证明不了任何，也没义务做其他事情。直到你也和它一样成了老头坐在河边，你又如何能让几十年之后的你，现在开口对你讲话。
</p>
</div>
</div>

<div id="outline-container-orgc47b457" class="outline-2">
<h2 id="orgc47b457">胡萝卜和驴</h2>
<div class="outline-text-2" id="text-orgc47b457">
<p>
电影里最荒诞的一幕，我认为也是叙事高潮的地方，就是唐志军居然真的顺着孙一通与外星人沟通的线索，碰到了村子不见的驴，骑了上去。不得不佩服编剧和导演的艺术表现能力，不夸张的说，电影里的这种故事我梦里做过的，要比它精彩的多，但我拍不出来，也写不好。最近正在研究一个新项目：墨菲斯·弗洛伊德·周公，通过文字描述和相关图片来生成动画视频，打通梦境与现实。
</p>


<figure id="org0e30020">
<img src="https://s2.loli.net/2024/01/27/XnfVJ5E3CNrdtwB.png" class="img" width="50%" height="50%">

</figure>

<p>
胡萝卜和驴这个隐喻很好理解，关键是：到底谁是胡萝卜，谁是驴。
</p>

<p>
对于一直在找外星人的唐志军来说，可能外星人就是胡萝卜。对于人类来说，形而上学、自由意志、甚至科学与未知，可能也是胡萝卜。
</p>

<p>
电影的最后，这次寻找外星人的旅途之后，唐志军也完成了自己内心对于女儿的死、自己科学与外星人执着的自我救赎，导演借唐志军的口说到：
</p>

<blockquote>
<p>
其实我们人类一直没有弄明白，宇宙是为什么而存在，我们人类又是为什么而存在的。
</p>

<p>
&#x2026;
</p>

<p>
这个答案不在外太空，不在宇宙深处，而在我们每一个人的身体里。原来我们每个人既是存在的谜题，也是这个谜题的答案。（就是DNA）
</p>

<p>
&#x2026;
</p>

<p>
总有一天，我们可以在这首宇宙之诗里，读懂我们存在的意义。
</p>
</blockquote>

<p>
一段从地球到太空、银河、星系的缩放，电影最后定格在一组DNA的图像，完。
</p>


<figure id="org04e9fb0">
<img src="https://s2.loli.net/2024/01/27/yOVdxNqnatRzfAg.png" class="img" width="50%" height="50%">

</figure>


<figure id="orgc3217a9">
<img src="https://s2.loli.net/2024/01/27/rtZOS27XyWiJUCw.png" class="img" width="50%" height="50%">

</figure>


<figure id="org10a40c6">
<img src="https://s2.loli.net/2024/01/27/UfQkK8jMs4gFLqm.png" class="img" width="50%" height="50%">

</figure>

<p>
在山洞里，唐志军问孙一通，外星人再和你联络的时候，你能不能帮我问一个问题：就是问他们知不知道人类存在的意义是什么。孙一通说：可以。但如果外星人也不知道呢，如果他们也对自己有同样的疑问，来地球就是想问我们这个问题呢。
</p>

<p>
顺着这个思路，就好理解编剧和导演在电影结尾想说的了：生命本身就是存在，就是意义本身。人类的基因在地球形成亿万年之后得以复制到今天，避开了所有可能毁灭人类的概率事件，人类的历史就是意义。刻在基因里的，传承、复制，夹带着从人类诞生开始的最原始的信息，并一直延续下去，这就是基因本来的目的，这就是生命。寻找人类（生命）存在的意义，可能就是那个胡萝卜，同样也是人类对美好的追求与希望、探求真理的好奇心（唐志军不止一次说到：有好奇心，是好事）。
</p>

<p>
我一直不习惯说的这么宏大和乐观：基因就是上帝在人间的使者，跟耶稣的职务挺像。它既是天使也是魔鬼。导演其实也说了：完成繁衍之后的所有的性欲，都是一种疾病。
</p>


<figure id="org2a9afaf">
<img src="https://s2.loli.net/2024/01/27/ruyODfnC7hWtvgT.png" class="img" width="50%" height="50%">

</figure>
</div>
</div>

<div id="outline-container-org1324c73" class="outline-2">
<h2 id="org1324c73">壁垒</h2>
<div class="outline-text-2" id="text-org1324c73">
<p>
唐志军这个人物在电影中，是一个连暖气片钱都快交不起的“失败者”，执着于寻找外星人，他说：当人类得知有外星人存在的时候，之前所有人与人之间的纷争、隔阂都会消失（一起对抗外星人文明），所以让人类文明进化的唯一方法，就是找到外星人。
</p>


<figure id="org2bb9a2f">
<img src="https://s2.loli.net/2024/01/27/orqm528LDWMxvAu.png" class="img" width="50%" height="50%">

</figure>

<p>
一本正经的“胡说八道”，讽刺拉满。
</p>

<p>
电影中无时不刻，唐志军都显得与外界格格不入。但其实他说的话和科学家没什么两样，做的事也没什么两样。也曾经成功过。
</p>

<p>
这种格格不入的“不正常”是一个壁垒，一个他本人要打破的自己的壁垒：用成功证明自己或是结尾对自己的救赎；但更大的壁垒是与外界的，知识与认知的壁垒；再就是理想与现实的壁垒、理论与实际的壁垒：完成繁衍之后的所有的性欲，都是一种疾病。这句话百分百正确，但没啥用。(只有人类会形成道德伦理的框架，并在此之上把理性的、规范化的基因复制体现的那么美好。)
这种戏剧冲突与隐性的矛盾带来了极大的喜剧张力。这种黑色幽默，电影诠释的太好了，余味拉满。
</p>

<p>
现实里，这个壁垒就不那么好打破了，特别是知识与认知的壁垒。就算爱因斯坦亲自跟我讲相对论，我也听不懂，也无法很快相信。但如果爱因斯坦告诉我，经过我相对论的计算，现在这个链接拼夕夕砍一刀，可以立省9.9！我打开链接的可能性高达70%，尽管相对论和拼夕夕能砍多少好像没啥关系。世界需要爱因斯坦这样的科学家，也同样需要秦始皇、马斯克、乔布斯这样的“暴君”与“演说家”。
</p>

<p>
乔布斯的一句名言放在这里再合适不过了：iPhone出现之前，他们根本不知道自己想要什么！
</p>

<blockquote>
<p>
It’s really hard to design products by focus groups. A lot of times, people don’t know what they want until you show it to them.
</p>

<p>
根据受众需要去设计产品其实是非常难的。因为很多情况下，人们并不知道自己想要的是什么，而是需要你去展示给他们看。
</p>

<p>
People don’t know what they want.
</p>

<p>
顾客不知道自己想要什么。
</p>

<p>
— 乔布斯
</p>
</blockquote>

<p>
科学家发现、研究、揭示胡萝卜的本质，演说家包装胡萝卜的表象。奥本海默好像把这两个事都做了，基因也一直把这两个事都做了。
</p>

<p>
面前的那个胡萝卜，和多巴胺很像。有时候甚至不想让自己取下那个胡萝卜。（总是拿多巴胺当我的反面例子其实挺抹黑它的）更多时候，是压根不会知道那个胡萝卜是啥，在不在面前。
</p>

<p>
真正的替罪羊，我为自己找好了：如前面所说，这都要算在基因的头上。
</p>

<p>
剩下的就是：一直热爱我的热爱。它真是个胡萝卜也没办法，毕竟基因使者说了算。
</p>

<blockquote>
<p>
杨绛曾在回复一个青年的信中写道：你的问题主要在于读书不多而想得太多。事实确实如此，但另一个摆在我们面前的问题是，在我们自认为比一般人读了更多的书之后，我们会认为比他们感受到的痛苦也更多了一点。如何解释这一点呢？当我们觉得无知的欢乐胜过知识的累积时，我们如何正视自己以及自己所读的书呢？勒内·夏尔或许能给我们一些参考： <b>“理解得越多就越痛苦，知道得越多就越撕裂。但他有着同痛苦相对称的清澈，与绝望相均衡的坚韧。”</b>
</p>

<p>
来源： <a href="https://wangyurui.com/posts/liao-liao-2023-97971439">聊聊2023：感知 · 理知 · 认知 - 太隐</a>
</p>
</blockquote>

<blockquote>
<p>
一个不成熟的理想主义者会为理想悲壮地死去，而一个成熟的理想主义者则愿意为了理想苟且偷生。
</p>

<p>
—《麦田的守望者》
</p>

<p>
虽然很有道理，但是我现在还不想同意。
</p>

<p>
<a href="https://www.bilibili.com/video/BV1zc411D7gR/?share_source=copy_web&amp;vd_source=398bcc3ab9d37761117414d4da6caebe&amp;t=523">为什么越看他，越觉得今天的演员没文化 - 王志文 08:43</a> 他的真诚再外界看来倒成了一种固执。
</p>
</blockquote>

<blockquote>
<p>
我爬炉筒时， 大概是九岁到十一二岁。 到了四十岁上，我发现后来我干任何事情都没有了那股百折不挠的决心 ；而且我后来干的任何事都不像那件那样愚不可及。爬炉筒子没有一点好处， 只能带来刻骨铭心的痛苦， 但我还是要爬。这大概是说明你干的事越傻，决心就会越大吧。这也说明我喜欢自己愚弄自己，却不喜欢被别人愚弄。
</p>

<p>
— 王小波《黄金时代》
</p>
</blockquote>

<blockquote>
<p>
“I see a lot of people with talent but the one thing they don’t have is that just love of doing it for the sake of it.”  — Rodney Mullen
</p>

<p>
"我看到很多人都很有天赋，但有一点他们没有，那就是他们只是为了热爱而热爱"。 — 罗德尼·马伦
</p>
</blockquote>

<blockquote>
<p>
他有人生最可宝贵的一个德性：一种永久新鲜的好奇心，不会给时间冲淡而是与日俱增的。他没有相当的才具来利用这天赋，但多少有才具的人会羡慕他这种天赋！大半的人在二十岁或三十岁上就死了：一过这个年龄，他们只变了自己的影子；以后的生命不过是用来模仿自己，把以前真正有人味儿的时代所说的，所做的，所想的，所喜欢的，一天天的重复，而且重复的方式越来越机械，越来越脱腔走板。
</p>

<p>
—《约翰·克里斯多朵夫》
</p>
</blockquote>

<p>
看到和菜头的这篇：<a href="https://mp.weixin.qq.com/s/QhnB74vohiqVcXJG-NI27g">驴前萝卜</a> ,想起来之前也写过类似的，加上。之前图床的图片也失效了。 &#x2013;2025-05-05
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Thinking]]></category>
  <link>https://www.vandee.art/blog/2024-01-27-carrot-and-donkey.html</link>
  <guid>https://www.vandee.art/blog/2024-01-27-carrot-and-donkey.html</guid>
  <pubDate>Sat, 27 Jan 2024 14:35:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Learn All The Time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9fb1daa">尝试维持两种相反的想法</a>
<ul>
<li><a href="#org61a891c">太极张三丰</a></li>
<li><a href="#org1e77950">从事物之间的联系出发</a></li>
</ul>
</li>
<li><a href="#org7c58e42">认知盈余</a></li>
<li><a href="#org837433f">Learn，learn，and learn</a></li>
<li><a href="#org2962c55">Reference</a></li>
</ul>
</div>
</nav>




<div id="outline-container-org9fb1daa" class="outline-2">
<h2 id="org9fb1daa">尝试维持两种相反的想法</h2>
<div class="outline-text-2" id="text-org9fb1daa">
<p>
作家<a href="https://en.wikipedia.org/wiki/F._Scott_Fitzgerald">F·斯科特·菲茨杰拉德</a>（F. Scott Fitzgerald,小说《了不起的盖茨比》作者）谈什么是聪明的头脑：
</p>
<blockquote>
<p>
"The test of a first-rate intellect is the ability to hold two opposing ideas in your head at the same time, and still retain the ability to function."
</p>

<p>
“对一流智力的考验是能够同时在脑海中持有两个相反的想法，并且仍然保持运作的能力。”
</p>

<p>
Source: <a href="https://click.convertkit-mail4.com/k0u7xn6xqnf6hdz6pdeu9h8w8p577/vqh3hrhpn63plxug/aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9DcmFjay1VcC1GLVNjb3R0LUZpdHpnZXJhbGQvZHAvMDgxMTIxODIwMQ==">The Crack-Up</a>
</p>
</blockquote>

<p>
如同<a href="https://zh.wikipedia.org/wiki/%E4%BC%8F%E7%88%BE%E6%B3%B0">伏尔泰</a>可能所说：我并不同意你的观点，但是我誓死捍卫你说话的权利。虽然<a href="https://www.douban.com/note/616832515/?_i=1838282i5YSKNh">不是伏尔泰原话</a>但不妨碍引用，借谁的口无妨。一位伟大的农夫和伟大的哲学家没有区别。
</p>
</div>

<div id="outline-container-org61a891c" class="outline-3">
<h3 id="org61a891c">太极张三丰</h3>
<div class="outline-text-3" id="text-org61a891c">
<p>
这既是一种包容的人生态度，更是让思维保持活跃和客观的修行的一种实际方法。这当然不是说，要精神分裂，每时每刻都和相反的想法做斗争，而是共存。**让事物的本质从不同角度，同时呈现在思维当中，这绝对可以说是一种修行**。就像张三丰悟出的太极，它无形又包容万千变化，这是自我与万物的变化保持的微妙平衡，是自我与外界对话，信息交换的微妙平衡。这真是人类与自然最完美的关系的一种了。
</p>

<p>
在最近看完的卡洛·罗韦利 <a href="https://book.douban.com/subject/33424487/">时间的秩序</a> 一书中，按照圈量子理论他提出了一个观点：世界由事件而非物体构成，“物体”本身仅仅是暂时没有变化的事件，是事件表现的形式。
</p>

<blockquote>
<p>
很久以来，我们都试图从基本物质的角度来理解世界，物理学也许比任何其他学科都更需要追寻这种基本物质。但我们研究得越多，越难以从“存在的东西”这个角度去理解世界，而从事件之间的关系来理解世界却容易得多。
</p>

<p>
“我们可以把世界看作由物体、物质、实体这一类东西构成。或者我 们可以把它看作由事件、发生、过程、出现组成。它不能持久，会不断 转化，无法在时间中永恒。基础物理学中，时间概念的毁灭导致了以上 两种观点中前者的崩塌，而非后者。 <b>这是一种领悟，认识到无常的普遍性，而不是一切在静止的时间里停滞</b> 。通过把世界看作事件、过程的集合，我们得以更好地理解与描述世 界。这是与相对论兼容的唯一方式。世界并不是物体的集合，而是事件 的集合。 <b>物体与事件的区别在于，物体在时间中持续存在，而事件的持续时间有限</b> 。石头是典型的“物体”，我们可以问它明天在哪里。与此相反， 亲吻是一个“事件”，问这个吻明天在哪儿是没有意义的。世界由亲吻的 网络构成，而非石头。
</p>

<p>
因此，我们按照出现的方式而非存在的方式来描述世界。牛顿力 学、麦克斯韦方程组、量子力学等，都告诉我们事件怎样发生，而非事 物是什么样的。通过研究生物的演化与生存，我们理解了生物学。通过 研究人与人交往、思考的方式，我们才理解心理学（只有一点点，并不 多）&#x2026;&#x2026; <b>通过形成过程而非存在，我们理解世界</b> 。“物体”本身仅仅是暂时没有变化的事件。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a> -卡洛·罗韦利
</p>
</blockquote>


<p>
他同样写到：
</p>
<blockquote>
<p>
我认为不需要比这理解得更多了。我们可以问更多问题，但我们要 小心那些无法被准确表述的问题。**当我们发现了时间能被谈论的所有方面，我们就发现了时间。**我们也许表达不出对时间的直接感知，但还是 对它笨拙地示意（好吧，但它为何会“流逝”呢？），但我相信，我们现 在只是在把事情搞混，执意要把近似的语言转化为事物。当我们无法精 准地表述问题时，通常不是由于这个问题十分深奥，而是因为这是一个 假问题。
</p>
</blockquote>

<p>
还是拿张三丰的太极来说。可能在太极被“创造”出来之前，其实太极这种形式就已经存在了。要回答“太极”这个语言概念什么，按照一直以来哲学的思维方式是这样：从现象出发，提出问题，探究本质，归纳总结真理。
</p>

<p>
但就像时间这种概念一样，这个概念是人类思维、体验提出的，我们把这个未知的概念用”时间“来指代，但其实很可能时间从来就不是一个可以具体描述的概念，可以说是我们自己给了自己一个无法回答的问题，人类思维的一个很大的限制就是：我们一贯用已知的东西来描述未知，来获得一种确定性，可描述性，因为我们要开口说话，我们要和物质进行信息交换，这一切的源头就是这个、那个，this、that。因此我们想描述昨天发生的一个事的时候，我们自动在思维中想出一个概念去表达，没有语言的时候我们用肢体、图案 <b>。所以我们自动得出一个“时间”的概念，这个概念很大程度来源于我们大脑结构对于记忆的处理，我们的记忆中存在这种对发生过的事情留下的痕迹</b> ，于是我们说昨天发生了什么，刚刚发生了什么。
</p>
</div>
</div>

<div id="outline-container-org1e77950" class="outline-3">
<h3 id="org1e77950">从事物之间的联系出发</h3>
<div class="outline-text-3" id="text-org1e77950">
<p>
扯远了一点，回到开头说的太极的修行。
</p>

<p>
在探求一个未知的概念的过程中，我们往往不可避免的被问题本身所限制了。因为仿佛要获得打开一扇门的钥匙就必须先看看这个钥匙孔张什么样。但这个未知问题很可能本身就没有可以被人类现有思维理解的表现形式，它也从来不是一扇门，也就没钥匙和钥匙孔这一说了，正如同刚刚说到的时间这个概念。因此，从事物之间的联系出发，是一个非常有效的思维方式。
</p>

<p>
举个书中的苹果酒的例子：
</p>

<blockquote>
<p>
如果宇宙的一个子集在这种意义上很特殊，那么对这个子集而言， 宇宙的熵在过去就很低，热力学第二定律就成立；记忆会存在，痕迹会 留下，也会有进化、生命与思想。
</p>

<p>
换句话说，如果宇宙中有这样的东西——对我来说肯定会有——那 么我们就刚好属于它。此处，“我们”指的是我们经常接触并且用来描述 世界的物理量的集合。因此，也许，时间的流动不是宇宙的特征，就像 天空的旋转，来自我们在自己角落中的独特视角。
</p>

<p>
但为什么我们会属于这些特殊的系统呢？苹果长在喝苹果酒的北 欧，葡萄长在喝葡萄酒的南方，和这个是同样的原因。或是在我出生的 地方，人们居然刚好说的是我的母语；或是温暖我们的太阳与我们的距 离刚好合适——不近也不远。**这些例子里，“奇特”的巧合都源于把因果 关系搞反了：不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。这样说的话，就没什么奇怪的了**。
</p>

<p>
在进化的历程中，面对我们无法直接感知的事物（“我不懂为什么 我这样忧郁。”安东尼奥在《威尼斯商人》一开头咕哝道），**大脑的庞大机制已经经过设计，以便对可能的未来做出计算。这就是我们所说 的“决定”。**因为大脑可以根据现在详细描述出未来可能的样子（除了细节稍有出入），这样我们就会自然倾向于按照“原因”先于“结果”的逻辑 来思考：过去的事件是未来事件的原因，如果没有这个原因，未来的事 件就不会以完全相同的样子出现在我们的世界里。”
</p>

<p>
在我们的经验里，原因的概念在时间中是不对称的，原因先于结 果。当我们发现两个事件“具有相同的原因”时，我们发现这个共同原因 [25]在过去，而非未来。如果一场海啸的两股波浪同时到达邻近的岛屿， 我们会认为在过去有一个事件引起了这两股波浪，我们不会去未来寻 找。但那不是因为有一种从过去到未来的神奇的“因果”力量，而是因为 两个事件之间关联的不可能性需要一些不可能之事，而只有过去的低熵 才能提供这种不可能性。不然还有什么能提供这种不可能性呢？换句话 说，那些存在于过去的原因只不过是过去低熵的显现。在热平衡态，或 是在纯粹的力学系统中，由因果关系确定的时间方向并不存在。
</p>
</blockquote>

<p>
因为我们大脑神经结构的限制，我们的记忆习惯于把已经发生过的事情归纳为原因，把思维加工过的记忆、逻辑思考的结果称作那个原因的结果。但其实，不是苹果长在了喝苹果酒的地方，而是在有苹果的地方， 人们才喝苹果酒。从事物之间的联系出发才是关键，也就是事件。如果把每一个孤立的物体都看作一个发生的事件，这些事件共同支起一个网络，每一个物体不是静止不动的孤立的个体，树在那里的高楼也一样在随着地球旋转，它们每时每刻都在与外界的一切信息发生着交换，影响着每一个其他物体未来要发生的事件的概率。通过形成过程而非存在，我们理解世界。“物体”本身仅仅是暂时没有变化的事件。就如同一个智者所说，没有绝对的沉默。
</p>

<p>
每一种学科、理论，经济学、哲学、物理学、化学、生物学，都是对于这些事物之间的联系—也就是各种事件的不同视角。我们不应该孤立的去看待这些问题，思考这些现象。因为每时每刻，我们都必然位于一个绝对的环境内部，**不识庐山真面目，只缘身在此山中。**我们现在被限制在太阳系这个物理环境中，当然看不到太阳系之外的视角。因此，需要同时保持内部环境的思维和外部环境的思维，对于环境内部和外部的事情，思维的方式就应该是不同的，用内部现象的结论去看待外部现象，必然会出现矛盾。两种不同的体系，当然不存在统一的真理，这并不是说完全否定存在着不同系统中统一的东西。
</p>

<p>
到这里，我好像终于把要说的说清楚了。总结一下：
</p>

<ul class="org-ul">
<li>我想说的尝试维持两种相反的想法，第一个层面就是针对外部环境与内部环境而言。</li>

<li>第二个层面，如果可以的话，我甚至愿意把两种扩展到X种。具体到实际的问题的时候，比如今天看到的一个讲拿破仑的文章 <a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a>。孤立的看这个问题，只会得到片面的结论，也不存在一个完美视角能覆盖到一个事物的全貌。保持自己的视角、态度，才是更应该着手事情。</li>
</ul>

<p>
如此多的视角和想法，如何找到自己的，这也就是我想说的太极与修行了。
</p>

<p>
对于 <a href="https://vandeefeng.github.io/posts/2022-08-07-undefined/">读万卷书还是行万里路</a>  这个我一直会思考下去的问题，重要的不是答案，而是过程，每一个在这个问题上的选择，就是我对这个问题的答案了。也没必要给自己徒增矛盾与烦恼，因为它本身就是矛盾，或者说它就是矛盾本身。（这并不是在辩证，因为它们本来就区别很大。）
</p>

<blockquote>
<ul class="org-ul">
<li><p>
从来就存在着两条路，一条路是向外探索，探索物质世界，从原子结构到股票涨落，从中研究控制现实世界的方法。一条路是向内探索，探索心灵世界，探究“我”的构成，“我”的特性，“我”的能力，建构起对自己的认知。遗憾的是，在前一条路上人山人海，在后一条路上却行者寥寥，而前一条路上遇见的诸多难解的问题，往往在后一条道路上才能找到答案。
</p>

<p>
来源： <a href="https://mp.weixin.qq.com/s?__biz=MjM5MjAzODU2MA%3D%3D&amp;chksm=bd46be028a313714a282554c31cb967d3a9710eddcb0fe9ca826ae044e4d788231a38cc1519e&amp;idx=1&amp;mid=2652796365&amp;sn=39b4d46467b7df6472ae469d2f6cffbe">和自己相处</a>
</p></li>
<li><p>
我们每个人都曾经有这样经历：多年之后，才明白当年的某个人说的某句话原来是这个意思。我们的头脑就像一个斜坡。当我们没有任何阅历与经验时，那个斜坡的表面是光滑的。而我们在书本上读到的，在书斋里听到的，在前辈那里似懂非懂学来的东西，就像是从斜坡上方流下来的水。光滑的斜坡留不住任何水。读书一箩筐竟似什么都记不住。而我们的每一次刻骨铭心的经历，都像是一把把锤子，将这个光滑的斜坡砸出一个个大大小小的坑。
</p>

<p>
来源： <a href="https://shixingcuowu.zhubai.love/posts/2320790958667300864?push_source_id=2314749384392835072&amp;push_source_type=email">🥫阅读碎片罐头（202309月刊） 试行错误竹白</a>
</p></li>
<li><p>
不知来，视诸往 。其实当我们读了很多的历史的时候，我们或许可以明白《徐霞客游记》中那句：“初四日，兀坐听雪溜竟日。”为何意，而《德道经》的“执今之道，以御今之有”的“道”意的真正含义或许就暗合于此吧。那一天，山下的你我，正奔忙着追逐“虚幻”，但徐霞客却坐在黄山绝顶，细声闻簌簌，远势望濛濛，不知过了多久，起身，抖掉蓑衣残雪，朝着光的方向，继续行走在路上。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/dai-bei-bai-tou-weng-f08b8fdf">行走在路上 - 太隐</a>
</p></li>
<li><p>
去的地方越多，你就觉得去的地方太少，看的风景越多，就觉得还有太多的风景没有看过。苏格拉底：我只知道一件事，就是我一无所知。似乎有的尽头就是无，宇宙也好像就是这样。时间的箭头，总是只会指向一个方向，阴晴圆缺，周而复始，易得易失。
</p>

<p>
来源：<a href="https://vandeefeng.github.io/posts/2023-06-02-undefined/">渴望着下一段旅行 梵低's Blog</a>
</p></li>
</ul>
</blockquote>
</div>
</div>
</div>


<div id="outline-container-org7c58e42" class="outline-2">
<h2 id="org7c58e42">认知盈余</h2>
<div class="outline-text-2" id="text-org7c58e42">
<p>
在<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>这篇推送里，看到了“认知盈余”这个概念，挺有意思。
</p>

<blockquote>
<p>
Clay Shirky （克莱·舍基）是一位美国作家、顾问和教师，他主要研究互联网技术对社会和经济的影响。他在纽约大学的互动电信项目（ITP）担任客座讲师，教授新媒体课程。Shirky还是一位 TED 演讲者，他在演讲中探讨了现代世界的变革与媒体的演变，以及这些变化对社会和政治的深远影响。TED链接：<a href="https://www.ted.com/speakers/clay_shirky">Clay Shirky  Speaker  TED</a>
</p>

<p>
Shirky的代表著作有《认知盈余》（Cognitive Surplus）、《未来是湿的》（Here Comes Everybody）等，这些书籍分析了互联网现象，并探讨了这些现象对未来的影响。
</p>

<p>
认知盈余指的是就是**受过教育，并拥有自由支配时间的人，他们有丰富的知识背景，同时有强烈的分享欲望，这些人的时间汇聚在一起，产生巨大的社会效应。**比如Meta、X以及维基百科的成功，都是“认知盈余”的功劳。在中国，微博、小红书、知乎的兴起，同样有赖于它。**参与分享的网民数量越来越多，力量越来越强大，互联网产业也随之迎来“核聚变”，原来我们所熟知的商业模式，随时可能成为泡影。**
人类是社会性动物，但自由时间的激增和某种社会资产的稳步减少趋于一致，这种社会资产便是人与人之间的信任与依靠。
</p>

<p>
自己创造的事物就算很普通，和消费别人创造的质量上乘的事物相比，它仍然有一种与众不同的吸引力。并不是我们的工具塑造了我们的行为，但是工具赋予了我们行为发生的可能。
要从一个工具中创造出最大的价值，靠的并不是总体规划或者跨越式发展，而是连续不断的尝试与错误。对于任何一个社会来说，在这样一种转变中要面对的关键问题是，如何充分利用这个过程。
</p>

<p>
来源：<a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a>
</p>
</blockquote>

<p>
第一时间想到的就是在看马克思《资本论》的时候想回答的什么是真正的价值，这个问题。
</p>

<p>
一直以来，我都抱有一个想法：
</p>

<p>
如同水的价值一样，它的价值不因为它一定生成、产出什么而存在，而是因为它固有的性质。知识也是一样，它有着自身固有的永恒的价值。
</p>

<p>
在之前的<a href="https://vandeefeng.github.io/posts/2023-11-20-Get-rich-slow/">富有的概率</a>里，我想到：
</p>
<blockquote>
<p>
富有从来不是真正富有的人本来的目的，它是伴随的一个概率。该有的都有了的时候，你想不富有其实也挺难的，名利会追逐你，甩都甩不掉，甚至反过来吞噬你。当所有的导向富有的概率事件都发生了的时候，最后那一点别人没有的” 运气 “，才是 fortune 真正到来的时候。当然这个运气，也可以说成是你的实力、命运，或者缺少这个运气的人的抱怨和忌妒。
</p>

<p>
提升自己就是最大的人生储蓄，最大的财富。当然富有了之后，它是真理，富有之前，它是一坨 shit。
</p>
</blockquote>

<p>
认知盈余这个概念扩展了这个想法。
</p>

<p>
在1844手稿中，马克思就提出 <b>人的本质就是自由而自觉的活动</b> ，我们的生产、劳动在当今资本化的社会运作中，剩余价值被剥削，这些自由而自觉的活动产生不了它原本应该对应的社会价值与个人价值，它们被抽象成一般的无差别的人类劳动，进而劳动和劳动品的价值和使用价值发生变化。我们的个人价值在现在的社会交换中，大部分只能存在与商品之中了。在价值和价格、货币、资本的转化过程中，现在的经济运行法则必然会导致财富向少数人流动。
</p>

<p>
马克思还说到，就算没有货币这种体现价值交换的形式出现，也必然会导致相似的社会运行规律。我们的自由而自觉的活动就算没有被抽象化成商品，也得对象化到其他形式之中，人类是社会性动物，交换是绝对而且必须的。
</p>

<p>
因此知识的交换，互联网信息的共享，认知盈余这种价值的形成是一定的。
</p>

<p>
我相信那些固有价值一直都是还是存在的。也就是马克思所说的劳动、劳动品价值或者商品的使用价值。 <b>它们不应该在现在习以为常的资本和货币华丽耀眼的盛装舞蹈中被渐渐淡忘</b> 。知识和认知更是这样。并不是所有价值都能在货币里的得到应有的体现，也并不是所有价值都能够或应该参与货币的这场变装游戏，并不是所有的价值最后都会被披上货币的外衣。固有的价值，在其他对象化的形式之中，也一样会展现出它自身的价值。
</p>

<p>
艺术发展到现在，一个个天价拍卖，买的人都是人傻钱多？为什么一个只能挂墙上的东西指这么多钱？当然不是，这就是它固有价值的表现方式之一。就如同货币本身的职能一样，价值的体现。天价的艺术品，在今天是天价，可能一晚上之后，就是废品。但它固有的价值并没有变化，变化的是它的表现形式。
</p>

<p>
所以，那句废话还是得说：知识就是财富。
</p>

<p>
但前提是，知识的价值形式可以转化。
</p>

<blockquote>
<p>
As one resource becomes abundant, other resources become bottlenecks. When wealth and power become abundant, anything wealth and power cannot buy become bottlenecks - including knowledge and expertise.
</p>

<p>
当一种资源变得丰富时，其他资源就会成为瓶颈。当财富和权力变得丰富时，任何财富和权力买不到的东西都会成为瓶颈——包括知识和专业知识。
</p>

<p>
After a certain point, wealth and power cease to be the taut  constraints on one’s action space. They just don’t matter that much.  Sure, giant yachts are great for social status, and our lizard-brains  love politics. The modern economy is happy to provide outlets for  disposing of large amounts of wealth and power. But personally, I don’t  care that much about giant yachts. I want a cure for aging. I want  weekend trips to the moon. I want flying cars and an indestructible body and tiny genetically-engineered dragons. Money and power can’t  efficiently buy that; the bottleneck is knowledge.
</p>

<p>
到了一定程度之后，财富和权力就不再是对一个人行动空间的严格限制。他们只是没那么重要。当然，巨型游艇非常有利于社会地位，而我们的蜥蜴脑热爱政治。现代经济很乐意为处置大量财富和权力提供渠道。但就我个人而言，我不太关心巨型游艇。我想要治愈衰老的方法。我想要周末去月球旅行。我想要飞行汽车、坚不可摧的身体和基因工程的小龙。金钱和权力无法有效地买到这一点；瓶颈是知识。
</p>

<p>
<a href="https://wiki.vandee.art/#%E5%BD%93%E9%87%91%E9%92%B1%E5%85%85%E8%A3%95%E6%97%B6%EF%BC%8C%E7%9F%A5%E8%AF%86%E6%89%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%B4%A2%E5%AF%8C%20%E2%80%94%20LessWrong">当金钱充裕时，知识才是真正的财富 — LessWrong - Vandee Wiki</a>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org837433f" class="outline-2">
<h2 id="org837433f">Learn，learn，and learn</h2>
<div class="outline-text-2" id="text-org837433f">
<p>
最近都在说查理·芒格的格言和它的故事。与其说芒格爱读书，不如说是爱学习和思考。
</p>

<p>
我只想记住下面这一条，因为芒格的格言都是“废话”。芒格自己也说过：钓鱼的两个原则：一是在有鱼的地方钓鱼，二是不要忘记第一条原则。
</p>
<blockquote>
<p>
"I think a life properly lived is just learn, learn, learn all the time."
</p>

<p>
正确的过完这一生，就是不断学习、学习、学习。
</p>
</blockquote>

<p>
万物之始，大道至简，衍化至繁。这自然也是一句“废话”。
</p>

<p>
和开头我想说的一样，这些话谁说出来都一样。因为，知识，Knowledge、智慧，philosophia有它固有的价值。它不因为它是“农夫”而褪色，也不因为它是“芒格”而耀眼。它就是知识与智慧本身。
</p>

<p>
<a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a>，最近<a href="https://www.notboring.co/p/openai-and-grand-strategy">奥尔特曼被罢免</a>的事情，让<a href="https://zh.wikipedia.org/zh-cn/%E6%9C%89%E6%95%88%E5%88%A9%E4%BB%96%E4%B8%BB%E7%BE%A9">有效利他主义 - 维基百科</a>这个词又频繁出现，过多的争论的这些各方观点，没什么意义。没有孤立的物体，有的是互相联系的事件。即使这些事情都没有发生，也会有另一个OpenAI，另一个Chatgpt，另一个山姆·奥尔特曼。因为按照我们人类对于历史的总结：历史总是惊人的相似。
</p>

<p>
现在我其实越来越倾向于奥尔特曼和马斯克，虽然他们的想法好像是相反的。量子力学的出现质疑了牛顿经典力学的“决定论”体系（注：这里的“决定”指的是相对于概率模糊性的可计算的确定性），而越来越多的物理学家和哲学家倾向于自由意志是不存在的（注：量子力学并不完全否定自由意志，这里的自由意志概念不同于法律、心理学中的自由意志）。
</p>

<p>
就如同基因最本来的目的一样—自私的无限复制自己，也如同宇宙本来的目的一样—从低熵到高熵的状态，熵增加。我们无法阻止未来“既定”的事情，因为并没有过多的原因去导向这个结果。
</p>
<blockquote>
<p>
热振动就像在不停地洗一副牌：如果牌是按顺序排列的，洗牌的过 程就会把顺序打乱。这样，通过洗牌——借助万物自发的无序化，热量 就从高温物体传向了低温物体，而非反之。熵的增加只不过是普遍又常见的无序的自然增长。 这就是玻尔兹曼领悟到的内容。过去与未来的区别不在运动的基本 规律里，也不在自然的深层法则中。是自然的无序化导致了越来越非特 定、不特殊的情形。
</p>

<p>
如此看来，只有当我把目光聚焦于牌的特定方面时（在这个例子中 是颜色），“某些排列比另一些更特殊”的概念才有意义**（比如二十六张 红色的牌，然后是二十六张黑色的牌）。如果我们从各个方面对牌进行 区分，那所有排列就都是等价的：没有哪个比其他的更特殊。[11]只有当 我们以一种模糊与近似的方式看待宇宙的时候，“特殊性”的概念才会出现。玻尔兹曼说明了熵之所以会存在，是因为我们以一种模糊的方式描述世界。他证明了熵就是我们模糊的视野无法区分的不同排列的数量。 热量、熵、过去的低熵都是近似地、统计性地对自然进行描述的概念。
</p>

<p>
来源：<a href="https://book.douban.com/subject/33424487/">时间的秩序</a>
</p>
</blockquote>

<p>
我们现在自以为的秩序，可能真只是一个随机洗牌的结果，我们在这个巧合中，认为我们是特殊的。我们因为在寻求逻辑自洽，寻求一个确定性的答案，归纳总结出这些符合我们大脑逻辑规律的真理。就像恐龙爸爸怎么也想不到有一天自己突然就没了，人类突然某一天就从猩猩进化了，并没有一定的原因和结果。
</p>

<p>
AI就是一个随机洗牌的特定结果，我们在这个洗牌中，没必要一直争论这些原因和结果。崇尚革命的激进派像宗教一样的布道，保守派一味的设定限制和强调伦理，这些唾沫贩卖了太多的焦虑，让吃瓜的我们在<a href="https://en.wikipedia.org/wiki/Overton_window">Overton window 奥弗顿之窗</a>之中一并贩卖了自己的注意力。
</p>

<blockquote>
<ul class="org-ul">
<li><p>
There’s this concept called the Overton Window: the range of policies or ideas that are politically acceptable at any given time.
</p>

<p>
有一个概念叫做“奥弗顿之窗”（Overton Window）：在任何特定时间在政治上可以接受的一系列政策或想法。
</p></li>
<li><p>
Since Joseph Overton came up with the idea in the mid-1990s, the concept has expanded beyond government policy. Now, it’s used to describe how ideas enter the mainstream conversation where they influence public opinion, societal norms, and institutional practices.
</p>

<p>
自从约瑟夫·奥弗顿（Joseph Overton）在1990年代中期提出这个想法以来，这个概念已经扩展到政府政策之外。现在，它被用来描述思想如何进入主流对话，影响公众舆论、社会规范和制度实践。
</p></li>
<li><p>
The Overton Window is the knot in the narrative tug-of-war. The teams pulling on either side don’t actually expect that everyone will agree with and adopt their ideas; they just need to pull hard enough that the Overton Window shifts in their direction.
</p>

<p>
奥弗顿之窗是叙事拉锯战中的结。任何一方的团队实际上并不期望每个人都会同意并采纳他们的想法;他们只需要用力拉，让奥弗顿窗朝他们的方向移动。
</p>

<p>
来源：<a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a>
</p></li>
</ul>
</blockquote>

<p>
就像<a href="https://movie.douban.com/subject/3025375/">奇异博士一</a>，Doctor Strange最后看了无数种结局也没有逆转的答案。最后自己进入那个结局，进入那个无限失败的结局的循环，结果拯救了世界。如果结局注定就是没有自由意志，这很重要么？就随它去吧。这正是我们一直在选择的自由。
</p>

<p>
一切，自有答案。Just learn, learn, learn all the time。
</p>

<p>
和这句话一样，其实今天写的都是“废话”。文章的标题更是“废话”到我自己都不会怎么点开，
</p>

<p>
但也许这才是《穷查理宝典》，查理·芒格真正牛逼的地方，他一生都在学习，一生都真正的践行了他的这些“废话”而不是和他们插肩而过，一直坚持的做到了许多人坚持不到的程度，以至于当他顺理成章随口说出这些的时候，那么的让许多人“不以为然”。
</p>
</div>
</div>

<div id="outline-container-org2962c55" class="outline-2">
<h2 id="org2962c55">Reference</h2>
<div class="outline-text-2" id="text-org2962c55">
<ul class="org-ul">
<li><a href="https://book.douban.com/subject/33424487/">时间的秩序</a></li>
<li><a href="https://wangyurui.com/posts/leng-jing-tong-xun-no-103-clay-shirky-a45f1c03">棱镜通讯 No . 103 Clay Shirky - 太隐</a></li>
<li><a href="https://mp.weixin.qq.com/s/v4unWA44QY4kmjXp_dXfPg">超级对齐vs有效加速：OpenAI高层大混战</a></li>
<li><a href="https://www.notboring.co/p/openai-and-grand-strategy">OpenAI &amp; Grand Strategy-notboring.co</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzk0NTg3Nw%3D%3D&amp;chksm=9bdc92b5acab1ba3f4c79a6b8649dc4ce5c5ba6ad19d38de07ee05a875cea828fe64fcc6fe17&amp;idx=1&amp;mid=2247489231&amp;sn=9a5d8d7f50c66b559adde8ecf0121ae0">只要人们还崇拜征服者，世界就永远会有灾难和不幸</a></li>
<li><a href="https://www.notboring.co/p/narrative-tug-of-war">Narrative Tug-of-War - Not Boring by Packy McCormick</a></li>
</ul>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://www.vandee.art/blog/2023-12-06-learn-all-the-time.html</link>
  <guid>https://www.vandee.art/blog/2023-12-06-learn-all-the-time.html</guid>
  <pubDate>Wed, 06 Dec 2023 21:33:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[都是因为无聊]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org43b6bb9">都是因为无聊</a></li>
<li><a href="#orgf10f9ca">《瓦尔登湖》梭罗</a></li>
<li><a href="#org0a2fe64">《人生的智慧》叔本华</a></li>
<li><a href="#org12cdade">真正的自由，是与孤独共舞</a></li>
<li><a href="#orgcda1a8c">也正是因为无聊</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org43b6bb9" class="outline-2">
<h2 id="org43b6bb9">都是因为无聊</h2>
<div class="outline-text-2" id="text-org43b6bb9">
<p>
在罗翔老师这个视频的最后<a href="https://www.bilibili.com/video/BV1584y1v7AH/">【罗翔】“网课爆破”犯了什么法？</a>
</p>

<p>
他提出了一个观点：
</p>

<blockquote>
<p>
很多严重的罪行,它最初的动力都是无聊。那如何来抵制我们时常会生发的这种无聊感呢，
</p>

<p>
如何来让我们过得充实呢，这是我们一生所需要考虑的问题。
</p>

<p>
。。。。。。。
</p>

<p>
也能够时常拥有一种力量，来抵制我们内心的无聊。
</p>
</blockquote>

<p>
就从这些开始聊起吧。
</p>
</div>
</div>

<div id="outline-container-orgf10f9ca" class="outline-2">
<h2 id="orgf10f9ca">《瓦尔登湖》梭罗</h2>
<div class="outline-text-2" id="text-orgf10f9ca">
<p>
梭罗的这个小说其实说的是关于自然的事，是一个崇尚自然、崇尚自由之人所向往的精神生活，以及对当时时代背景下（那时美国正处于农业时代向工业时代转型的初级阶段，伴随着资本主义工业化的进程，在经济突飞猛进的势头下，也伴随着对财富和金钱的欲望于追逐。）一种生活方式的思考与追逐。
</p>

<p>
而在小说的「孤独」这一章中，
</p>

<p>
梭罗写到：
</p>

<blockquote>
<p>
这是一个美妙的黄昏，全身只有一个感官，每一个毛孔中都浸润着欢乐。 <b>我在大自然里以一种奇异的自由姿态来去，成了她的一部分。当我只穿衬衫，沿着布满石头的湖岸行走，天气虽凉，多云而且有风，也没有什么特别的东西吸引我，所有的元素都与我和谐相处。</b> 牛蛙鸣叫，宣告黑夜降临，夜鹰的乐音则乘着吹起涟漪的风从湖上传来。赤杨和白杨摇曳多姿，让我心生戚戚之感，以至于我几乎不能呼吸了；然而像湖水一样，我心中的宁静只有涟漪而没有激荡。和如镜的湖面一样，晚风吹起来的微波距离暴风雨还很远。尽管天色黑了，风仍然在森林中吹着，咆哮着，波浪还在撞击水岸，某一些动物还在用它们的乐音为别的生物催眠。但绝非完全都在休息。野性十足的动物并没有休息，现在正找寻它们的猎物；狐狸、臭鼬、兔子也正在原野上森林中游荡，却没有恐惧。它们是大自然的看守者——是连接一个个生气勃勃的白昼的环节。
</p>

<p>
等我回到屋子里，发现曾有访客来过，并且还留下他们的名片，或是一束花，或者一个常春树的花环，或用铅笔写在黄色的胡桃叶或者木片上的一个名字。不经常走入森林的人常把森林中的一小片什么东西一路上拿在手里把玩，有时故意，有时偶然，把它们全留下了。有个人剥下了柳枝的外皮，编织成一个戒指，丢在我桌上。我总能知道在我出门期间是否有客人来过，从弯倒的树枝或青草，或者从他们的鞋印可以看出来，而且通常来说，从他们留下的蛛丝马迹里我还可以推测出他们的年龄、性别和性格，比如掉在地上的一朵花，一把被拔下来又扔掉的草，甚至还有一直带到半英里外的铁路边才扔掉；有时，还残留着雪茄烟或烟斗味道。我常常还能从他的烟斗的香味，注意到60杆之外公路上这个行经的旅行者。
</p>

<p>
<b>然而我有时有这样的体验，在任何大自然的事物中，都能找出最甜蜜温柔、最纯真和鼓舞人心的朋友，即使是对于最愤世嫉俗的人和最忧郁的人也是如此。</b> 对于一个生活在大自然中而且还有感觉的人来说，不可能会有太过阴暗的忧郁。对于健康而纯洁的耳朵来说，暴风雨就是伊奥勒斯希腊神话中的风神。的音乐。没有任何东西有理由迫使一个单纯而勇敢的人产生庸俗的伤感。当我享受着四季的友爱时，我相信，任什么也无法把生活变成我沉重的负荷。今天洒在我的豆子上的轻柔细雨，使我一整天都待在屋子里，但这雨并不使感到我沮丧或抑郁，对于我也是很有好处的。虽然下雨不能让我出去给豆田松土，但比我锄地更有价值。如果下雨时间太长，会让地里的种子、低地的土豆烂掉，可它对高地的草还是有好处的，既然它对青草有好处，它对我也就会有好处。有时，我拿自己和别人作一番比较，觉得我比别人更得诸神的青睐，超过了我感觉自己应得的；就好像我有一张保证书和保单在他们手上，我的同胞们却没有，因此我受到了特别的指导和保护。我并没有自夸，可是如果可能的话，倒是他们抬举了我。 <b>我从不感到寂寞，也不会受到寂寞感的压迫，但是有一次，那是在我进了森林数星期后，有一个小时的时间，我产生了疑问，要过宁静而健康的生活是否应当有些近邻。独处是有点不愉快。与此同时，我意识到我的情绪有些轻微的失常了，并且似乎也预知我会恢复。</b> 当这些思想在我的思想中占据上风时，轻柔的细雨飘洒下来，我突然感觉到与大自然做伴是如此甜蜜如此受惠，就在这滴答滴答的雨声中，我屋子周围的听到的每一个声音和看到的每一幅景象都存在着无穷尽无边际的友爱，就像支持我的气氛，一下子把我想象中的有邻居的种种好处的思潮压下去了，从此，我就没有再想到过邻居这回事了。每一支小小松针胀大起来，充满了同情心，对待我如同朋友。我清楚地意识到，这里存在着我的同类，虽然我是在一般人所谓荒凉阴郁的处境中，然则那与我的血统最接近，并最富于人性的却并不是一个人或一个村民，所以我认为，再也不会有什么地方会使我觉得陌生的了——
</p>

<p>
“悲悼让悲伤的人未老先衰；
</p>

<p>
在生者的土地上，他们的时日无多。
</p>

<p>
托斯卡尔美丽的女儿啊。”
</p>
</blockquote>

<p>
这是梭罗关于独处，关于无聊的答案。
</p>

<p>
回归自然，在自然中洗涤自我，用纯净平静的内心去接壤土地、湖泊、动物。他已经成为了自然的一部分，也就不存在无聊与不无聊了。
</p>

<p>
天空、大地、湖泊从来都是孤独的，但它们包容，它们承载，它们就是孤独的参照物，也就不会孤独了。
</p>

<p>
“天行健，君子以自强不息。地势坤，君子以厚德载物。”
</p>

<p>
对于一个真正找到了自我，有着独立自我、独立人格的人来说，享受孤独，只是前菜了。在孤独和独处中，他只会越来越强大，而不会被空虚和欲望吞噬，更不会觉得无聊。
</p>

<p>
所以我们的皇帝喜欢自称：孤，寡人。孤寡孤寡孤寡。。。。
</p>
</div>
</div>

<div id="outline-container-org0a2fe64" class="outline-2">
<h2 id="org0a2fe64">《人生的智慧》叔本华</h2>
<div class="outline-text-2" id="text-org0a2fe64">
<p>
在《人生的智慧》中的第7章，章节的名字就是：痛苦和无聊。
</p>

<blockquote>
<p>
第七章 痛苦和无聊
</p>

<p>
生活就是在这二者间强度不一的振荡。
</p>

<p>
一项最普遍的调查已向我们表明，人类幸福的两个敌人就是痛苦和无聊。更进一步说，如果我们足够幸运，能够远离其中一个，则会接近另外一个。事实上，生活就是在这二者间强度不一的振荡。究其原因，是这两极间存在着一种双重的对立：一重是外在的或客观的，一重是内在的或主观的。一贫如洗的境遇会引发痛苦；然而，一个人如果家财万贯，则会感到无聊。相应地，下层阶级要和贫困作无休止的斗争， <b>换个说法，就是与痛苦斗争；而上层阶级则时常要和无聊展开绝望的战斗。内在或主观的对立出自一个事实，即在个体之中，对疼痛的感受力和对无聊的感受力成反比，因为感受力是直接和精神力量成正比的。</b> 我要解释一下，通常来说，迟钝的头脑总与迟钝的敏感性相伴，没有什么刺激物能对迟钝头脑的神经产生影响，简而言之，头脑迟钝的人不会感到太多的痛苦和焦虑——无论这痛苦和焦虑事实上有多么严重或可怕。因而，智力上的迟钝就是印刻在无数面孔之上的“灵魂空虚”的根源，同时，这一精神状态会暴露于对外部世界各类琐碎细节持续而活跃的关注。这才是无聊的真正源头——不间断地渴求刺激，只为了找一个借口，好用某些事物填塞头脑与心灵。人们为达此目的而选择的那类事物毫无特别之处，能证明这一点的，包括他们所依赖的可悲的消遣方式、对社交之乐趣和聊天的看法，还有在门口传闲话的人以及在窗口目瞪口呆地凝视着窗外的人的数量。正因为内在的、心灵的空虚，人们才会寻求社交、消遣、娱乐和各式各样的奢华享乐，并由此走上挥霍与悲苦之路。没有什么比内在的财富——心智的财富——更能抵御这种悲苦了，因为心智的财富规模越庞大，留给无聊的空间就越狭小。用之不竭的思想活力啊，永远都在多种多样的自我与自然现象中寻找新的材料，并准备好根据这些材料打造新组合——这样就有了滋补心智的养料，除了较为放松的若干片刻，心智都可以借此远远超出无聊的范围。
</p>

<p>
但另一方面，这种高度的智力水平植根于高度的感受力、更强的意志力和热情之中，而这些素质的结合会产生被增强的情绪负荷、对一切精神乃至肉体痛苦的被放大的敏感，以致对阻碍更缺乏耐心、对干扰更为愤懑。 <b>所有这些趋势都因为想象的力量、思想的鲜明特性被加强——包括令人不快的思想。我说的这些，可以在不同程度上适用于心智能力这把宏大标尺的每一层级，从十足的蠢材到有史以来最伟大的天才，概莫能外。因此，无论是从主观还是客观的角度来看，一个人离某种痛苦的根源越近，他就离另一种越远。</b> 故而，一个人的天性会指引他尽可能地让自己的客观世界遵从主观世界，也就是说，他会采取最广泛的手段来对付自己最易遭受的那种痛苦。对智者而言，最重要的是力争摆脱痛苦和烦恼，追求安静和闲暇，从而过上宁静而节制的生活，尽可能减少与人的接触。因此，在有了一点所谓的人世经验以后，他就会选择过退休生活；甚至，他如果才智超群，还会选择离群索居。因为一个人自身拥有的越多，对别人的索求就越少——实际上，别人能对他提的要求也会越少。这就是高智商会让一个人变得孤僻的原因。诚然，如果智力的“质量”可以用“数量”来弥补的话，那么即使生活在这样一个伟大世界里也是值得的；不过很不幸，一百个傻瓜聚在一起也抵不上一个智者。
</p>

<p>
<b>一项最普遍的调查已向我们表明，人类幸福的两个敌人就是痛苦和无聊。</b>
</p>

<p>
心智的财富规模越庞大，留给无聊的空间就越狭小。
</p>

<p>
对智者而言，最重要的是力争摆脱痛苦和烦恼，追求安静和闲暇，从而过上宁静而节制的生活，尽可能减少与人的接触。
</p>

<p>
<b>在独处时，每个人都只能求诸自身的才智，其内在也因此暴露。在这人世间，一个人要么选择独处，要么选择庸俗，除此之外别无他途。</b>
</p>
</blockquote>

<p>
这些思考和思想即带着强烈的个人性格色彩，又不可避免的附加上历史的大环境和局限性。
</p>

<p>
我通常更关注的是这些思想家对于问题的思考，这些自由浪漫的思想本身。
</p>

<p>
盲目的把一些名人名言孤立于时代背景，甚至当作信条，就真的是盲目了。
</p>
</div>
</div>

<div id="outline-container-org12cdade" class="outline-2">
<h2 id="org12cdade">真正的自由，是与孤独共舞</h2>
<div class="outline-text-2" id="text-org12cdade">
<blockquote>
<p>
社会就像一团熊熊燃烧的烈火——聪明人因懂得与之保持适当的距离而能够借其取暖；傻瓜则不是因为离得太近被火灼伤，就是因为抱怨火的灼热而躲得远远的，以致只能孤零零地忍受严寒的折磨。
</p>
</blockquote>

<p>
这是是叔本华的《一切都在孤独里成全》的结束语。
</p>

<p>
无聊和孤独是每个人必须要面对的阴暗面，空虚和欲望则是许多罪恶的源头。
</p>

<p>
自由不是放任，也当然不是无力的逃避，不是理所当然的肆无忌惮。恰恰相反，自由是束缚的。
</p>

<p>
自由从来都是有代价的，没有代价的自由自在只能叫做：自妄。
</p>
</div>
</div>


<div id="outline-container-orgcda1a8c" class="outline-2">
<h2 id="orgcda1a8c">也正是因为无聊</h2>
<div class="outline-text-2" id="text-orgcda1a8c">
<p>
但无聊同样也是想象力的来源，人类进步的来源。
</p>

<p>
阿基米德洗澡的时候无聊，发现了浮力；
</p>

<p>
牛顿在苹果树下面无聊（有争议），发现了万有引力；
</p>

<p>
伽利略对着天空无聊，发明了天文望远镜进一步证实了哥白尼的日心说；
</p>

<p>
达尔文喜欢对着动植物无聊，提出了自然选择；
</p>

<p>
爱因斯坦对着时间无聊，想搞清楚时间到底是什么，提出了相对论；
</p>

<p>
尼古拉·特斯拉对着黑夜无聊，做出了第一个交流电发动机（本人讨厌爱迪生）；
</p>

<p>
人对着木头无聊，点着了火。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-philosophy.html">Philosophy</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> <a href="https://www.vandee.art/tag-readings.html">Readings</a> </div>]]></description>
  <category><![CDATA[Philosophy]]></category>
  <category><![CDATA[Ramble]]></category>
  <category><![CDATA[Readings]]></category>
  <link>https://www.vandee.art/blog/2023-11-24-something-about-boring.html</link>
  <guid>https://www.vandee.art/blog/2023-11-24-something-about-boring.html</guid>
  <pubDate>Fri, 24 Nov 2023 17:23:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[富有的概率]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0ec2330">薛定谔的富有</a></li>
<li><a href="#org26523f4">提升自己是最大的储蓄</a></li>
<li><a href="#orge3f0b65">Reference</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org0ec2330" class="outline-2">
<h2 id="org0ec2330">薛定谔的富有</h2>
<div class="outline-text-2" id="text-org0ec2330">
<p>
做梦中彩票这种事，我天天也在想，正好这两天看到了这些，挺有共鸣。<a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a>、<a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 '不断变化的世界秩序'动画完整版 40分钟【中英精校】_哔哩哔哩_bilibili</a>
</p>

<p>
从经济学角度来思考问题，确实可以让现实的问题简单一些，它不像哲学那样弯弯曲曲，直接的经济学模型带来直接的计算结果。
</p>

<p>
<a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a>里作者说到：
</p>

<blockquote>
<p>
fortune 有幸运也有财富的意思，实际上这两个词也基本划等号。
</p>

<p>
&#x2026;
</p>

<p>
众所周知我们的人生就是一场概率的游戏，这个说法我都说过无数次了。天降横财、一夜荣华、时来运转的概率和买彩票差不多。相对于这些不确定的事情，我们能掌握的可能是那些收益率低于 5% 的事情。这些事情可大可小，可以跟金融相关也可以跟自身提升相关，总之有正向收益的事情，你都可以把它理解成**增加确定性**的事情，也即增加概率的事情。比如：&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
如果把变富看作一场赌博，那么我们应该赌概率大的事情，而不是收益率大的事情，赌长期的事情，而不是短期的事情。其实对于每个普通人，只要不去做一些突破自己认知但又完全无法衡量风险的事情，基本上是不会回退的。那么，你变富就是一件确定的事情。也许选择比努力重要，但努力决定了确定性的大小。
</p>

<p>
所以，慢慢变富其实是一种复利，既然是复利，那它的增长就是指数型的。只要我们每天还在进步，那我们缺的就不是那些让人焦虑的快速致富的机会，而是时间。一口吃不成胖子，但一口一口吃，总有一天会胖的。我们也许要做的是尽量延长自己玩这个长期游戏的时间。
</p>

<p>
&#x2026;
</p>

<p>
很大程度上，变富实际上是认知在增长，也许等我们认知水平到了一定程度，财富自然而然就来了。而且，这个过程会是非常有趣的，会是一种享受，持续的增长会释放内啡肽，过快的刺激只会带来多巴胺。
</p>
</blockquote>

<p>
fortune 有幸运也有财富的意思，实际上这两个词也基本划等号。许多复杂的谜题的答案，往往就是题面本身。
</p>

<p>
随着了解初步的量子力学、决定论、宇宙目的论等概念，我逐渐对一些观点有了倾向性：
</p>

<ul class="org-ul">
<li>对于生命本身而言，它确实可以说是有目的性的，细胞分裂是你无法阻止的生命的脉动，贪婪的基因其实只有一个目的，让自己无限复制下去。但对于宇宙和物质而言，或许就是回到大爆炸的原点，无限膨胀再坍塌、无限收束、压缩。还有在诺兰电影<a href="https://movie.douban.com/subject/30444960/">信条</a>里被大家熟知的热力学第二定律，熵增加原理。</li>
<li>每时每刻发生的事情，都是概率。用这种极其不确定的概念来体会现实中看似确定发生的事情，挺美妙的。最近还下单了个龟壳，学学周文王。**在不确定性中寻求希望中的确定性**，也就是人类一直在做的事情。</li>
</ul>

<p>
所以其实每个人都有富有的可能性，只是你还没有到达“富有态”🤣，可能性的大小不一样罢了。我们应该做的也是其实能做到的，就是增加这种可能性的大小。
</p>
</div>
</div>

<div id="outline-container-org26523f4" class="outline-2">
<h2 id="org26523f4">提升自己是最大的储蓄</h2>
<div class="outline-text-2" id="text-org26523f4">
<p>
<b>很大程度上，变富实际上是认知在增长</b> ，也许等我们认知水平到了一定程度，财富自然而然就来了。
</p>

<p>
我一直很赞同这个观点。之前看到一句话：你只能赚到你认知范围以内的钱，也是一个意思。fortune，真正的富有一定是两方面的：财富富有和精神富有，也真就和字面一样，是种幸运。应该没有人会讨厌活着拒绝真正的'‘富有“，但正如罗翔在<a href="https://www.bilibili.com/video/BV1j84y1D7pP">【麦家x罗翔x衣戈猜想】人生海海，错了再来</a> 里所说，正如一个智者所说：名利，它可能追逐的，就是那些并不在乎它的人。
</p>

<p>
富有从来不是真正富有的人本来的目的，它是伴随的一个概率。该有的都有了的时候，你想不富有其实也挺难的，名利会追逐你，甩都甩不掉，甚至反过来吞噬你。当所有的导向富有的概率事件都发生了的时候，最后那一点别人没有的”运气“，才是fortune真正到来的时候。当然这个运气，也可以说成是你的实力、命运，或者缺少这个运气的人的抱怨和忌妒。
</p>

<p>
<b>提升自己就是最大的人生储蓄，最大的财富。</b> 当然富有了之后，它是真理，富有之前，它是一坨shit。
</p>

<p>
瑞达利欧的《原则》，看了一点开头就一直放着了，现在确实还看不懂。<a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 '不断变化的世界秩序'动画完整版 40分钟【中英精校】_哔哩哔哩_bilibili</a>里提到的经济周期，宏观的经济运行规律，是从历史的不确定性中找到确定性，瑞达利欧总结出这些，称作原则。
</p>

<p>
但历史的进程和拐点，往往来自于那些不确定性，往往是这些不确定的人做出的不确定的事带来新的稳定与秩序。乔布斯不去”剽窃“施乐的图形界面，就不会有现在的苹果、比尔·盖茨不去接着”剽窃“苹果也不会有现在的微软、余华也想不到自己找了一个文化馆的工作到后来写出了《活着》、爱因斯坦质疑牛顿经典力学提出相对论、马云去了一趟美国回来忽悠了一帮朋友创建了阿里。
</p>

<p>
你以为我接下来会说，所以我们要向上面说的那些人那样啥的啥的，并不是，这些历史的结果和他们并没有什么绝对的联系。
</p>

<p>
我今天一出门，无非两个结果，出太阳了，还是出太阳了。
</p>
</div>
</div>


<div id="outline-container-orge3f0b65" class="outline-2">
<h2 id="orge3f0b65">Reference</h2>
<div class="outline-text-2" id="text-orge3f0b65">
<ul class="org-ul">
<li><a href="https://letters.geekplux.com/51/?ref=geekplux-lab-newsletter">为什么要慢慢变富</a></li>
<li><a href="https://www.bilibili.com/video/BV14c411u7S4/">【绝对珍藏】桥水创始人瑞·达利欧讲解 '不断变化的世界秩序'动画完整版 40分钟【中英精校】_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.thepaper.cn/newsDetail_forward_24958915">作家余华已死，网红余华活着</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Thinking]]></category>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2023-11-20-get-rich-slow.html</link>
  <guid>https://www.vandee.art/blog/2023-11-20-get-rich-slow.html</guid>
  <pubDate>Mon, 20 Nov 2023 14:54:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[读或听或看？]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9a97712">再聊“读书无用”</a></li>
<li><a href="#org84af94d">扁平化信息or立体化信息</a></li>
<li><a href="#org0ba8a80">最后</a></li>
</ul>
</div>
</nav>
<p>
再给自己开个小坑，也是记录一下从RSS订阅到现在的信息输入方案给自己的反馈。
</p>

<p>
去年从RSS订阅开始，是一个实验，想看看文字信息阅读和视频、音频信息之间对于我来说，哪个效率更高，最终是想得出一个文字信息和视频信息之间的权重，每年再根据想了解的领域微调，作为一个信息输入模板固定下来。
</p>

<p>
近一年，基本没有过多的主动视频信息的摄入，感觉也还挺不错，有种吃完大荤，涮点青菜的感觉，很清爽。
</p>

<div id="outline-container-org9a97712" class="outline-2">
<h2 id="org9a97712">再聊“读书无用”</h2>
<div class="outline-text-2" id="text-org9a97712">
<p>
Andy 的 <a href="https://andymatuschak.org/books/">Why books donʼt work   Andy Matuschak</a> (就是 <a href="https://notes.andymatuschak.org/zNUaiGAXp21eorsER1Jm9yU">Evergreen notes should be atomic</a> 那个 Andy)，大致讲了这么个事：
</p>

<blockquote>
<p>
<b>为什么 “读书无用”</b>
</p>

<p>
<a href="https://andymatuschak.org/books/">Why books donʼt work</a> 其实主要探讨了为什么书籍和演讲作为传统的知识传递媒介的局限性。
</p>

<p>
作者首先没有否认书籍的重要性，但我们扪心自问读过的很多书，真的能吸收的又有多少呢？可能读完的时候认为自己能把书的内容大致总结一遍，过段时间可能只能记得一些零碎的句子，再过一段时间可能不看目录根本想不起这本书主要讲什么。
</p>

<p>
紧接着作者开始从 “为什么讲座无用” 来侧面解释 “读书无用”。作者认为这两种媒介都有问题，因为都犯了 <b>transmissionism</b> （直译过来，传输主义？）的错误，
</p>

<ul class="org-ul">
<li>讲座，指望着听众从头到尾听到每句话，然后就能完全理解演讲者的观点了</li>
<li>读书，指望着读着通过阅读句子来理解知识，作者用文字描述一个知识，读着从头到尾读过，就理解了。</li>
</ul>

<p>
这些都是不科学的，因为它们没有调动起我们人类真正掌握知识的方式 —— 即我们认知的过程。
</p>

<p>
<b>to understand something, you must actively engage with it</b>.
</p>

<p>
Source: <a href="https://geekplux.com/newsletters/41">为什么读书无用 -#41 - GeekPlux</a>
</p>
</blockquote>

<p>
信息输入的载体，还是得量体裁衣，关键在于认知的过程。也就是 Andy 所说的，to understand something, you must actively engage with it.（2024-10-28-add：Andy 算是我 PKM 和笔记的启蒙导师了，现在的 tiddlywink 就是仿造 Andy 个人网站的翻页效果。）
</p>

<p>
<b>对于自主学习而言：</b> 扁平化的信息，简单来说即文字信息，更有利于调动自主的学习。
</p>

<p>
<b>对于知识吸收效率而言</b>: 立体化的信息，无疑在短期理解和吸收方面，效率更高。视频、音频的载体包含更多更直接的信息，更有利于信息的直接吸收。
</p>
</div>
</div>


<div id="outline-container-org84af94d" class="outline-2">
<h2 id="org84af94d">扁平化信息or立体化信息</h2>
<div class="outline-text-2" id="text-org84af94d">
<p>
先简单把文字信息定义为扁平化信息，视频、音频等信息定义为立体化信息。
</p>

<p>
设定大前提：信息传播是一定有损耗的。
</p>

<p>
对于信息传播者来说，立体化的信息载体无疑可以包含更多信息的元素，对于信息接受者来说，当然理论上就可以接收到更多的信息。问题是出现在信息接收之后，也就是调动认知的这个过程。
</p>

<p>
<b>信息损耗率+认知调动率 = 新认知迭代率</b>
</p>

<ul class="org-ul">
<li>对于认知调动，比较明确：就是要做自主的信息再输出, to understand something, you must actively engage with it.</li>

<li>而对于信息损耗率，这个就因人而异了，如果听书和看视频对于你来说效率更高，一下就能记住很多信息，那么它对于你来说就是一个优秀的形式。</li>
</ul>

<p>
而对于我来说，现阶段，我更喜欢文字信息，也就是扁平化的信息。（2024-10-28-add：现在我已经体会到文字信息带来的好处了，<a href="https://clip.vandee.art/2024/10/writes-and-write-nots---%E5%86%99%E4%BD%9C%E8%83%BD%E5%8A%9B%E7%9A%84%E5%88%86%E5%8C%96/index.html">2024-10-28-Writes and Write-Nots - 写作能力的分化 - Vandee's Clip</a> ， <a href="https://wiki.vandee.art/#%E6%96%87%E5%AD%97%E9%98%85%E8%AF%BB%E7%9A%84%E7%89%B9%E6%9D%83">文字阅读的特权</a>）
</p>

<p>
原因有几点：
</p>

<ul class="org-ul">
<li>文字所包含的直接信息更少，但间接信息更多
<ul class="org-ul">
<li>直接信息是指，文字的表面意思。比如最近在看的资本论，原文是真的拗口，能直接理解到的信息不多。</li>
<li>间接信息是指，文字所想表达的信息。还是说资本论，马克思的一个小概念后面，可能都可以写一篇论文了，想要理解吸收这些概念，自然就会自主的去查。</li>
<li>文字信息所呈现给你的很单一很具体，因此注意力的损耗相对会低一些。没有视频、音频信息的介入，我所面对的就是纯粹的思想提炼，和自己的思维碰撞。</li>
</ul></li>
<li>视频所包含的直接信息更多，但间接信息更少
<ul class="org-ul">
<li>看视频的时候，注意力不会完全集中在实质内容上，视频会让你分散一些注意力在它这个形式本身，可能是这个up长得很帅很好看，或者是视频效果很炫酷等等。这些声音和图像不会完全是和你想输入的内容完全相关，这是一部分注意力的损耗，视频的间接信息被这些占用了，而图书文字就是一张白纸。</li>
<li>视频更像是一个窗口，我觉得这和把书和文字捧在手上的感觉还是很不一样的
<ul class="org-ul">
<li>比如，打开一个北京大学的视频课，它更像是一个信息的窗口在你的对面，始终感觉隔着点什么。我调动的是视觉听觉和很多联动的反应来应对这个信息的窗口。时间久了，它好像更像是一个在发生的事件。</li>
<li>而看书的时候，我更自由一点,可能感觉跟实在点吧，这本书是我的。和视频对比，更让我感觉这是一个纯粹学习的过程。它不是一个事件，而是我本来就在思考的海洋，现在汇入了另一个思考的溪流。</li>
<li>我个人更喜欢这种感觉，你也可以说看书和视频对于你而言，看书更像是一个事件。</li>
</ul></li>
</ul></li>
</ul>


<p>
听书这个形式另说，比较特殊。本质上是信息的呈现，从视觉变成了听觉。
</p>

<p>
很多人没有整块独立下来的时间来安静的阅读，碎片化的时间听个书，是个很好的“看书”的方式。在心力不是足的情况下，就不应该选择要消耗很多心力的形式，这个时候，放松的信息输入形式，更好。不足的地方可能在于，内容的结构和体系不如文字直接，文字有直接的提纲和标题。但，在认知调动的时候可以自主总结，或者逻辑思维足够的情况，听下来也就把大纲固定下来了。
</p>
</div>
</div>

<div id="outline-container-org0ba8a80" class="outline-2">
<h2 id="org0ba8a80">最后</h2>
<div class="outline-text-2" id="text-org0ba8a80">
<blockquote>
<p>
For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin.
</p>

<p>
<b>对我来说，做笔记有助于确保我真正认真思考其中的内容。如果我不同意这本书，有时需要花很长时间才能读完这本书，因为我在页边空白处写了太多内容</b>
</p>

<p>
— <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a>
</p>
</blockquote>

<blockquote>
<p>
Text is a form of communication. If something, or someone wrote it for us, certain decisions were made along the way to convey the goal that we gave. Out of the many paths possible to crystallize that piece of knowledge into a piece text, one of them was chosen.
</p>

<p>
文本是一种交流形式。如果有什么东西，或者有人为我们写了它，那么我们就会在整个过程中做出某些决定来传达我们给出的目标。将知识结晶成一篇文本的多种可能途径中，我们选择了其中一条。
</p>

<p>
Source: <a href="https://lopespm.com/notes/2023/07/02/writing-as-a-form-of-thinking.html">Writing as a form of thinking - Byte Tank (lopespm.com)</a>
</p>
</blockquote>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-thinking.html">Thinking</a> </div>]]></description>
  <category><![CDATA[Thinking]]></category>
  <link>https://www.vandee.art/blog/2023-09-18-read-or-listen.html</link>
  <guid>https://www.vandee.art/blog/2023-09-18-read-or-listen.html</guid>
  <pubDate>Mon, 18 Sep 2023 17:58:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[镜花水月]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org22d9067">一</a></li>
<li><a href="#org63e50a6">二</a></li>
<li><a href="#orgb174611">三</a></li>
</ul>
</div>
</nav>
<p>
今天冥想完，一睁开眼，正好看到窗户外打进来一束光，灰尘在光束里无规律的漫游。
</p>

<p>
眯着眼，好像看到了七彩的颜色。
</p>

<p>
这让我突然想到了波长这个问题。也是因为昨天和朋友讨论到了<a href="https://music.163.com/?from=infinity#/song?id=568915923">7.23前夜 - 虚极乐队 - 单曲</a>这首歌，
</p>

<p>
看评论说：
</p>

<blockquote>
<p>
水樹：書中記載我們人類和宇宙之間溝通最 和諧的波長是7.23公分，密宗藏傳佛教的咒 文“嗡啊吽”這三個聲音的波長也是7.23公分，我覺得宇宙大爆炸的時候所有分子，量子泡沫，光子等等所有的物質它們之間感應 出來最和諧最完美的波長應該也是7.23公分，如果是這樣的話那麼我們的老宇宙該多美.
</p>
</blockquote>

<p>
眼睛盯着这束光发呆，突然脑海中一大堆信息也好像开始沿着这束光，在飞速的盘旋加速，冲破大气层，冲向无边黑暗的宇宙。
</p>

<p>
突然一瞬间，这束夹杂着思绪信息的光束，碰到了一个实体，迸发出了一个新的思考，也就是今天想整理出来的东西。
</p>

<div id="outline-container-org22d9067" class="outline-2">
<h2 id="org22d9067">一</h2>
<div class="outline-text-2" id="text-org22d9067">
<p>
对于世界是什么，这个问题，或者说<a href="https://zhuanlan.zhihu.com/p/377161628">形而上学</a>问题，
</p>

<blockquote>
<p>
引自《国外哲学大辞典》：
</p>

<p>
【形而上学】（英 metaphysics）该词原为古希腊亚里士多德一部著作的名称，意为“物理学之后”。从13世纪起，被作为哲学名词，用于指研究超经验的东西的学问，或用作哲学的别称，其意一般多指建立一个观念体系以对实在的性质作出判断，或以一种方法去把握所知的实在的性质。
</p>

<p>
在德国黑格尔提出唯心辩证法以后，它又被用以指非辩证法的世界观与方法论。形而上学的核心问题是现象与本质的对立，围绕这个核心问题，哲学家提出了各种不同的观点。
</p>

<p>
形而上学，是西方哲学对世界或事物存在的基本哲学观点，也是西方哲学的基本理论形式。那么，究竟什么是形而上学？
</p>

<p>
简单而论，所谓形而上学就是指人们基于对人与世界存在的抽象性、一般性和普适性认识论体系。形而上学理论的基本特性，是以语言、概念等形式表现出来的抽象性；而关于事物存在的研究，是一种广义地、普遍的一般性研究；其理论的适用性，表现为对一切事物存在的普适性。
</p>

<p>
也可以这么说，形而上学理论体系，是在抽象的基础上关于一切事物存在的、真理性的“大一统理论”，即“放之四海而皆真”，与中国传统哲学的“道”具有相似性。
</p>

<p>
“形而上学”一词翻译自英文metaphysics，古<a href="https://baike.baidu.com/item/%E5%B8%8C%E8%85%8A%E6%96%87/5623773?fromModule=lemma_inlink">希腊文</a>τὰ μετὰ τὰ φυσικά，拉丁文metaphysica。
</p>

<p>
该词原为<a href="https://baike.baidu.com/item/%E4%BA%9A%E9%87%8C%E5%A3%AB%E5%A4%9A%E5%BE%B7/26769?fromModule=lemma_inlink">亚里士多德</a>一部著作的名称，该著作是亚里士多德死后200多年由<a href="https://baike.baidu.com/item/%E5%AE%89%E5%BE%B7%E7%BD%97%E5%B0%BC%E6%9F%AF/22607214?fromModule=lemma_inlink">安德罗尼柯</a>把他专讲事物本质、灵魂、意志自由等研究经验以外对象的著作编集成册，排在研究事物具体形态变化的《物理学》（physica）一书之后，并名之为《 <b>物理学之后诸卷</b> 》。<a href="https://baike.baidu.com/item/%E5%8F%A4%E5%B8%8C%E8%85%8A/14206?fromModule=lemma_inlink">古希腊</a>文是去掉<a href="https://baike.baidu.com/item/%E5%86%A0%E8%AF%8D/1522215?fromModule=lemma_inlink">冠词</a>就成了<a href="https://baike.baidu.com/item/%E6%8B%89%E4%B8%81%E6%96%87/360796?fromModule=lemma_inlink">拉丁文</a>，meta这个前缀有之后、超越、基础的意思。这个用语被<a href="https://baike.baidu.com/item/%E6%8B%89%E4%B8%81%E8%AF%AD/747781?fromModule=lemma_inlink">拉丁语</a>注解家 <b>理解为“超物理科学”</b> ，亚里士多德在书中讨论的问题成为了形而上学的很多基本问题。
</p>

<p>
“形而上学”一词在亚里士多德时代并未出现，它是在公元前60年<a href="https://baike.baidu.com/item/%E5%AE%89%E5%BE%B7%E7%BD%97%E5%B0%BC%E6%9F%AF/22607214?fromModule=lemma_inlink">安德罗尼柯</a>编撰亚氏遗著时，把所谓《形而上学》的各篇章放在《物理学》之后，并集合在一部书内，取名为Meta physika，即《形而上学》。 [7]
</p>

<p>
“metaphysics”的<a href="https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E8%AF%91%E5%90%8D/7123648?fromModule=lemma_inlink">中文译名</a>“ <b>形而上学</b> ”是根据《 <b>易经</b> ·系辞》中“ <b>形而上者谓之道</b> ，形而下者谓之器”一语，由日本<a href="https://baike.baidu.com/item/%E6%98%8E%E6%B2%BB%E6%97%B6%E6%9C%9F/12594349?fromModule=lemma_inlink">明治时期</a>著名哲学家<a href="https://baike.baidu.com/item/%E4%BA%95%E4%B8%8A%E5%93%B2%E6%AC%A1%E9%83%8E/6660363?fromModule=lemma_inlink">井上哲次郎</a>翻译的。 <a href="https://baike.baidu.com/item/%E4%B8%A5%E5%A4%8D/119000?fromModule=lemma_inlink">8] 晚清学者 *[严复</a>* 则采用了玄学这一翻译，后经清末留日学生将大批<a href="https://baike.baidu.com/item/%E6%97%A5%E5%88%B6%E6%B1%89%E8%AF%AD/2018709?fromModule=lemma_inlink">日制汉语</a>（日本称和制汉语）带回国后，玄学这一译法渐渐被形而上学取代。<a href="https://baike.baidu.com/item/%E4%B8%A5%E5%A4%8D/119000?fromModule=lemma_inlink">严复</a>拒绝使用<a href="https://baike.baidu.com/item/%E4%BA%95%E4%B8%8A%E5%93%B2%E6%AC%A1%E9%83%8E/6660363?fromModule=lemma_inlink">井上哲次郎</a>的翻译，根据老子《道德经》"玄之又玄，<a href="https://baike.baidu.com/item/%E4%BC%97%E5%A6%99%E4%B9%8B%E9%97%A8/159328?fromModule=lemma_inlink">众妙之门</a>"，把“<a href="https://baike.baidu.com/item/metaphysical/53056054?fromModule=lemma_inlink">metaphysical</a>”一词译为玄学，但由于日本翻译的一些词汇更被当时的中国民众所接受，因此“形而上学”一词扎根在了汉语之中。
</p>
</blockquote>

<p>
今天这道光束之旅让我有了新的感受。
</p>

<p>
语言，肢体动作，眼神，视觉，听觉，触觉，人类从听摸看，开始了解这个物质世界。人类为了生存本能的反应和思想，表达或表现出语言和肢体动作，这应该是人类对于世界的第一次反馈和交流。
</p>

<p>
从本源出发，波长（光，声音），表达在数学是公式，表达在物理是图像和模型，表达在音乐上是音阶，一个微观物质分子和由它组成的宏观实体，经过人类的解码和编码，再转码成无限的表现或表达形式，也可以说，这就是人类的认知过程。
</p>

<p>
人类的社会形式不断发展，对世界的认知从神学到哲学再到现在的科学，但这些从基因里遗传下来的人的本性或者人之所以被定义为人的原始的东西，没有改变，
</p>

<p>
简单来说，和编程没什么区别，就是：理解和表达，我们无时无刻的在解码和转码这个世界。
</p>

<p>
马克思说，劳动分工，分化出职业和阶级，不同的社会形态，人类文明，对应着人类不同的生活和生存方式。
</p>

<p>
因此抛开现在人的社会属性，世界对于我们来说是什么，其实从头到尾都只取决于我们自己，只取决于我们和大自然的交流。
</p>
</div>
</div>

<div id="outline-container-org63e50a6" class="outline-2">
<h2 id="org63e50a6">二</h2>
<div class="outline-text-2" id="text-org63e50a6">
<p>
因此不如类比计算机编程语言来思考下去。
</p>

<p>
相同的信息和信号，通过不同的计算机语言，C,Go,Python，Java，通过同一硬件介质计算机，展现成功能相似的不同程序。这和人类解释世界其实没什么区别。
</p>

<p>
以历史唯物主义举例(也就是一种语言)，历史唯物主义指出：历史发展是有其特定规律的，即生产力决定生产关系，生产关系对生产力有反作用，生产关系一定要适应生产力的发展。伴随着生产力的发展，人类社会从原始社会，奴隶社会，封建社会，资本主义社会，社会主义社会，最终走向共产主义社会。
</p>

<p>
人类有太多解释这个世界的语言了，只是取决于你更相信哪一个，更喜欢哪一个。
</p>

<p>
而科学，作为人类历史和经验总结的全部（可以类比为操作系统或者根语言），我总觉得，它的局限性一部分来自于，我们没有除了人类之外的高等文明参照系。
</p>

<p>
形而上学的难处，就在于，我如何用我的意识去否定或肯定我的意识，就好像让一个计算机语言去编译和解释他自己。
</p>

<p>
<b>我们始终在用自己发展出来的价值观和世界观来反思我们自己，</b>
</p>

<p>
<b>我们如何用既定的思维和认知来冲破既定的思维和认知，</b>
</p>

<p>
这是个很矛盾的问题。
</p>

<p>
Add：在这里有我更多的思考：<a href="https://wiki.vandee.art/#On%20the%20Nature%20of%20Time%20-%20%E6%97%B6%E9%97%B4%E7%9A%84%E6%9C%AC%E8%B4%A8">On the Nature of Time - 时间的本质</a> ，很开心，在时隔一年之后，自己的猜想得到了验证。2024-11-05
</p>
</div>
</div>

<div id="outline-container-orgb174611" class="outline-2">
<h2 id="orgb174611">三</h2>
<div class="outline-text-2" id="text-orgb174611">
<p>
想到这里，其实已经豁然开朗了。又让我想到了黑客帝国。
</p>

<p>
按照现在的世界观，既然基因决定了人类的生物特性，现在科学的世界观是我们人类自己解释自己的语言，
</p>

<p>
那么，我们为什么要按照这些规则去生存或表达自己呢？或者为什么不按照物质本源的规律去生活和表达自己呢？（如果这个世界存在人类定义的本源的规律的话）
</p>

<p>
为什么只是选择一种主流流行的语言去解码和编码我的世界和生活呢？
</p>

<p>
而不是回到人类规则的原点：也就是开头所说，和大自然的交流，和大自然本身的理解和表达。
</p>

<p>
<b>我不需要一种语言来解释我，</b>
</p>

<p>
<b>因为我是定义中的人类，</b>
</p>

<p>
<b>人类定义人类自己，</b>
</p>

<p>
<b>因此我定义我自己。</b>
</p>

<p>
热爱自己的热爱，和大自然交流共生，做人就应该做的事（不管是人类自己定义的自己，还是其他文明定义的人类），这应该就是我对世界定义的语言。
</p>

<p>
如果硬要我选一个最喜欢的语言，
</p>

<p>
那一定是艺术了。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-philosophy.html">Philosophy</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Philosophy]]></category>
  <link>https://www.vandee.art/blog/2023-08-22-a-castle-in-the-air.html</link>
  <guid>https://www.vandee.art/blog/2023-08-22-a-castle-in-the-air.html</guid>
  <pubDate>Tue, 22 Aug 2023 14:48:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Perfect is shit]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc8d4822">Perfect is shit</a></li>
<li><a href="#org96b4508">热爱</a></li>
<li><a href="#orgd3cf58d">结尾</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgc8d4822" class="outline-2">
<h2 id="orgc8d4822">Perfect is shit</h2>
<div class="outline-text-2" id="text-orgc8d4822">
<p>
打开电脑，也许是桌面正好循环到了影魔（Dota游戏中的一个人物），突然很想再看一遍这个视频：懂的都懂， <a href="https://www.bilibili.com/video/BV1dx411p7Fc/">DotA - Perfect Is Shit 720P</a>
</p>

<p>
今天也不想谈Dota这个游戏本身（情怀dead game），还有PIS这个人（一个冠名影魔金色ID 的中国玩家）。
</p>

<p>
这应该是时隔十年，再看到这个视频，没有了当时第一次看的时候的惊艳，现在打字时的心情，应该说是怀念？怀念的是这个人在一个领域的离场？还是说，怀念的是这个游戏？很显然都不是。
</p>

<p>
可能只是在怀念一段纯粹的岁月吧。也在感慨这个天赋异禀的人（只论技术，不谈是非），是如何逐渐消逝在岁月的浪潮中。
</p>

<p>
写到这里，脑子里不断出现两个词：热爱，历史。
</p>

<p>
历史中，一个领域里天赋异禀而后因为种种原因，没有最终流芳百世的人太多了，而有幸被历史固定下来的大多也不是全貌，
</p>

<p>
<b>如何让自己活成自己，活成别人眼中的自己，又活成历史中的自己，</b>
</p>

<p>
这个问题我想我早已经有了自己的答案，因为至少我现在只用去解决上面的第三个问题。
</p>

<p>
一个曾经还算比较热爱的一个东西，到现在连TI比赛都不会关注了，
</p>

<p>
我的热爱，随着时间，最终会变成什么，这是此时，我最想再思考下去的问题了。
</p>
</div>
</div>

<div id="outline-container-org96b4508" class="outline-2">
<h2 id="org96b4508">热爱</h2>
<div class="outline-text-2" id="text-org96b4508">
<p>
现在回想起来，第一次让我切身感受到这个词含义的时刻，绝对是第一次看到梵高故事的时候，特别是，他割耳朵的时候，还有在烈日下画画画到昏睡过去的时候。
</p>

<p>
梵高的故事，画里的烈日、向日葵、扭曲的星空，浓烈炽热的橙黄，这种热爱的热烈，像炙热的阳光一样，打穿了我，
</p>

<p>
这份无比热烈的激情与热爱，以及对色彩的疯狂，对热爱的执着，透过画布，穿越了时空。
</p>


<figure id="org312745f">
<img src="https://s2.loli.net/2023/06/23/loEuqw6iRvPmT71.jpg" class="img" width="50%" height="50%">

</figure>


<figure id="org73d6415">
<img src="https://s2.loli.net/2023/06/23/47J8EFcKfVM5xow.jpg" class="img" width="50%" height="50%">

</figure>

<p>
直到现在，这份热爱，依然炙烤着我。
</p>

<p>
因为一直以来，一个问题一直围绕着我：
</p>

<p>
<b>我应该如何去热爱我的热爱，</b>
</p>

<p>
<b>我如何找到、确定、坚持、实现、表达、传递自己热爱的热爱。</b>
</p>

<p>
这个问题就好像梵高画中的烈日一样，在我头顶，炙烤着我。
</p>

<p>
这似乎也并不是一个矛盾的问题：我一直在一个不确定自己的热爱是什么的状态下，热爱着我的热爱。
</p>

<p>
现在，我可以确定的是： <b>热爱是一种态度和状态</b> ，而热爱的那个热爱具体究竟是什么，相比起来好像不那么重要。
</p>

<p>
就好像《功夫熊猫1》里，神龙卷轴空无一字，Po的老爸最后告诉他，汤面根本没有秘方！秘方就是相信，随后Po带着卷轴打败了TAI LUNG，救下了小浣熊师傅和村子，最后头顶大锅，围着围裙，在沙尘中浮现出传说中神龙大侠的身影。
</p>


<figure id="orgbd09dd7">
<img src="https://s2.loli.net/2023/06/23/LKWYAeOtv5jyuxX.jpg" class="img" width="50%" height="50%">

</figure>


<figure id="orgbf57cb0">
<img src="https://s2.loli.net/2023/06/23/EyH2oDYunrGVM7m.jpg" class="img" width="50%" height="50%">

</figure>


<figure id="org5127b18">
<img src="https://s2.loli.net/2023/06/23/IAwVZYjS5Nfu2vR.jpg" class="img" width="50%" height="50%">

</figure>

<p>
其实TAI LUNG本也可以成为神龙大侠，只不过太执着与这个身份，最后拿到卷轴了，看到了自己也还是没能顿悟，而Po最后回归了自己，一个想学功夫的大肚皮吃货熊猫。
</p>

<p>
与其说神龙大侠的传说应验在了Po身上，不如说是Po成就了自己，成为了后人新的传说。
</p>

<p>
根本就没有食神，或者说人人都是食神，忘掉所有招式，就练成太极了。
</p>

<p>
如若可以一生持续热爱一个事情，那是幸运和幸福的，这并不是个人能够或者必须决定的事情，如若不然，也依然保持热爱，保持着对于世界自己的态度，保持着自己的表达，保持着那份炽热的纯粹。
</p>

<p>
我也始终相信，这份热爱与热烈，会如烈日，传递给他人，传递给花草树木，传递给蚊虫鸟兽，传递给这个世界，传递给大自然，传递给有阳光照射的地方，突破时间与空间的局限。
</p>
</div>
</div>

<div id="outline-container-orgd3cf58d" class="outline-2">
<h2 id="orgd3cf58d">结尾</h2>
<div class="outline-text-2" id="text-orgd3cf58d">
<p>
想不到什么好的结尾，但是没有又好像差点什么，就放首歌吧。
</p>

<p>
<a href="https://music.163.com/?from=infinity#/song?id=28949127">太阳照常升起 - 痛仰乐队 - 单曲 - 网易云音乐 (163.com)</a> 。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-essay.html">Essay</a> <a href="https://www.vandee.art/tag-ramble.html">Ramble</a> </div>]]></description>
  <category><![CDATA[Essay]]></category>
  <category><![CDATA[Ramble]]></category>
  <link>https://www.vandee.art/blog/2023-06-23-perfect-is-shit.html</link>
  <guid>https://www.vandee.art/blog/2023-06-23-perfect-is-shit.html</guid>
  <pubDate>Fri, 23 Jun 2023 15:03:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[蓝色药丸还是红色药丸？]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org21e9cd8">虚拟摄影和艺术</a>
<ul>
<li><a href="#org194cbdd">摄影概念的内涵与外延</a></li>
</ul>
</li>
<li><a href="#org2711c75">黑客帝国</a></li>
<li><a href="#org14cfe01">什么是虚拟？什么才是现实？</a></li>
</ul>
</div>
</nav>



<div id="outline-container-org21e9cd8" class="outline-2">
<h2 id="org21e9cd8">虚拟摄影和艺术</h2>
<div class="outline-text-2" id="text-org21e9cd8">
<p>
最近还是入坑了switch，玩了一下塞尔达，在爬山开图的时候，看到了许多绝美的风光，就习惯性的来了两张。
</p>


<figure id="org809bd44">
<img src="https://s2.loli.net/2023/02/23/mZQ4kRHxwVliBYr.jpg" class="img" width="60%" height="60%">

</figure>


<figure id="org373bd4d">
<img src="https://s2.loli.net/2023/02/23/TvK1DtIBQuFicpw.jpg" class="img" width="60%" height="60%">

</figure>



<p>
游戏摄影，或者说是虚拟摄影，这类的概念，就像无反对单反、数码摄影对胶片的挑战一样，以后一定会挑战传统的摄影理念。AI随着chatGPT的公测，让我们更近距离的体验到了AI对生活、行业、技术的改变。
</p>

<p>
PS等各种后期视频、图片软件，也都加入了AI处理的功能。技术的发展使得摄影后期越来越便利，创作的多样性也不可同日而语，更不谈AIGC（AI Generated Content）的事了。现在大量的插图、封面图，都是由AI自动生成。
</p>

<p>
<b>摄影后期和前期的界限越来越模糊，似乎摄影前期的重要性，这个摄影的根本正在被人们忽视。</b>
</p>
</div>

<div id="outline-container-org194cbdd" class="outline-3">
<h3 id="org194cbdd">摄影概念的内涵与外延</h3>
<div class="outline-text-3" id="text-org194cbdd">
<p>
数码摄影的作品载体（不冲印的前提下）简而言之就是：图片格式。JPG,PNG,GIF,RAW。这么看，摄影作品和游戏摄影、AI做图（虚拟摄影）本质上区别不是很大。
</p>

<p>
所以从形式上来说，摄影作品这个概念的外延现在已经非常大了，最主要的延伸就体现在作品的载体上，许多图片形式的作品，也都可以包含在摄影作品这个概念的外延之中。
</p>

<p>
<b>而摄影这个概念的内涵，我认为是至少包括四个部分的：</b>
</p>

<p>
<b>摄影行为主体，摄影器材，摄影作品载体，摄影作品呈现。</b>
</p>

<p>
即：由谁，通过什么固定图像和色彩的方式，以什么形式保存（胶片、数码），以什么形式呈现（冲印，以网络形式上传）。
</p>

<p>
摄影主体是不是一定要是人这个问题，已经摆在我们面前了，我个人倾向于折中说：有人的参与就行。
</p>

<p>
或者换句话说，我们通常所说的摄影，一般已经默认为摄影主体是人了，这显然缩小了摄影作为一个艺术概念的外延。进一步说，这又不得不牵扯到另一个问题：对于艺术作品而言，我们人类，到底是作为一个裁判，即审美规则的制定者，还是作为一个参与者即参与到整个宇宙，或是整个大自然的评价标准中去。
</p>

<p>
而这正是艺术的价值，这个根本的问题，这个话题目前我还展开不了。但我的观点是：艺术的绝对价值是可以脱离人的意识和标准而客观存在的。这些在宇宙、自然中已经存在的秩序和绝对的美，是不因人的意识改变而改变的。我们所做的是发现美，表达美，在这些客观存在的根本的“秩序美”之上创造我们人类文化的“艺术美”。
</p>

<p>
<b>如果说艺术是一个形式，那美就是艺术内容的本质。</b>
</p>

<p>
打个比方：另一个外星文明，也有着他们的对于艺术的定义和表述，用他们的语言和行为来表达“美”这个概念。即自然中的风光、各种自然现象， <b>我们不是这些物质元素的初始创造者，我们是诞生于这些物质元素本身的发现者和探索者</b> 。我们创造的文化理念、艺术理念、人类的文明，至少目前还脱离不了宇宙秩序这个根本的规则，即我们通常所说的美这个概念一样是有前提的。这些概念放到宇宙的尺度内，又是另一回事了。
</p>

<p>
<b>所以，我也一向对现有的我们人类文明中关于什么是美的，什么不是美的，不那么在意。</b>
</p>

<p>
美的标准一定不会是一恒不变的，至少人类文明发展到现在，已经经历了太多次艺术审美的变革（人文主义发展之前，文艺复兴之前，艺术大多是宗教体裁的，人类思想解放之后才更多的出现描绘人自身表达的艺术作品。）这些变革有思想解放带来的，也有技术发展带来的（绘画、摄影、到现在的AIGC）。古人仰望天空看星星，我们现在探索宇宙，看星系。
</p>

<p>
不变的是美的本质。它以后还会被不同的主体表达，以各种不同的形式呈现出来。
</p>

<p>
不管如何去定义美这个概念，我认为美是包含在「绝对秩序」这个概念之中的：对称、规则的几何图形等这些元素排列的形式和方式，会给人或者其他生物带来 <b>稳定感、和谐感、平衡感</b> ，无论是视觉上的还是体感上的。简而言之，让人感到舒适的，你就会觉得它美。这个概念在《艺术与视知觉》这本书里有详细的讲解。
</p>

<p>
对于人类而言，至少有一点是肯定的：美寄托着人类对于美好未来的向往和憧憬，美是一种希望。
</p>

<p>
说回摄影。
</p>

<p>
<a href="https://mp.weixin.qq.com/s/c2UKBOrZ8WU7Km6U2i48LQ">徐淳刚：中国摄影向何处去 (qq.com)</a>这篇文章里面说到了一个概念：摄影的本体语言。
</p>

<blockquote>
<p>
今天的中国摄影，没有自己的本体语言。一切都是照搬国外。国外有新纪实，我们照搬新纪实，国外有景观，我们也照搬景观，始终走在西方后面。摄影归根到底是一种表达的方式，一种和自身发生真切关系的语言。我们可以从郎静山的例子，看清中国摄影的语言探索。郎静山的摄影，虽然是画意摄影，远远滞后于西方当时的直接摄影，但是郎静山的可贵之处在于他想走出一条“中国摄影”的路，这就牵扯到摄影的本体语言的问题。
</p>

<p>
<b>摄影技术、相机、银盐、数码，所有的东西都是西方的，怎样才能有自己的本体语言？郎静山的摄影是理想化的，他想着把中国绘画融入摄影。但如何走出中国摄影的道路？如何让摄影的语言成为中国摄影的语言？尽管郎静山的摄影有很大的局限性，但他的实践意义重大。</b>
</p>

<p>
关于中国摄影的本体语言，郎静山说了一句话，一语中的。他说：“总是跟在人家后面跑，即使拍得再好，拍得再像，也是跟人家学的。”所以他想走中国摄影自己的路，这个方向无疑是对的。但郎静山的摄影后继无人。他想去讲求古典主义，可是我们的生活和理念已经完全现代化，所以中间的鸿沟非常大，很难做到中西合璧。这是郎静山的困境，一种严峻的美学困境，也是我们的真实困境，一种文化传承与缺失的困境，传统与现代的困境。
</p>

<p>
到底什么是摄影的本体语言？ <b>摄影的本体语言不是指技术性的语言，它是指根本性的语言，表现的最终的本质是什么样的</b> 。摄影是西方的，为什么要说郎静山，就是因为他有意识地在思考中国摄影的本体语言，不按照西方人的方式去拍。郎静山在思考摄影的本体语言，这个在过去的摄影师中是绝无仅有的。现在中国新锐摄影师的作品，别人一写文章，就说国外的摄影师也拍过，那个摄影师也拍过。我们没有自己的本体，借鉴了别人的本体。摄影的本体语言最终是一种文化的、本质的东西，是一个最高理念的东西。中国摄影没有自己的本体语言，会始终被牵着鼻子走，甚至会在世界摄影的范围内被淘汰。
</p>
</blockquote>

<p>
我认为这个概念侧重点是表现形式，摄影内容的表现形式，美的标准，美的表现形式。
</p>

<p>
关于这个问题的看法，上面已经说的很多了。
</p>
</div>
</div>
</div>

<div id="outline-container-org2711c75" class="outline-2">
<h2 id="org2711c75">黑客帝国</h2>
<div class="outline-text-2" id="text-org2711c75">
<p>
接着艺术的表现形式这条线往下说。摄影当然只是艺术表现形式里很小的一个了，也是很年轻的一个。
</p>

<p>
今天主要想思考的是，虚拟与现实的问题。
</p>

<p>
说到这个，不得不先扯一下黑客帝国。这是我最喜欢的科幻电影之一了。和一样超前的终结者、还有大佬级别的星际穿越不同，和可帝国里夹带着许多哲学的思考。它将人与AI，虚拟与现实等一些主题借着这个故事，表现的太好了。插管接入虚拟世界这个设定实在是太巧妙了。电影名字名字也起的好，The Matrix，中文名就少了许多哲学的韵味。
</p>

<p>
感兴趣的可以看看这个<a href="https://www.bilibili.com/video/BV1gf4y117cz/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">【培根悖论】深度回顾世纪之交最佳科幻系列《黑客帝国》_哔哩哔哩_bilibili</a>，豆瓣上也有许多很有想象力的解读，<a href="https://movie.douban.com/subject/1291843/">黑客帝国 (豆瓣) (douban.com)</a>。
</p>

<p>
最有代表性的一定是 Morpheus 让 Neo 选药丸这个场景了：
</p>


<figure id="org437f7e4">
<img src="https://s2.loli.net/2023/02/23/D2786pQHgAqERVX.jpg" class="img" width="60%" height="60%">

</figure>

<p>
这两个名字也是有寓意的（网络摘录）：
</p>

<blockquote>
<p>
Neo：
</p>

<p>
Neo有两层意思，neo是希腊语里的"new"，他将带领我们开启新的篇章。另外Neo其实还是一个anagram，即变位词，由颠倒字母顺序而构成的词。Neo是one的变位词。Neo is the One。Neo就是那个唯一，那个救世主。
</p>

<p>
Neo本名Thomas A·Anderson，从希腊语角度考虑的话，Thomas有"twin"和"leader"的意思。
</p>

<p>
Morpheus:
</p>

<p>
人物原型出自尼尔·盖曼大神的《Sandman》同名人物。Morpheus这个词表示The God of dreams,是希腊神话里掌管梦的神。
</p>
</blockquote>

<p>
这些神话的元素，让本身就有很浓哲学内核的电影更有美感了。
</p>

<p>
今天想说的是：虚拟和现实的界限，随着科学技术的发展，一定会越来越模糊。
</p>

<p>
虽然元宇宙凉了，Facebook 推的 Meta，凉的一塌糊涂，但还记得刚开始由比特币、去中心化、WEB3 这些概念衍生出的元宇宙被吹的有多火么。正如现在的 chatGPT。AI 的革命或许真的就不远了。<a href="https://www.bilibili.com/video/BV1Cd4y1c7GR/?spm_id_from=333.999.0.0&amp;vd_source=92184533e359726f138fee9650261f0f">人类现在想突破宇宙这个尺度的限制，可能真的得改造自己的生物属性了</a>。
</p>
</div>
</div>

<div id="outline-container-org14cfe01" class="outline-2">
<h2 id="org14cfe01">什么是虚拟？什么才是现实？</h2>
<div class="outline-text-2" id="text-org14cfe01">
<p>
我们有句老话，眼见为实，耳听为虚，现在眼见真的不一定是实了。关于物质决定意识还是意识决定物质这个问题上，我是坚定的唯物主义者。
</p>

<p>
当虚拟现实眼镜真的可以做成隐形眼镜的大小，我们人类将迎来全新的世界。仅仅通过视觉，我们就必须得重新定义什么是现实，什么是虚拟。
</p>

<p>
以后一定是虚拟叠加现实的世界，因为现在已经是如此了。社交软件只不过没有被虚拟现实化，元宇宙因为技术的瓶颈，还不能有质变，这些社交软件的账号，就是我们在互联网上的另一个分身，另一个我们，我们一直在用虚拟与现实沟通。（2024-10-28-再编辑：在这个<a href="https://wiki.vandee.art/#Google%20%E5%89%8D%20CEO%20%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E6%96%BD%E5%AF%86%E7%89%B9%E8%BF%91%E6%9C%9F%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%20CS323%20%E8%AF%BE%E5%A0%82%E4%B8%8A%E7%9A%84%E8%AE%BF%E8%B0%88">笔记</a>笔记里我又想到了同样的事。）
</p>

<p>
不难想象这样一个全新的虚拟与现实交融的世界：
</p>

<p>
存在着一个类似终结者里天网的全球联网人工智能系统，它接入了我们生活的方方面面。我们带上VR设备，各种新的移动终端，VR百度地图导航，实时在视网膜上显示。道路名称，交通状况，店铺信息，一目了然。然后路上碰到一家新开的煎饼果子店，摊位信息上显示着今天老板卖了多少个煎饼果子，
</p>

<p>
老板的头上还显示着他今天刚更新的朋友圈：这个月生意不太行，生活好难，加油！但是刚在天网商城买了一套虚拟衣服，就是今天身上的这件“梵高向日葵”，真的好看！哈哈。
</p>

<p>
于是你也登录了天网商城，领取了连续签到的天网币，看了眼天网账户的余额。边等着果子，边逛着网店。逛着逛着，你预设的5条最快上班线路中的一条，发来提示，公交还有10分钟到站。
</p>

<p>
虚拟现实带来的伦理、道德、法律问题一定会很多，但我也真的很期待这样的世界。
</p>

<p>
所以如果是这样，什么是虚拟，什么又是现实呢？
</p>

<p>
<b>你会更想带上这个VR眼睛看到自己想看到的世界，还是不带眼镜，看着其他都带着眼镜的人看着你。</b>
</p>

<p>
如果是这样，对于你来说，不带眼镜就真的就真实了么？
</p>

<p>
那个时候，你会选择蓝色药丸还是红色药丸呢？
</p>

<p>
<a href="https://zhuanlan.zhihu.com/p/60958735">“梦是欲望的满足”，这句话是弗洛伊德在《梦的解析》中最核心、最重要的结论。</a>
</p>

<p>
虚拟是现实的映射，没有黑也就无所谓白，
</p>

<p>
影也本就是是光的一部分，没有了影就感受不到光的力量。
</p>

<p>
这也是我喜欢摄影的原因了，
</p>

<p>
按下快门的一瞬间，
</p>

<p>
虚拟和现实相互映射，就随着那一声让人上瘾的咔擦声，链接了。
</p>

<p>
链接着我们对美，以及美好的想象。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-philosophy.html">Philosophy</a> <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Philosophy]]></category>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/blog/2023-02-23-blue-or-red.html</link>
  <guid>https://www.vandee.art/blog/2023-02-23-blue-or-red.html</guid>
  <pubDate>Thu, 23 Feb 2023 17:40:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[我为什么喜欢摄影]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0e7958f">关于时间</a></li>
<li><a href="#org0fb1927">过去和未来</a></li>
<li><a href="#org751aaaf">拿起相机</a></li>
<li><a href="#orgf77e2d0">光影</a></li>
</ul>
</div>
</nav>


<div id="outline-container-org0e7958f" class="outline-2">
<h2 id="org0e7958f">关于时间</h2>
<div class="outline-text-2" id="text-org0e7958f">
<p>
这是一个亘古不变，困扰着人类永恒的话题，和爱情一样。
</p>

<p>
如此神秘，又让人捉摸不透。只知道，自己会永远深陷其中，却又无法得出它的法则，摸不透它的脾气。
</p>

<p>
物理学上时间的定义：（copy度娘）
“时间（Time）是物质的永恒运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。时、日、月、年、世纪的时间计量属天文学中的历法范畴。时间是物理学中的七个基本物理量之一，符号为t。在国际单位制（SI）中，时间的基本单位是秒，符号为s‘’
</p>

<p>
这样描述，难免会显得冷血严肃。
</p>

<p>
但事实就是如此，我更喜欢说的简单些：时间是我们存在的一种最简单直接的证明。
</p>
</div>
</div>


<div id="outline-container-org0fb1927" class="outline-2">
<h2 id="org0fb1927">过去和未来</h2>
<div class="outline-text-2" id="text-org0fb1927">
<p>
对于美好的事物，人们总会怀念。对于美好的时光，人们总想留住。
</p>

<p>
总觉得它们流逝的太快，时间过得太匆忙，想尽办法试图去放慢它。
</p>

<p>
但时间就是如此的无情，一分就是一分，一秒就是一秒，毫不留情的规整的逝去着。
</p>

<p>
当有一天你开始明白：
</p>

<p>
过去早已不单单是过去，你为之奋斗者的现在也可能不会变成将来。
</p>

<p>
于是，现在正在进行中的分秒，你更倾向于它变成了过去，
</p>

<p>
还是说和我现在一样，觉得它一步步的影响着、决定着未来。
</p>
</div>
</div>

<div id="outline-container-org751aaaf" class="outline-2">
<h2 id="org751aaaf">拿起相机</h2>
<div class="outline-text-2" id="text-org751aaaf">
<p>
于是，某一天，我拿起了相机。
</p>

<p>
拍下了我的第一张照片，然后第二张、第三张，
</p>

<p>
直到这一张和下一张。
</p>

<p>
想去定格那些美好的瞬间，
</p>

<p>
将过去的记忆随着时间沉淀，
</p>

<p>
延续着那时它们的感觉和滋味。
</p>

<p>
似乎那些美好从来没有停止过，
</p>

<p>
以它们自己的时间线，依然保持着绝对的生命力，
</p>

<p>
舞动着，舞出一条条绝美的生命线。
</p>

<p>
不知何时，就又会和现在偶然的相遇。
</p>

<p>
纷繁的色彩，明暗错落的光影，几何交错的空间，
</p>

<p>
一瞬之间，变幻出无限可能。
</p>
</div>
</div>

<div id="outline-container-orgf77e2d0" class="outline-2">
<h2 id="orgf77e2d0">光影</h2>
<div class="outline-text-2" id="text-orgf77e2d0">
<p>
光影之下，阴阳之中。
</p>

<p>
黑白之间，世间百态。
</p>

<p>
光是狡猾的时间披上的七彩外衣，
</p>

<p>
影是人们内心映射的五味杂陈。
</p>

<p>
摄影是关乎光的艺术，
</p>

<p>
而光是时间的代言。
</p>

<p>
我们的故事，就这样流动在光影之中。
</p>
</div>
</div>
<div class="taglist"><a href="https://www.vandee.art/tags.html">Tags</a>: <a href="https://www.vandee.art/tag-art.html">Art</a> </div>]]></description>
  <category><![CDATA[Art]]></category>
  <link>https://www.vandee.art/blog/2022-07-11-the-reason-why-i-love-photography.html</link>
  <guid>https://www.vandee.art/blog/2022-07-11-the-reason-why-i-love-photography.html</guid>
  <pubDate>Mon, 11 Jul 2022 09:12:00 +0800</pubDate>
</item>
</channel>
</rss>
